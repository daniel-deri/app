{"version":3,"sources":["desktop/pages/Info/Detail.js","utils/DeriNumberFormat.js","desktop/pages/Info/Table.js","desktop/pages/Info/Chart.js"],"names":["LIQUIDITY_HEADER","LIQUIDITY_COLUMNS","GET_LIQUIDITY_URL","process","REACT_APP_INFO_HTTP_URL","TRADE_HEADER","TRADE_COLUMNS","columnFormat","account","data","formatAddress","timestamp","moment","Date","format","notional","value","prefix","thousandSeparator","decimalScale","amount","suffix","bToken","price","direction","className","action","Detail","network","add","catalog","useParams","getLiquidityDataUrl","getTradeDataUrl","style","window","screen","width","to","toUpperCase","title","url","seriesType","headers","columns","columnRenders","pagination","DeriNumberFormat","props","renderablity","setRenderablity","useState","useEffect","allowZero","others","undefined","isNaN","Math","abs","displayType","inject","observer","dataSet","loading","onRowClick","setData","page","setPage","count","setCount","pageSize","setPageSize","loadData","async","restUrl","res","axios","get","status","Array","isArray","floor","loaded","map","header","d","onClick","cursor","col","call","AreaSeries","chartRef","useRef","series","curValue","setCurValue","curDate","setCurDate","lastDataRef","crosshairMove","param","point","current","seriesPrices","forEach","item","time","year","month","day","chart","rect","document","querySelector","getBoundingClientRect","createChart","localization","priceFormatter","convertToInternationalCurrencySystem","locale","timeScale","rightOffset","leftOffset","timeVisible","borderColor","borderVisible","height","priceScale","position","mode","handleScroll","handleScale","crosshair","CrosshairMode","Normal","vertLine","labelVisible","visible","horzLine","grid","vertLines","horzLines","layout","backgroundColor","textColor","fontSize","initChart","areaSeries","addAreaSeries","priceLineVisible","lastValueVisible","topColor","bottomColor","lineColor","priceFormat","precision","minMove","sort","item1","item2","dateFormat","last","length","fitContent","histogramSeries","addHistogramSeries","color","type","scaleMargins","top","bottom","Number","subscribeCrosshairMove","unsubscribeCrosshairMove","removeSeries","remove","ref"],"mappings":"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","file":"static/js/30.8b66b946.chunk.js","sourcesContent":["\r\nimport './info.less'\r\nimport Table from './Table'\r\nimport { useParams } from 'react-router-dom'\r\nimport { formatAddress } from '../../../utils/utils'\r\nimport DeriNumberFormat from '../../../utils/DeriNumberFormat'\r\nimport moment from 'moment'\r\nimport Chart from './Chart'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst LIQUIDITY_HEADER = ['ACTION','ACCOUNT','LIQUIDITY','AMOUNT','TIMESTAMP (UTC+8)']\r\nconst LIQUIDITY_COLUMNS = ['action','account','notional','amount','timestamp']\r\nconst GET_LIQUIDITY_URL = `${process.env.REACT_APP_INFO_HTTP_URL}`\r\n\r\nconst TRADE_HEADER = ['DIRECTION','ACCOUNT','SYMBOL','PRICE','VOLUME','NOTIONAL','TIMESTAMP (UTC+8)']\r\nconst TRADE_COLUMNS = ['direction','account','symbol','price','volume','notional','timestamp']\r\n\r\n\r\nconst columnFormat = {\r\n  account : data => formatAddress(data.account),\r\n  timestamp : data =>  moment(new Date(data.timestamp * 1000)).format('YYYY-MM-DD HH:mm:ss'),\r\n  notional : data => <DeriNumberFormat value={data.notional} prefix='$' thousandSeparator={true} decimalScale={5}/>,  \r\n  amount : data =>  <DeriNumberFormat value={data.amount} suffix={` ${data.bToken}`} thousandSeparator={true} decimalScale={5}/> ,\r\n  price : data =>  <DeriNumberFormat value={data.price} thousandSeparator={true}  decimalScale={5}/>,\r\n  direction : data => <span className={`direction ${data.direction}`}>{data.direction}</span>,\r\n  action : data => <span className={`action ${data.action}`}>{data.action}</span>\r\n}\r\n\r\n\r\nexport default function Detail(){\r\n  const {network,add,catalog,bToken} =  useParams();\r\n  const getLiquidityDataUrl = `${GET_LIQUIDITY_URL}/get_liquidity?pool=${add}`\r\n  const getTradeDataUrl = `${GET_LIQUIDITY_URL}/get_trade?pool=${add}`\r\n\r\n  return(\r\n    <div className='info' style={{'min-width': `calc(100vw - ${window.screen.width * 0.3}px)`}}>\r\n    <div className='title'><Link to='/info'>Deri Overview</Link> &gt; {`${network} - ${catalog.toUpperCase()} - ${formatAddress(add)} (${bToken})`}</div>\r\n      <div className='chart-box'>\r\n        <div className='chart'><Chart title='TVL' url = {`${process.env.REACT_APP_INFO_HTTP_URL}/get_liquidity_history?pool=${add}`} seriesType='area'/> </div>\r\n        <div className='chart'><Chart title='Volume 24H' url = {`${process.env.REACT_APP_INFO_HTTP_URL}/get_trade_history?pool=${add}`} seriesType='histogram'/> </div>\r\n      </div>\r\n      <div className='table-by-network'>\r\n        <Table title='LIQUIDITY' headers={LIQUIDITY_HEADER} columns={LIQUIDITY_COLUMNS} columnRenders={columnFormat} url={getLiquidityDataUrl} pagination={true}/>\r\n        <Table title='TRADE' headers={TRADE_HEADER} columns={TRADE_COLUMNS} columnRenders={columnFormat}  url={getTradeDataUrl} pagination={true}/>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React,{useState,useEffect} from 'react'\r\nimport NumberFormat from 'react-number-format'\r\n\r\nexport default function DeriNumberFormat(props){\r\n  const [renderablity, setRenderablity] = useState(<span className='loading-line'></span>);\r\n\r\n  useEffect(() => {\r\n    const {allowZero,...others} = props \r\n    if(((props.value !== undefined && props.value !== '' && props.value !== 'NaN') || ((isNaN(props.value) && Math.abs(props.value)) === 0 && allowZero === true ))) {\r\n      setRenderablity(<NumberFormat {...others} displayType = 'text' />)\r\n    } \r\n    return () => {};\r\n  }, [props.value]);\r\n\r\n  return renderablity;\r\n}","import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport { inject, observer } from 'mobx-react'\r\n\r\nfunction Table({title,dataSet,url,headers,columns,columnRenders = {},pagination,loading,onRowClick}){\r\n  const [data, setData] = useState([])\r\n  const [page, setPage] = useState(1)\r\n  const [count, setCount] = useState()\r\n  const [pageSize, setPageSize] = useState(10)\r\n\r\n  const loadData = async (url,page) => {\r\n    let restUrl = url;\r\n    if(pagination){\r\n      restUrl = `${restUrl}&page=${page}&page_amount=${pageSize}`\r\n    }\r\n    loading.loading()\r\n    const res = await axios.get(restUrl);\r\n    if(res.status === 200 && Array.isArray(res.data.data)){\r\n      setCount(res.data.count / pageSize)\r\n      if(res.data.count % pageSize > 0 ){\r\n        setCount(Math.floor(res.data.count / pageSize) +1)\r\n      }\r\n      setData(res.data.data)\r\n      setPage(page)\r\n      loading.loaded()\r\n    }\r\n  }\r\n\r\n  const prePage = () => {\r\n    if(page === 1){\r\n      return;\r\n    }\r\n    loadData(url,page - 1)\r\n  }\r\n  const nextPage = () => {\r\n    if(page === count){\r\n      return;\r\n    }\r\n\r\n    loadData(url,page +1)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if(dataSet){\r\n      setData(dataSet)\r\n    } else {\r\n      loadData(url,1);\r\n    }\r\n  }, [url])\r\n  return(\r\n    <div className='info-table'>\r\n      <div className='t-title'>{title}</div>\r\n      <div className='tbody'>\r\n        <div className='theader'>\r\n          {headers.map(header => <div className='col'>{header}</div>)}\r\n        </div>\r\n        {data.map(d => (\r\n          <div className='row' onClick={() => onRowClick && onRowClick(d)} style={{cursor : onRowClick ? 'pointer' : 'normal'}}>\r\n            {columns.map(col => <div className='col'>{columnRenders[col] ? columnRenders[col].call(null,d) :d[col]}</div>)}\r\n            <div></div>\r\n          </div>))}\r\n        {pagination && <div className='pagination row'>\r\n          <span className='arrow' onClick={prePage}> &lt; </span><span>Page {page} of {count}</span><span className='arrow' onClick={nextPage}> &gt; </span>\r\n        </div>}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default inject('loading')(observer(Table))","import { useRef,useEffect,useState } from \"react\"\r\nimport { createChart, CrosshairMode } from \"lightweight-charts\";\r\nimport axios from \"axios\";\r\nimport dateFormat from 'dateformat'\r\nimport { convertToInternationalCurrencySystem } from \"../../../utils/utils\";\r\n\r\nexport default function AreaSeries({title,url,seriesType}){\r\n  const chartRef = useRef(null);\r\n  const series = useRef(null)\r\n  const [curValue, setCurValue] = useState('')\r\n  const [curDate, setCurDate] = useState('')\r\n  const lastDataRef = useRef()\r\n\r\n  const initChart = () => {\r\n    const rect = document.querySelector('.info-chart').getBoundingClientRect()\r\n    const chart = createChart(chartRef.current, { \r\n      localization : {\r\n        priceFormatter: price => '$ ' + convertToInternationalCurrencySystem(price),\r\n        locale: 'en-US'\r\n      },\r\n      timeScale: {\r\n        rightOffset : 0,\r\n        leftOffset : 5,\r\n        timeVisible : true,\r\n        borderColor : '#fff',\r\n        borderVisible :  false\r\n      },\r\n      width: rect.width,\r\n      height: rect.height,\r\n      priceScale: {\r\n        position: 'none',\r\n        borderColor: '#fff',\r\n        borderVisible : false,\r\n        mode: 0,\r\n        // scaleMargins: {\r\n        //   top: 0.3,\r\n        //   bottom: 0\r\n        // },\r\n      },\r\n\r\n      handleScroll: false,\r\n      handleScale: false,\r\n      crosshair: {\r\n        mode: CrosshairMode.Normal,  \r\n        vertLine: {\r\n          labelVisible : false,  \r\n          visible : false\r\n        },\r\n        horzLine: {\r\n          labelVisible : false,  \r\n          visible : false\r\n        },\r\n      },\r\n      grid: {\r\n        vertLines: {\r\n          visible: false,\r\n        },\r\n        horzLines: {\r\n          visible: false,\r\n        },\r\n      },\r\n      layout: {\r\n        backgroundColor: '#212327',\r\n        textColor: '#fff',\r\n        fontSize: 12\r\n      },\r\n    });\r\n    return chart;\r\n  }\r\n\r\n  const crosshairMove = param => {\r\n      if (!param.point) {\r\n        setCurDate('')\r\n        if(lastDataRef.current){\r\n          setCurValue(lastDataRef.current.value)\r\n        }\r\n        return;\r\n      }\r\n      param.seriesPrices.forEach(item => {\r\n        if(item){\r\n          setCurValue(item)\r\n        }\r\n      })\r\n      param.time && setCurDate(`${param.time.year}-${param.time.month}-${param.time.day} (UTC+8)`)\r\n  }\r\n\r\n  const addAreaSeries = async(chart) => {\r\n    const areaSeries = chart.addAreaSeries({\r\n      priceLineVisible : false,\r\n      lastValueVisible: false,\r\n      topColor: 'RGBA(0,101,159,.5)',\r\n      bottomColor: 'RGBA(0,101,159,0)',\r\n      lineColor: 'RGB(0,101,159)',\r\n      priceFormat: {        \r\n        precision: 1,\r\n        minMove : '1000',\r\n      }\r\n    })\r\n  \r\n    \r\n    const res = await axios.get(url)\r\n    if(res.status === 200 && Array.isArray(res.data.data)){\r\n      let data = res.data.data.sort((item1,item2) => {\r\n        if(item1.timestamp > item2.timestamp) {\r\n          return 1\r\n        } else if(item1.timestamp < item2.timestamp){\r\n          return -1\r\n        } else {\r\n          return 0\r\n        }\r\n      })\r\n      data = data.map(d => ({time : dateFormat(new Date(d.timestamp * 1000),'yyyy-mm-dd'),value : d.value}))\r\n      areaSeries.setData(data)\r\n      const last = data[data.length -1]\r\n      setCurValue(last.value)\r\n      lastDataRef.current = last\r\n    }\r\n    series.current = areaSeries\r\n    chart.timeScale().fitContent();\r\n    return areaSeries;\r\n  }\r\n\r\n  const addHistogramSeries = async (chart) => {\r\n    const histogramSeries = chart.addHistogramSeries({\r\n      color: '#00659F',\r\n      priceLineVisible : false,\r\n      lastValueVisible: false,\r\n      priceFormat: {\r\n        type: \"volume\",\r\n        priceFormatter: price => '$ ' + price\r\n      },\r\n      scaleMargins: {\r\n        top: 0.2,\r\n        bottom: 0\r\n      }\r\n    })\r\n    const res = await axios.get(url)\r\n    if(res.status === 200 && Array.isArray(res.data.data)){\r\n      const data = res.data.data.sort((item1,item2) => {\r\n        if(item1.timestamp > item2.timestamp) {\r\n          return 1\r\n        } else if(item1.timestamp < item2.timestamp){\r\n          return -1\r\n        } else {\r\n          return 0\r\n        }\r\n      }).map(d => ({time : dateFormat(new Date(d.timestamp * 1000),'yyyy-mm-dd'),value : Number(d.value)}))\r\n      \r\n      histogramSeries.setData(data)\r\n      const last = data[data.length -1]\r\n      setCurValue(last.value)\r\n      lastDataRef.current = last\r\n    }\r\n    series.current = histogramSeries\r\n    chart.timeScale().fitContent();\r\n    return histogramSeries;\r\n  }\r\n\r\n  useEffect(() => {\r\n    const chart = initChart();\r\n    if(seriesType === 'area'){\r\n      addAreaSeries(chart)\r\n    }\r\n    if(seriesType === 'histogram'){\r\n      addHistogramSeries(chart)\r\n    }\r\n    chart.subscribeCrosshairMove(crosshairMove);\r\n    return () => {\r\n      if(chart){\r\n        chart.unsubscribeCrosshairMove(crosshairMove)\r\n        if(series.current){\r\n          chart.removeSeries(series.current);\r\n        }\r\n        chart.remove();\r\n      }\r\n    }\r\n  }, [url,seriesType])\r\n\r\n  return(\r\n    <div className='info-chart'>\r\n      <div className='chart-title'>\r\n        <div className='title-label'>{title}</div>\r\n        <div className='title-value'>{curValue ? `$${convertToInternationalCurrencySystem(curValue)}` : ''} </div>\r\n        <div className='title-date'>{curDate} </div>\r\n        </div>\r\n      <div className='series' ref={chartRef}></div>\r\n    </div>\r\n  )\r\n}\r\n"],"sourceRoot":""}