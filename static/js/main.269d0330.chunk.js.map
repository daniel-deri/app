{"version":3,"sources":["lib/web3js/factory/web3.js","utils/LoadableComponent.js","lib/web3js/config/chain.js","lib/web3js/config/contract.js","lib/web3js/config/rest_server.js","lib/web3js/utils.js","lib/web3js/indexV2.js","lib/web3js/v2/utils/convert.js","lib/web3js/v2/utils/network.js","lib/web3js/v2/utils/validate.js","lib/web3js/v2/utils/chain.js","lib/web3js/v2/contract/contract_base.js","lib/web3js/v2/contract/abis.js","lib/web3js/v2/contract/perpetual_pool.js","lib/web3js/v2/contract/perpetual_pool_router.js","lib/web3js/v2/contract/b_token.js","lib/web3js/v2/contract/l_token.js","lib/web3js/v2/contract/p_token.js","lib/web3js/v2/contract/woo_oracle.js","lib/web3js/v2/factory.js","lib/web3js/v2/utils/oracle.js","lib/web3js/v2/calculation/position.js","lib/web3js/v2/calculation/funding_rate.js","lib/web3js/v2/calculation/liquidity.js","lib/web3js/v2/api/mining_query_api.js","lib/web3js/v2/api/mining_transaction_api.js","lib/web3js/v2/api/api_globals.js","lib/web3js/v2/api/trade_query_api.js","lib/web3js/v2/api/trade_history_api.js","lib/web3js/v2/api/trade_transaction_api.js","lib/web3js/api/walletApi.js","lib/web3js/api/lpPoolApi.js","model/Config.js","lib/web3js/api_wrapper/config_api.js","lib/web3js/api_wrapper/mining_query_api.js","lib/web3js/api_wrapper/mining_transaction_api.js","lib/web3js/api_wrapper/trade_query_api.js","lib/web3js/api_wrapper/trade_transaction_api.js","lib/web3js/api_wrapper/trade_history_api.js","lib/web3js/calculation/fundingRate.js","lib/web3js/calculation/index.js","lib/web3js/api/databaseApi.js","lib/web3js/api/tradeHistoryApi.js","lib/web3js/api/restApi.js","lib/web3js/api/contractTransactionApi.js","lib/web3js/api/contractTransactionApiV2.js","lib/web3js/api/apiGlobals.js","utils/utils.js","App.js","model/Wallet.js","model/Oracle.js","model/Position.js","model/Contract.js","model/History.js","model/Trading.js","model/Version.js","index.js","lib/web3js/config/database.js","lib/web3js/api/contractQueryApi.js","lib/web3js/api/slpPoolApi.js","lib/web3js/api/clp2PoolApi.js","lib/web3js/api/clpPoolApi.js","lib/web3js/contract/contract.js","lib/web3js/contract/perpetual_pool.js","lib/web3js/contract/bToken.js","lib/web3js/contract/pToken.js","lib/web3js/contract/lToken.js","lib/web3js/contract/database.js","lib/web3js/contract/database_wormhole.js","lib/web3js/contract/database_airdrop.js","lib/web3js/contract/mining_vault_pool.js","lib/web3js/contract/mining_vault_router.js","lib/web3js/contract/slp_pool.js","lib/web3js/contract/clp_pool.js","lib/web3js/contract/clp2_pool.js","lib/web3js/contract/deri.js","lib/web3js/contract/wormhole.js","lib/web3js/factory/contracts.js","lib/web3js/config/env.js","lib/web3js/v2/config/chain.js","lib/web3js/v2/config/contract.js","lib/web3js/v2/config/oracle.js"],"names":["metaMaskWeb3","web3Instance","web3","undefined","window","ethereum","Error","Web3","web3Factory","web3InstanceMap","chainId","a","Object","keys","includes","console","log","getChainProviderUrl","providerUrl","providers","HttpProvider","LoadingPage","NProgress","start","done","React","Component","LoadableComponent","component","Loadable","loader","loading","ChainProviderUrls","provider_urls","getChainProviderUrlsConfig","res","filter","i","length","getContractAddressConfig","env","pool","bToken","pToken","lToken","dToken","MiningVault","initialBlock","bTokenSymbol","symbol","unit","version","getSlpContractAddressConfig","getClpContractAddressConfig","getClp2ContractAddressConfig","getLpContractAddressConfig","type","getMiningVaultRouterContractAddress","filteredConfig","MiningVaultRouter","getDeriContractAddressConfig","Deri","Wormhole","getAnnualBlockNumberConfig","1","56","128","3","97","256","getRestServerConfig","getRedisWorkerQueneConfig","BigNumber","config","DECIMAL_PLACES","ROUNDING_MODE","ROUND_DOWN","EXPONENTIAL_AT","bg","value","base","times","repeat","div","max","value1","value2","gte","min","lte","toChecksumAddress","utils","hexToString","hexToUtf8","hexToNumber","hexToNumberString","naturalToDeri","toFixed","naturalWithPercentage","sd","toString","deriToNatural","deriToString","deriToBool","toNumber","hasInvalidArgsValue","args","some","isNaN","checkHttpServerIsAlive","url","fetch","ok","getAliveHttpServer","urls","MAX_VALUE","getNetworkName","poolNetwork","normalizeChainId","getPoolContractAddress","poolAddress","DeriEnv","get","c","p","bTokenAddress","pTokenAddress","lTokenAddress","dTokenAdress","MinningVaultAddress","getMiningVaultContractAddress","pools","getAnnualBlockNumber","blockNumbers","parseInt","getSlpContractAddress","getClp2ContractAddress","getClpContractAddress","getLpContractAddress","getDeriContractAddress","deriAddress","wormholeAddress","getOracleUrl","addSymbolParam","getOracleInfo","retry","mode","cache","json","getBTCUSDPrice","responseJson","price","format","bigNumber","toFormat","replaceAll","numberToHex","validateArgs","every","parseFloat","getChainProviderUrls","MAX_GAS_AMOUNT","ContractBase","contractAddress","useInfura","this","getOrSet","method","_init","contract","methods","call","accountAddress","gas","estimateGas","from","tx","self","_transactionReceipt","resolve","reject","eth","getTransactionReceipt","error","receipt","setTimeout","status","errorMessage","_estimatedGas","txRaw","to","data","encodeABI","request","params","Promise","_getTransactionReceipt","perpetualPoolAbi","perpetualPoolRouterAbi","bTokenAbi","lTokenAbi","pTokenAbi","wooOracleAbi","PerpetualPool","contractAbi","bTokenLength","symbolLength","routerAddress","protocolFeeCollector","protocolFeeAccrued","Contract","all","getLengths","getAddresses","getParameters","_call","decimals0","minBToken0Ratio","minPoolMarginRatio","minInitialMarginRatio","minMaintenanceMarginRatio","minLiquidationReward","maxLiquidationReward","liquidationCutRatio","protocolFeeCollectRatio","bTokenId","swapperAddress","oracleAddress","decimals","discount","liquidity","pnl","cumulativePnl","symbolId","multiplier","feeRatio","fundingRateCoefficient","cumulativeFundingRate","tradersNetVolume","tradersNetCost","blockNumber","getBlock","volume","abs","eventName","fromBlock","events","amount","getPastEvents","toBlock","es","e","push","PerpetualPoolRouter","_transact","isMaximum","MAX_INT256","priceInfos","BToken","address","_balanceOf","allowance","gt","MAX_UINT256","processAsset","lastCumulativePnl","LToken","Array","isArray","map","processPosition","cost","lastCumulativeFundingRate","PToken","WooOracle","perpetualPoolFactory","instanceMap","key","perpetualPoolRouterFactory","bTokenFactory","lTokenFactory","pTokenFactory","wooOracleFactory","getOraclePrice","getOracleConfig","wooOracle","getPrice","calculateEntryPrice","eq","calculateLiquidationPrice","margin","dynamicCost","tmp","minus","plus","isOrderValid","marginHeld","liquidityUsed","minMargin","success","calculateFundingRate","processFundingRate","fundingRate","annualBlockCount","calculateBTokenDynamicEquities","bTokens","reduce","accum","b","isBToken0RatioValid","bToken0Ratio","totalDynamicEquity","dynamicEquity","lt","isPoolMarginRatioValid","userLiquidity","symbols","poolMarginRatio","totalCost","s","calculateMaxRemovableLiquidity","restLiquidity","getLiquidityInfo","getPoolConfig","perpetualPool","bTokenConfigList","getFilteredPoolConfigList","sort","j","symbolConfigList","bTokenIdList","symbolIdList","getBToken","getAsset","parameterInfo","bTokenInfo","lTokenAsset","promises","getSymbol","totalPnl","index","poolLiquidity","maxRemovableShares","approximatePnl","shares","getPoolLiquidity","db","databaseFactory","getValues","catch","err","getPoolInfoApy","apy","volume1h","volume24h","addLiquidity","router","perpetualPoolRouter","validation","transaction","removeLiquidity","priceCache","_prices","split","set","val","timestamp","Date","now","fundingRateCache","resourceMap","resource","getSpecification","symbolInfo","bSymbol","getPositionInfo","symbolList","getPosition","getMargins","getPositions","positionInfo","margins","positions","symbolPrices","marginHeldBySymbol","unrealizedPnl","unrealizedPnlList","averageEntryPrice","liquidationPrice","getWalletBalance","balanceOf","balance","isUnlocked","getEstimatedFee","_getFundingRate","getEstimatedMargin","leverage","getFundingRateCache","poolConfigList","promiseList","bTokenInfoList","fundingRatePerBlock","liquidityUsedInAmount","getFundingRate","fundingRate0","getEstimatedFundingRate","newNetVolume","fundingRate1","getLiquidityUsed","liquidityUsed0","getEstimatedLiquidityUsed","liquidityUsed1","getPoolBTokensBySymbolId","bTokensConfigList","symbolsConfigList","bTokenList","resultList","walletBalance","availableBalance","fetchJson","resp","processTradeEvent","info","txHash","tradeVolume","_getTimeStamp","timeStamp","direction","time","transactionFee","_calculateFee","notional","transactionHash","getTradeHistoryOnline","_getBlockInfo","filters","owner","_getPastEvents","number","result","returnValues","item","unshift","getTradeHistory","tradeHistory","tradeFromBlock","tradeHistoryBlock","trim","tradeHistoryOnline","concat","unlock","depositMargin","addMargin","withdrawMargin","removeMargin","tradeWithMargin","newVolume","orderValidation","trade","closePosition","negated","connectWallet","handleChainChanged","handleAccountChanged","accounts","account","on","location","reload","getUserWalletBalance","walletAddress","getBalance","fromWei","getLpLiquidityInfo","getSlpLiquidityInfo","getClpLiquidityInfo","getClp2LiquidityInfo","addLpLiquidity","addSlpLiquidity","addClpLiquidity","addClp2Liquidity","removeLpLiquidity","removeSlpLiquidity","removeClpLiquidity","removeClp2Liquidity","isLpUnlocked","isSlpUnlocked","isClpUnlocked","isClp2Unlocked","unlockLp","unlockSlp","unlockClp","unlockClp2","getLpWalletBalance","getSlpWalletBalance","getClpWalletBalance","getClp2WalletBalance","Config","makeObservable","observable","setAll","action","current","configs","isV2","total","cur","findIndex","getContractAddressConfig2","require","getPoolConfigListV2","getPoolConfigList","getLiquidityInfo2","getLiquidityInfoV2","getPoolLiquidity2","getPoolLiquidityV2","getPoolInfoApy2","getPoolInfoApyV2","addLiquidity2","addLiquidityV2","removeLiquidity2","removeLiquidityV2","getSpecification2","getSpecificationV2","getPositionInfo2","getPositionInfoV2","getWalletBalance2","getWalletBalanceV2","isUnlocked2","isUnlockedV2","getEstimatedFee2","getEstimatedFeeV2","getFundingRate2","getFundingRateV2","getEstimatedFundingRate2","getEstimatedFundingRateV2","getLiquidityUsed2","getLiquidityUsedV2","getEstimatedLiquidityUsed2","getEstimatedLiquidityUsedV2","unlock2","unlockV2","depositMargin2","depositMarginV2","withdrawMargin2","withdrawMarginV2","tradeWithMargin2","tradeWithMarginV2","closePosition2","closePositionV2","getTradeHistory2","getTradeHistoryV2","calculateLiquidityUsed","calculateShareValue","lTokenTotalSupply","calculateMaxRemovableShares","lTokenBalance","shareValue","removable","calculateMarginHeld","calculatePnl","calculateMaxWithdrawMargin","held","poolMaxVolume","message","getUserInfo","userAddress","deadline","nonce","v","r","valid","getUserInfoHarvest","harvestLp","harvestTrade","lp","getUserInfoTotal","getUserInfoAll","userInfo","userInfoHarvest","userInfoTotal","assign","getLpPoolInfoApy","apy2","getUserInfoInPool","getUserInfoAllForAirDrop","databaseAirdropFactory","v1","r1","s1","v2","r2","s2","baseToken","processLiquidateEvent","national","getLiquidateHistoryOnline","getHttpBase","getFundingRateCache2","liquidateFromBlock","liquidateHistoryBlock","liquidateHistoryOnline","pPool","maxWithdrawMargin","_transactPool","totalSupply","getStateValues","mintDToken","miningVaultAddress","miningVault","miningVaultPoolFactory","mintAirdrop","miningVaultRouter","miningVaultRouterFactory","mint","wsOnPromise","ws","event","JSON","parse","sendTradeTxToWorkerQuene","methodCall","wsInstance","send","res2","addSlpLiquidity2","removeSlpLiquidity2","addClpLiquidity2","removeClpLiquidity2","addClp2Liquidity2","removeClp2Liquidity2","_accountAddress","_price","_interval","_update","update","setInterval","clear","clearInterval","PerpetualPoolParametersCache","_parameters","_ws","io","transports","path","id","versionKey","formatAddress","substr","formatBalance","eqInNumber","str1","str2","isLP","isSushiLP","isCakeLP","sessionStorageKey","storeVersion","sessionStorage","setItem","restoreVersion","getItem","storeConfig","stringify","getConfigFromStore","DesktopApp","MobileApp","App","isBrowser","isMobile","Wallet","detail","isConnected","approve","approved","connect","loadWalletBalance","wallet","chainInfo","supported","setDetail","makeAutoObservable","supportV2","computed","supportChain","isApproved","Oracle","timeType","kData","paused","listeners","already","setIndex","initWebSocket","WebSocket","withCredentials","emit","obj","toUpperCase","low","Number","high","open","close","time_type","unsubscribeBars","setSymbol","setTimeType","listener","callback","history","el","setPause","Position","spec","mockPositionInfo","position","interval","load","setInfo","History","Trading","slideIncrementMargin","userSelectedDirection","setWallet","setConfigs","setConfig","setContract","setPosition","setVolume","setUserSelectedDirection","setFundingRate","setHistory","setSlideMargin","fundingRateTip","volumeDisplay","isNegative","isPositive","configInfo","oracle","contractInfo","historyInfo","defaultConfig","getDefaultConfig","find","loadByConfig","changed","isV1","pause","store","resume","symbolChanged","addListener","loadFundingRate","fromStore","getFromStore","pos","setPaused","Math","currentSymbolMarginHeld","otherMarginHeld","incrementMarginHeld","totalMarginHeld","dynBalance","available","exchanged","multipliedBy","totalContractValue","Version","setCurrent","versionFromSession","notSave","trading","ReactDOM","render","StrictMode","document","getElementById","getDBProviderUrlsConfig","getDBAddressConfig","useProductionDB","getDBWormholeAddressConfig","getDBAirdropAddressConfig","parameters","slpPool","slpPoolFactory","getLiquidity","bTokenBalance","clp2Pool","clp2PoolFactory","clpPool","clpPoolFactory","isProvider","POOL_ABI","defaultValue","cumuFundingRate","cumuFundingRateBlock","minAddLiquidity","redemptionFeeRatio","priceDelayAllowance","signed","args1","args2","CONTRACT_ABI","BTokenContract","_balance","PTokenContract","lastCumuFundingRate","lastUpdateTimestamp","LTokenContract","DB_CONTRACT_ABI","DatabaseContract","keyArray","updateProviderUrl","DatabaseWormholeContract","DatabaseAirdropContract","MiningVaultPool","SlpPool","ClpPool","Clp2Pool","DeriContract","useProvider","WormholeContract","toChainId","toWormholeAddress","fromChainId","fromWormhole","fromNonce","databaseInstanceMap","database","databaseWormholeFactory","perpetualPoolInstanceMap","bTokenInstanceMap","pTokenInstanceMap","lTokenInstanceMap","mVaultInstanceMap","mVault","slpPoolInstanceMap","clpPoolInstanceMap","clp2PoolInstanceMap","deriFactory","deriInstanceMap","deri","wormholeFactory","wormholeInstanceMap","wormhole","_deriEnv","check","getOracleConfigList","filteredByChainId"],"mappings":"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","file":"static/js/main.269d0330.chunk.js","sourcesContent":["import Web3 from 'web3';\r\nimport { getChainProviderUrl } from '../utils';\r\n\r\nexport const metaMaskWeb3 = (function () {\r\n  let web3Instance = null;\r\n  return () => {\r\n    if (web3Instance !== null) {\r\n      return web3Instance;\r\n    }\r\n    let web3;\r\n    if (typeof window.ethereum !== undefined) {\r\n      web3 = new Web3(window.ethereum);\r\n    } else {\r\n      // console.log(\"Please install MetaMask first\")\r\n      throw new Error('Please install MetaMask first');\r\n    }\r\n    web3Instance = web3;\r\n    return web3;\r\n  };\r\n})();\r\n\r\nexport const web3Factory = (function () {\r\n  const web3InstanceMap = {};\r\n  return async(chainId) => {\r\n    if (Object.keys(web3InstanceMap).includes(chainId)) {\r\n      return web3InstanceMap[chainId];\r\n    }\r\n    console.log(\r\n      `==== web3Factory(${chainId}), please caution the access limits ===`\r\n    );\r\n    const providerUrl = await getChainProviderUrl(chainId);\r\n    const web3 = new Web3(new Web3.providers.HttpProvider(providerUrl));\r\n    web3InstanceMap[chainId] = web3;\r\n    return web3;\r\n  };\r\n})();\r\n","import React from 'react'\r\nimport Loadable from 'react-loadable'\r\nimport NProgress from 'nprogress'\r\nimport 'nprogress/nprogress.css'\r\n\r\nclass LoadingPage extends React.Component {\r\n  //类似github页面加载的那个加载条\r\n  componentWillMount(){\r\n    NProgress.start()\r\n  }\r\n  componentWillUnmount(){\r\n    NProgress.done()\r\n  }\r\n  render () {\r\n    return (\r\n      <div/>\r\n    )\r\n  }\r\n}\r\n\r\nconst LoadableComponent = (component) => {\r\n  return Loadable({\r\n    loader: component,\r\n    loading: ()=><LoadingPage/>\r\n  })\r\n}\r\n\r\nexport default LoadableComponent","export const ChainProviderUrls = [\r\n  {\r\n    provider_urls: [\r\n      'https://mainnet.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\r\n    ],\r\n    chainId: '1',\r\n  },\r\n  {\r\n    provider_urls: [\r\n      'https://bsc-dataseed.binance.org',\r\n      'https://bsc-dataseed1.defibit.io/',\r\n      'https://bsc-dataseed1.ninicoin.io/',\r\n    ],\r\n    chainId: '56',\r\n  },\r\n  {\r\n    provider_urls: ['https://http-mainnet.hecochain.com'],\r\n    chainId: '128',\r\n  },\r\n  {\r\n    provider_urls: [\r\n      'https://ropsten.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\r\n    ],\r\n    chainId: '3',\r\n  },\r\n  {\r\n    provider_urls: [\r\n      'https://kovan.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\r\n    ],\r\n    chainId: '42',\r\n  },\r\n  {\r\n    provider_urls: [\r\n      'https://data-seed-prebsc-2-s3.binance.org:8545/',\r\n      'https://data-seed-prebsc-1-s1.binance.org:8545/',\r\n      'https://data-seed-prebsc-2-s1.binance.org:8545/',\r\n      'https://data-seed-prebsc-1-s2.binance.org:8545/',\r\n      'https://data-seed-prebsc-2-s2.binance.org:8545/',\r\n      'https://data-seed-prebsc-1-s3.binance.org:8545/',\r\n    ],\r\n    chainId: '97',\r\n  },\r\n  {\r\n    provider_urls: ['https://http-testnet.hecochain.com'],\r\n    chainId: '256',\r\n  },\r\n];\r\n\r\nexport const getChainProviderUrlsConfig = (chainId) => {\r\n  const chainProviderUrls = [\r\n    {\r\n      provider_urls: [\r\n        'https://mainnet.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\r\n      ],\r\n      chainId: '1',\r\n    },\r\n    {\r\n      provider_urls: [\r\n        'https://bsc-dataseed.binance.org',\r\n        'https://bsc-dataseed1.defibit.io/',\r\n        'https://bsc-dataseed1.ninicoin.io/',\r\n      ],\r\n      chainId: '56',\r\n    },\r\n    {\r\n      provider_urls: ['https://http-mainnet.hecochain.com'],\r\n      chainId: '128',\r\n    },\r\n    {\r\n      provider_urls: [\r\n        'https://ropsten.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\r\n      ],\r\n      chainId: '3',\r\n    },\r\n    {\r\n      provider_urls: [\r\n        'https://kovan.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\r\n      ],\r\n      chainId: '42',\r\n    },\r\n    {\r\n      provider_urls: [\r\n        'https://data-seed-prebsc-1-s1.binance.org:8545/',\r\n        'https://data-seed-prebsc-1-s2.binance.org:8545/',\r\n        'https://data-seed-prebsc-1-s3.binance.org:8545/',\r\n        'https://data-seed-prebsc-2-s1.binance.org:8545/',\r\n        'https://data-seed-prebsc-2-s2.binance.org:8545/',\r\n        'https://data-seed-prebsc-2-s3.binance.org:8545/',\r\n      ],\r\n      chainId: '97',\r\n    },\r\n    {\r\n      provider_urls: ['https://http-testnet.hecochain.com'],\r\n      chainId: '256',\r\n    },\r\n  ];\r\n  \r\n  const res = chainProviderUrls.filter((i) => i.chainId  === chainId)\r\n  //console.log('res',res)\r\n  if (res.length > 0) {\r\n    return res[0].provider_urls\r\n  } else {\r\n    throw new Error(`getChainProviderUrlsConfig: no urls for chainId ${chainId}`)\r\n  }\r\n}\r\n","/** @module config */\r\n\r\n/**\r\n * Get the contract address list based on the deri environment variable\r\n * @method\r\n * @param {string} env='dev' - Deri environment variable: 'prod' or 'dev'\r\n * @returns {Object[]} response\r\n * @returns {string} response[].pool - pool address\r\n * @returns {string} response[].bToken - base token address\r\n * @returns {string} response[].pToken - position token address\r\n * @returns {string} response[].lToken - liquidity token address\r\n * @returns {string} response[].initialBlock - initial block of the pool\r\n * @returns {string} response[].bTokenSymbol - base token symbol\r\n * @returns {string} response[].symbol - symbol\r\n * @returns {string} response[].chainId - Id of the chain\r\n */\r\nexport const getContractAddressConfig = (env = 'dev') => {\r\n  // production environment\r\n  if (env === 'prod') {\r\n    // console.log('!!! production !!!')\r\n    return [\r\n      {\r\n        pool:   '0xAf081e1426f64e74117aD5F695D2A80482679DE5',\r\n        bToken: '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56',\r\n        pToken: '0x3c11c4990447F0AD575eBd74E8cD17bf61848A15',\r\n        lToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\r\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\r\n        MiningVault: '0x6C8d3F31b2ad1AE997Afa20EAd88cb67E93C6E17',\r\n        initialBlock: '7906919',\r\n        bTokenSymbol: 'BUSD',\r\n        symbol: 'BTCUSD',\r\n        unit: 'BTC',\r\n        chainId: '56',\r\n        version: 'v1',\r\n      },\r\n      {\r\n        pool:   '0x011346B81e5326904B5B76A11dECAf2c67eFFc23',\r\n        bToken: '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56',\r\n        pToken: '0xaE6429b4CDDDFefDB6ac702183c836B4e62Da410',\r\n        lToken: '0xd8f78c47b0e0943B3Cb2cE1e1726472C4ddd2F98',\r\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\r\n        MiningVault: '0x6C8d3F31b2ad1AE997Afa20EAd88cb67E93C6E17',\r\n        initialBlock: '6753399',\r\n        bTokenSymbol: 'BUSD',\r\n        symbol: 'COIN',\r\n        unit: 'COIN',\r\n        chainId: '56',\r\n        version: 'v1',\r\n      },\r\n      {\r\n        pool:   '0xD3f5E6D1a25dA1E64EDf7cb571f9fAD17FEb623c',\r\n        bToken: '0xe60eaf5A997DFAe83739e035b005A33AfdCc6df5',\r\n        pToken: '0x29Be63E854727BB3Fef77eB107B8d1c33081f989',\r\n        lToken: '0x610b39F9ba0fF2167AEb646462473c011A431Cd7',\r\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\r\n        MiningVault: '0x6C8d3F31b2ad1AE997Afa20EAd88cb67E93C6E17',\r\n        initialBlock: '8005906',\r\n        bTokenSymbol: 'DERI',\r\n        symbol: 'iMEME',\r\n        unit: 'iMEME',\r\n        chainId: '56',\r\n        version: 'v1',\r\n      },\r\n      {\r\n        pool:   '0x23779AAc1e74a65F27B4840A8E41F767Ce993118',\r\n        bToken: '0xdAC17F958D2ee523a2206206994597C13D831ec7',\r\n        pToken: '0x9c6134F9e759C6812aaC102FC1a9f7cA5615fD33',\r\n        lToken: '0x43CA6D7129d7F490d5B91B4D14D7c877D15A92dA',\r\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\r\n        MiningVault: '0x7826Ef8Da65494EA21D64D8E6A76AB1BED042FD8',\r\n        initialBlock: '11949433',\r\n        bTokenSymbol: 'USDT',\r\n        symbol: 'BTCUSD',\r\n        unit: 'BTC',\r\n        chainId: '1',\r\n        version: 'v1',\r\n      },\r\n      {\r\n        pool:   '0x96a1F15676746b9339DBc185F277618359Ac6346',\r\n        bToken: '0x3449FC1Cd036255BA1EB19d65fF4BA2b8903A69a',\r\n        pToken: '0x15aD9b67cf54037127fD986Ca3bB775f9FC4ad05',\r\n        lToken: '0xeC27d4c53C2E29F1113A9667c0B19442df83c1f1',\r\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\r\n        MiningVault: '0x7826Ef8Da65494EA21D64D8E6A76AB1BED042FD8',\r\n        initialBlock: '11860070',\r\n        bTokenSymbol: 'BAC',\r\n        symbol: 'BTCUSD',\r\n        unit: 'BTC',\r\n        chainId: '1',\r\n        version: 'v1',\r\n      },\r\n      {\r\n        pool:   '0xBA7e183042c8796E26A5a2375927DE7B1AB99d97',\r\n        bToken: '0x0298c2b32eaE4da002a15f36fdf7615BEa3DA047',\r\n        pToken: '0x732Ba556B304fd74Cd14b74ab8762A7D9f26d476',\r\n        lToken: '0x90fE976Cbb48E0761A84DDA2974024377994a997',\r\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\r\n        MiningVault: '0xF0bC8b772f26F8DeB46c1aebbEA7C8d502Abf3b8',\r\n        initialBlock: '2557914',\r\n        bTokenSymbol: 'HUSD',\r\n        symbol: 'BTCUSD',\r\n        unit: 'BTC',\r\n        chainId: '128',\r\n        version: 'v1',\r\n      },\r\n    ];\r\n  }\r\n  // develop environment\r\n  // console.log('-- test ---')\r\n  return [\r\n    {\r\n      pool: '0x372b640A00a0A6B73381e9363A39644a712cCc37',\r\n      bToken: '0x4038191eFb39Fe1d21a48E061F8F14cF4981A0aF',\r\n      pToken: '0xB9113758D771750e9E8ECb359A19689eC89AC1a5',\r\n      lToken: '0xC727a10Be4740441BE74960296097aF39D701980',\r\n      initialBlock: '9378545',\r\n      bTokenSymbol: 'BUSD',\r\n      symbol: 'BTCUSD',\r\n      unit: 'BTC',\r\n      chainId: '97',\r\n      version: 'v1',\r\n    },\r\n  ];\r\n};\r\n\r\n/**\r\n * Get the Slp contract address list based on the deri environment variable\r\n * @method\r\n * @param {string} env='dev' - Deri environment variable: 'prod' or 'dev'\r\n * @returns {Object[]} response\r\n * @returns {string} response[].pool - pool address\r\n * @returns {string} response[].bToken - base token address\r\n * @returns {string} response[].pToken - position token address\r\n * @returns {string} response[].lToken - liquidity token address\r\n * @returns {string} response[].initialBlock - initial block of the pool\r\n * @returns {string} response[].bTokenSymbol - base token symbol\r\n * @returns {string} response[].symbol - symbol\r\n * @returns {string} response[].chainId - Id of the chain\r\n */\r\nexport const getSlpContractAddressConfig = (env = 'dev') => {\r\n  if (env === 'prod') {\r\n    return [\r\n      {\r\n        pool: '0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd',\r\n        bToken: '0xA3DfbF2933FF3d96177bde4928D0F5840eE55600',\r\n        pToken: '0x0000000000000000000000000000000000000000',\r\n        lToken: '0x0000000000000000000000000000000000000000',\r\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\r\n        MiningVault: '0x7826Ef8Da65494EA21D64D8E6A76AB1BED042FD8',\r\n        chainId: '1',\r\n        bTokenSymbol: 'DERI-USDT SLP',\r\n        symbol: '--',\r\n      },\r\n    ];\r\n  }\r\n  console.log('getSlpContractAddressConfig(): no config for dev environment');\r\n  return [];\r\n};\r\n\r\n/**\r\n * Get the Clp contract address list based on the deri environment variable\r\n * @method\r\n * @param {string} env='dev' - Deri environment variable: 'prod' or 'dev'\r\n * @returns {Object[]} response\r\n * @returns {string} response[].pool - pool address\r\n * @returns {string} response[].bToken - base token address\r\n * @returns {string} response[].lToken - liquidity token address\r\n * @returns {string} response[].initialBlock - initial block of the pool\r\n * @returns {string} response[].bTokenSymbol - base token symbol\r\n * @returns {string} response[].chainId - Id of the chain\r\n */\r\nexport const getClpContractAddressConfig = (env = 'dev') => {\r\n  if (env === 'prod') {\r\n    return [\r\n      {\r\n        pool:   '0x4de2Ac273aD1BBe2F5C41f986d7b3cef8383Df98',\r\n        bToken: '0xDc7188AC11e124B1fA650b73BA88Bf615Ef15256',\r\n        pToken: '0x0000000000000000000000000000000000000000',\r\n        lToken: '0x83b31Abc899863B8Eb06952994580CE86414156E',\r\n        dToken: '0x0000000000000000000000000000000000000000',\r\n        MiningVault: '0x0000000000000000000000000000000000000000',\r\n        initialBlock: '6894880',\r\n        chainId: '56',\r\n        bTokenSymbol: 'CAKE-LP',\r\n        symbol: '--',\r\n      },\r\n    ];\r\n  } else {\r\n    return [\r\n    ];\r\n  }\r\n};\r\nexport const getClp2ContractAddressConfig = (env = 'dev') => {\r\n  if (env === 'prod') {\r\n    return [\r\n      {\r\n        pool:   '0x73feaa1eE314F8c655E354234017bE2193C9E24E',\r\n        bToken: '0xDc7188AC11e124B1fA650b73BA88Bf615Ef15256',\r\n        pToken: '0x0000000000000000000000000000000000000000',\r\n        lToken: '0x0000000000000000000000000000000000000000',\r\n        dToken: '0x0000000000000000000000000000000000000000',\r\n        MiningVault: '0x0000000000000000000000000000000000000000',\r\n        initialBlock: '699498',\r\n        chainId: '56',\r\n        bTokenSymbol: 'CAKE-LP SYRUP',\r\n        symbol: '--',\r\n      }\r\n    ]\r\n  } else {\r\n    return []\r\n  }\r\n}\r\n\r\nexport const getLpContractAddressConfig = (env = 'dev') => {\r\n  if (env === 'prod') {\r\n    return [\r\n      {\r\n        pool:   '0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd',\r\n        bToken: '0xA3DfbF2933FF3d96177bde4928D0F5840eE55600',\r\n        pToken: '0x0000000000000000000000000000000000000000',\r\n        lToken: '0x0000000000000000000000000000000000000000',\r\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\r\n        MiningVault: '0x7826Ef8Da65494EA21D64D8E6A76AB1BED042FD8',\r\n        chainId: '1',\r\n        bTokenSymbol: 'DERI-USDT SLP',\r\n        symbol: '--',\r\n        type: 'slp',\r\n      },\r\n      {\r\n        pool:   '0x4de2Ac273aD1BBe2F5C41f986d7b3cef8383Df98',\r\n        bToken: '0xDc7188AC11e124B1fA650b73BA88Bf615Ef15256',\r\n        pToken: '0x0000000000000000000000000000000000000000',\r\n        lToken: '0x83b31Abc899863B8Eb06952994580CE86414156E',\r\n        dToken: '0x0000000000000000000000000000000000000000',\r\n        MiningVault: '0x0000000000000000000000000000000000000000',\r\n        initialBlock: '6894880',\r\n        chainId: '56',\r\n        bTokenSymbol: 'CAKE-LP',\r\n        symbol: '--',\r\n        type: 'clp',\r\n      },\r\n      {\r\n        pool:   '0x73feaa1eE314F8c655E354234017bE2193C9E24E',\r\n        bToken: '0xDc7188AC11e124B1fA650b73BA88Bf615Ef15256',\r\n        pToken: '0x0000000000000000000000000000000000000000',\r\n        lToken: '0x0000000000000000000000000000000000000000',\r\n        dToken: '0x0000000000000000000000000000000000000000',\r\n        MiningVault: '0x0000000000000000000000000000000000000000',\r\n        initialBlock: '699498',\r\n        chainId: '56',\r\n        bTokenSymbol: 'CAKE-LP SYRUP',\r\n        symbol: '--',\r\n        type: 'clp2',\r\n      },\r\n    ];\r\n  } else {\r\n    return [\r\n    ];\r\n  }\r\n};\r\n\r\nexport const getMiningVaultRouterContractAddress= (chainId) => {\r\n  const configs = [\r\n      {\r\n        MiningVaultRouter: '0x8d5613451Dc0592388f98d7Ab1ce5A732561936e',\r\n        chainId: '56'\r\n      }\r\n    ]\r\n  const filteredConfig = configs.filter((i) => i.chainId === chainId)\r\n  if (filteredConfig.length > 0) {\r\n    return filteredConfig[0].MiningVaultRouter\r\n  } else {\r\n    throw new Error(`getMiningVaultRouterAddressConfig: no address for chainId ${chainId}`)\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Get the Deri contract address list based on the deri environment variable\r\n * @method\r\n * @param {string} env='dev' - Deri environment variable: 'prod' or 'dev'\r\n * @returns {Object[]} response\r\n * @returns {string} response[].Deri - deri address\r\n * @returns {string} response[].Wormhole - wormhole token address\r\n * @returns {string} response[].bTokenSymbol - base token symbol\r\n * @returns {string} response[].chainId - Id of the chain\r\n */\r\nexport const getDeriContractAddressConfig = (env = 'dev') => {\r\n  if (env === 'prod') {\r\n    return [\r\n      {\r\n        Deri: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\r\n        Wormhole: '0x6874640cC849153Cb3402D193C33c416972159Ce',\r\n        bTokenSymbol: 'DERI',\r\n        chainId: '1',\r\n      },\r\n      {\r\n        Deri: '0xe60eaf5A997DFAe83739e035b005A33AfdCc6df5',\r\n        Wormhole: '0x15a5969060228031266c64274a54e02Fbd924AbF',\r\n        bTokenSymbol: 'DERI',\r\n        chainId: '56',\r\n      },\r\n      {\r\n        Deri: '0x2bdA3e331Cf735D9420e41567ab843441980C4B8',\r\n        Wormhole: '0x134A04497e9a0b1F8850fEaf87eD18ec348dDa46',\r\n        bTokenSymbol: 'DERI',\r\n        chainId: '128',\r\n      },\r\n    ];\r\n  }\r\n  return [\r\n    {\r\n      Deri: '0x88Fe79a3b6AC7EeF3d55B2e388fa18400590698B',\r\n      Wormhole: '0xcb28Fa7dFa1844Cdb47aD5f03484f6131293Fd2e',\r\n      bTokenSymbol: 'DERI',\r\n      chainId: '3',\r\n    },\r\n    {\r\n      Deri: '0x8dC0aA48bbc69BaCD2548c6b7adCDeF8DDbA50B2',\r\n      Wormhole: '0x9028e43114Df57C97c15355224E575DF1e244919',\r\n      bTokenSymbol: 'DERI',\r\n      chainId: '97',\r\n    },\r\n    {\r\n      Deri: '0x932458a637F8060AF747167656651b64d4c36620',\r\n      Wormhole: '0x629B0D3D32BE5ee5F7BF3845914d26446c04165d',\r\n      bTokenSymbol: 'DERI',\r\n      chainId: '256',\r\n    },\r\n  ];\r\n};\r\n\r\nexport const getAnnualBlockNumberConfig = () => ({\r\n  1: '2367422',\r\n  56: '10497304',\r\n  128: '10511369',\r\n  3: '2367422',\r\n  97: '10497304',\r\n  256: '10511369',\r\n});\r\n","/**\r\n * Get REST server config\r\n * @param {string} env='dev' - Deri environment variable: 'prod' or 'dev'\r\n * @returns {string} server url\r\n */\r\nexport const getRestServerConfig = (env = 'dev') => {\r\n  if (env === 'prod' || env === 'production') {\r\n    // for production\r\n    return 'https://api.deri.finance';\r\n    //return 'https://alphaapi.deri.finance';\r\n  } else {\r\n    // for test\r\n    return 'https://apitest.deri.finance';\r\n    //return 'http://localhost:8082';\r\n    //return 'https://alphaapitest.deri.finance';\r\n  }\r\n};\r\n\r\nexport const getRedisWorkerQueneConfig = (env = \"dev\") => {\r\n  if (env === \"prod\") {\r\n    return ['trade_tx_quene', 'trade_worker_group']\r\n  } else {\r\n    return ['trade_tx_quene_dev', 'trade_worker_group_dev']\r\n  }\r\n};\r\n","import Web3 from 'web3';\r\nimport BigNumber from 'bignumber.js';\r\nimport {\r\n  DeriEnv,\r\n  getChainProviderUrlsConfig,\r\n  getContractAddressConfig,\r\n  getSlpContractAddressConfig,\r\n  getClpContractAddressConfig,\r\n  getClp2ContractAddressConfig,\r\n  getLpContractAddressConfig,\r\n  getAnnualBlockNumberConfig,\r\n  getDeriContractAddressConfig,\r\n} from './config';\r\n\r\n/** @module utils */\r\n\r\nBigNumber.config({\r\n  DECIMAL_PLACES: 18,\r\n  ROUNDING_MODE: BigNumber.ROUND_DOWN,\r\n  EXPONENTIAL_AT: 256,\r\n});\r\n\r\nexport { BigNumber };\r\n\r\n/**\r\n * Change the value to BigNumber type\r\n * @func\r\n * @param {string|number} value - the number that need to changed to BigNumber type\r\n * @param {string} base - base of the number\r\n * @returns {BigNumber}\r\n */\r\nexport const bg = (value, base = 0) => {\r\n  if (base === 0) {\r\n    return BigNumber(value);\r\n  }\r\n  if (base > 0) {\r\n    return BigNumber(value).times(BigNumber(`1${'0'.repeat(base)}`));\r\n  }\r\n  return BigNumber(value).div(BigNumber(`1${'0'.repeat(-base)}`));\r\n};\r\n\r\n/**\r\n * Get the max value\r\n * @func\r\n * @param {BigNumber} value1\r\n * @param {BigNumber} value2\r\n * @returns {BigNumber}\r\n */\r\nexport const max = (value1, value2) => {\r\n  if (value1.gte(value2)) {\r\n    return value1;\r\n  }\r\n  return value2;\r\n};\r\n\r\n/**\r\n * Get the min value\r\n * @func\r\n * @param {BigNumber} value1\r\n * @param {BigNumber} value2\r\n * @returns {BigNumber}\r\n */\r\nexport const min = (value1, value2) => {\r\n  if (value1.lte(value2)) {\r\n    return value1;\r\n  }\r\n  return value2;\r\n};\r\n\r\n/**\r\n * Convert the number to a fixed precision\r\n * @func\r\n * @param {string} value - the number that need to convert\r\n * @param {number} num - the number for method toFixed()\r\n * @returns {string}\r\n */\r\nexport const toNatural = (value, num = 0) =>\r\n  BigNumber(value).toFixed(num).toString();\r\n\r\nexport const toHex = (value) => Web3.utils.toHex(value);\r\n\r\nexport const toChecksumAddress = (value) => Web3.utils.toChecksumAddress(value);\r\n\r\nexport const hexToString = (value) => Web3.utils.hexToUtf8(value);\r\n\r\nexport const hexToNumber = (value) => Web3.utils.hexToNumber(value);\r\n\r\nexport const hexToNumberString = (value) => Web3.utils.hexToNumberString(value);\r\n\r\nexport const hexToDeri = (value) => bg(hexToNumberString(value));\r\n\r\nexport const hexToNatural = (value) => bg(hexToNumberString(value), -18);\r\n\r\nexport const hexToNaturalWithPercentage = (value) =>\r\n  `${bg(hexToNumberString(value), -18)\r\n    .sd(4)\r\n    .times(100)\r\n    .toFixed(4)\r\n    .toString()}%`;\r\n\r\nexport const naturalToDeri = (value) => bg(value, 18).toFixed(0);\r\n\r\nexport const naturalWithPercentage = (value) =>\r\n  `${bg(value).sd(4).times(100).toFixed(4).toString()}%`;\r\n\r\nexport const deriToNatural = (value) => bg(value, -18);\r\n\r\nexport const deriToNaturalWithPercentage = (value) =>\r\n  `${bg(value, -18).sd(4).times(100).toFixed(4).toString()}%`;\r\n\r\nexport const deriToString = (value) => bg(value).toString();\r\n\r\nexport const deriToBool = (value) => {\r\n  if (bg(value).toNumber() === 1) {\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\nexport const hasInvalidArgsValue = (...args) =>\r\n  args.some(\r\n    (i) =>\r\n      // console.log(bg(i))\r\n      isNaN(i.toString()) || i.toString() === '0'\r\n  );\r\n\r\n// language\r\nexport const isObject = (obj) => typeof obj === 'object';\r\n\r\n//const np = () => {}\r\n//const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms))\r\n\r\n// fetchWithTimeout\r\n// const fetchWithTimeout = (url, delay=2000, options={}, onTimeout=np) => {\r\n//   const timer = new Promise((resolve) => {\r\n//     setTimeout(resolve, delay, {\r\n//       timeout: true,\r\n//     });\r\n//   });\r\n//   return Promise.race([fetch(url, options), timer]).then((response) => {\r\n//     if (response.timeout) {\r\n//       onTimeout();\r\n//     }\r\n//     return response;\r\n//   });\r\n// };\r\n\r\n// http\r\nexport const checkHttpServerIsAlive = async (url) => {\r\n  try {\r\n    //const response = await fetch(url);\r\n    const response = await fetch(url);\r\n    if (response.ok) {\r\n      return true;\r\n    }\r\n  } catch (err) {\r\n    //console.log(err);\r\n  }\r\n  return false;\r\n};\r\nexport const getAliveHttpServer = async (urls = []) => {\r\n  for (let i = 0; i < urls.length; i++) {\r\n    const url = urls[i];\r\n    if (await checkHttpServerIsAlive(url)) {\r\n      return url;\r\n    }\r\n  }\r\n  throw new Error('No alive http server in urls', urls);\r\n};\r\n\r\n// ethereum chain\r\nexport const MAX_VALUE =\r\n  '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff';\r\nexport const getNetworkName = (chainId) => {\r\n  chainId = normalizeChainId(chainId);\r\n  let poolNetwork;\r\n  switch (chainId) {\r\n    case '1':\r\n      poolNetwork = 'ethereum';\r\n      break;\r\n    case '56':\r\n      poolNetwork = 'bsc';\r\n      break;\r\n    case '128':\r\n      poolNetwork = 'heco';\r\n      break;\r\n    case '3':\r\n      poolNetwork = 'ropsten';\r\n      break;\r\n    case '42':\r\n      poolNetwork = 'kovan';\r\n      break;\r\n    case '97':\r\n      poolNetwork = 'bsctestnet';\r\n      break;\r\n    case '256':\r\n      poolNetwork = 'hecotestnet';\r\n      break;\r\n    default:\r\n      throw new Error('The networkId is not valid');\r\n  }\r\n  return poolNetwork;\r\n};\r\n\r\nexport const getWalletBalanceUnit = (chainId) => {\r\n  chainId = normalizeChainId(chainId);\r\n  let index;\r\n  const unitNetworkIdsMap = {\r\n    ETH: ['1', '3', '42'],\r\n    BNB: ['56', '97'],\r\n    HT: ['128', '256'],\r\n  };\r\n  const networkIdsArray = Object.values(unitNetworkIdsMap);\r\n  for (let i = 0; i < networkIdsArray.length; i++) {\r\n    if (networkIdsArray[i].includes(chainId)) {\r\n      index = i;\r\n      break;\r\n    }\r\n  }\r\n  if (index !== undefined) {\r\n    return Object.keys(unitNetworkIdsMap)[index];\r\n  }\r\n  if (chainId === '') {\r\n    return '';\r\n  }\r\n  throw new Error('Invalid Network:', chainId);\r\n};\r\n\r\nexport const getPoolBaseSymbolList = (chainId) => {\r\n  chainId = normalizeChainId(chainId);\r\n  let result = [];\r\n  const pools = getContractAddressConfig(DeriEnv.get()).filter(\r\n    (c) => c.chainId === chainId\r\n  );\r\n  for (let i = 0; i < pools.length; i++) {\r\n    const { bTokenSymbol, symbol } = pools[i];\r\n    if (bTokenSymbol && symbol) {\r\n      result.push(`${symbol}/${bTokenSymbol}`);\r\n    }\r\n  }\r\n  return result;\r\n};\r\n\r\nexport const getPoolBaseTokenAddressObject = (chainId) => {\r\n  chainId = normalizeChainId(chainId);\r\n  let result = {};\r\n  const pools = getContractAddressConfig(DeriEnv.get()).filter(\r\n    (c) => c.chainId === chainId\r\n  );\r\n  for (let i = 0; i < pools.length; i++) {\r\n    const { bTokenSymbol, symbol, pool } = pools[i];\r\n    const key = `${symbol}/${bTokenSymbol}`;\r\n    if (bTokenSymbol && symbol) {\r\n      result[key] = pool;\r\n    }\r\n  }\r\n  return result;\r\n};\r\n\r\n// export const getPoolContractAddress = (chainId, bTokenSymbol) => {\r\n//   chainId = normalizeChainId(chainId);\r\n//   const pools = getContractAddressConfig(DeriEnv.get()).filter(\r\n//     (c) => c.chainId === chainId\r\n//   );\r\n//   const pool = pools.filter((p) => p.bTokenSymbol === bTokenSymbol);\r\n//   if (pool.length > 0) {\r\n//     return [\r\n//       pool[0].pool,\r\n//       pool[0].bToken,\r\n//       pool[0].pToken,\r\n//       pool[0].lToken,\r\n//       pool[0].dToken,\r\n//       pool[0].MiningVault,\r\n//       pool[0].initialBlock,\r\n//     ];\r\n//   }\r\n//   console.log(\r\n//     `getPoolContractAddress(): contract address is not found: ${chainId} ${bTokenSymbol}`\r\n//   );\r\n//   return [];\r\n// };\r\n\r\n// get config by poolAddress\r\nexport const getPoolContractAddress = (chainId, poolAddress) => {\r\n  chainId = normalizeChainId(chainId);\r\n  const pools = getContractAddressConfig(DeriEnv.get()).filter(\r\n    (c) => c.chainId === chainId\r\n  );\r\n  const pool = pools.filter((p) => p.pool === poolAddress);\r\n  // console.log('pool', pool)\r\n  if (pool.length > 0) {\r\n    return {\r\n      poolAddress: pool[0].pool,\r\n      bTokenAddress: pool[0].bToken,\r\n      pTokenAddress: pool[0].pToken,\r\n      lTokenAddress: pool[0].lToken,\r\n      dTokenAdress: pool[0].dToken,\r\n      MinningVaultAddress: pool[0].MiningVault,\r\n      bTokenSymbol: pool[0].bTokenSymbol,\r\n      symbol: pool[0].symbol,\r\n      unit: pool[0].unit,\r\n      initialBlock: pool[0].initialBlock,\r\n    };\r\n  }\r\n  // console.log(\r\n  //   `getPoolContractAddress(): contract address is not found: ${chainId} ${poolAddress}`\r\n  // );\r\n  return [];\r\n};\r\n\r\nexport const getMiningVaultContractAddress = (chainId) => {\r\n  chainId = normalizeChainId(chainId);\r\n  const pools = getContractAddressConfig(DeriEnv.get()).filter(\r\n    (c) => c.chainId === chainId\r\n  );\r\n  if (pools.length > 0) {\r\n    if (pools[0].MiningVault) {\r\n      return pools[0].MiningVault;\r\n    }\r\n  }\r\n};\r\n\r\n// export const getMiningVaultRouterContractAddress = (chainId) => {\r\n//   chainId = normalizeChainId(chainId);\r\n//   const pools = getContractAddressConfig(DeriEnv.get()).filter(\r\n//     (c) => c.chainId === chainId\r\n//   );\r\n//   if (pools.length > 0) {\r\n//     if (pools[0].MiningVaultRouter) {\r\n//       return pools[0].MiningVaultRouter;\r\n//     }\r\n//   }\r\n// };\r\n\r\nexport const getAnnualBlockNumber = (chainId) => {\r\n  const blockNumbers = getAnnualBlockNumberConfig();\r\n  if (blockNumbers[chainId]) {\r\n    return parseInt(blockNumbers[chainId]);\r\n  }\r\n  console.log(`cannot find the annual block number with chainId: ${chainId}`);\r\n};\r\n\r\nexport const getSlpContractAddress = (chainId, poolAddress) => {\r\n  chainId = normalizeChainId(chainId);\r\n  const pools = getSlpContractAddressConfig(DeriEnv.get()).filter(\r\n    (c) => c.chainId === chainId\r\n  );\r\n  const pool = pools.filter((p) => p.pool === poolAddress);\r\n  if (pool.length > 0) {\r\n    return {\r\n      poolAddress: pool[0].pool,\r\n      bTokenAddress: pool[0].bToken,\r\n      pTokenAddress: pool[0].pToken,\r\n      lTokenAddress: pool[0].lToken,\r\n      dTokenAdress: pool[0].dToken,\r\n      MinningVaultAddress: pool[0].MiningVault,\r\n    };\r\n  }\r\n  console.log(\r\n    `getSlpContractAddress(): contract address is not found: ${chainId} ${poolAddress}`\r\n  );\r\n  return {};\r\n};\r\n\r\nexport const getClp2ContractAddress = (chainId, poolAddress) => {\r\n  chainId = normalizeChainId(chainId);\r\n  const pools = getClp2ContractAddressConfig(DeriEnv.get()).filter(\r\n    (c) => c.chainId === chainId\r\n  );\r\n  const pool = pools.filter((p) => p.pool === poolAddress);\r\n  if (pool.length > 0) {\r\n    return {\r\n      poolAddress: pool[0].pool,\r\n      bTokenAddress: pool[0].bToken,\r\n      pTokenAddress: pool[0].pToken,\r\n      lTokenAddress: pool[0].lToken,\r\n      dTokenAdress: pool[0].dToken,\r\n      MinningVaultAddress: pool[0].MiningVault,\r\n    };\r\n  }\r\n  console.log(\r\n    `getClp2ContractAddress(): contract address is not found: ${chainId} ${poolAddress}`\r\n  );\r\n  return {};\r\n};\r\n\r\nexport const getClpContractAddress = (chainId, poolAddress) => {\r\n  chainId = normalizeChainId(chainId);\r\n  const pools = getClpContractAddressConfig(DeriEnv.get()).filter(\r\n    (c) => c.chainId === chainId\r\n  );\r\n  const pool = pools.filter((p) => p.pool === poolAddress);\r\n  if (pool.length > 0) {\r\n    return {\r\n      poolAddress: pool[0].pool,\r\n      bTokenAddress: pool[0].bToken,\r\n      lTokenAddress: pool[0].lToken,\r\n    };\r\n  }\r\n  console.log(\r\n    `getClpContractAddress(): contract address is not found: ${chainId} ${poolAddress}`\r\n  );\r\n  return {};\r\n};\r\n\r\nexport const getLpContractAddress = (chainId, poolAddress) => {\r\n  chainId = normalizeChainId(chainId);\r\n  const pools = getLpContractAddressConfig(DeriEnv.get()).filter(\r\n    (c) => c.chainId === chainId\r\n  );\r\n  const pool = pools.filter((p) => p.pool === poolAddress);\r\n  if (pool.length > 0) {\r\n    return {\r\n      poolAddress: pool[0].pool,\r\n      bTokenAddress: pool[0].bToken,\r\n      lTokenAddress: pool[0].lToken,\r\n      type: pool[0].type,\r\n    };\r\n  }\r\n  console.log(\r\n    `getLpContractAddress(): contract address is not found: ${chainId} ${poolAddress}`\r\n  );\r\n  return {};\r\n};\r\n\r\nexport const getDeriContractAddress = (chainId) => {\r\n  chainId = normalizeChainId(chainId);\r\n  const pool = getDeriContractAddressConfig(DeriEnv.get()).filter(\r\n    (c) => c.chainId === chainId\r\n  );\r\n  if (pool.length > 0) {\r\n    return {\r\n      deriAddress: pool[0].Deri,\r\n      wormholeAddress: pool[0].Wormhole,\r\n      bTokenSymbol: pool[0].bTokenSymbol,\r\n    };\r\n  }\r\n  console.log(\r\n    `getDeriContractAddress(): contract address is not found: ${chainId}`\r\n  );\r\n  return {};\r\n};\r\n\r\nexport const getOracleUrl = (chainId, poolAddress) => {\r\n  const env = DeriEnv.get()\r\n  const { symbol } = getPoolContractAddress(chainId, poolAddress);\r\n  const addSymbolParam = (url, symbol='BTCUSD') => `${url}?symbol=${symbol}`;\r\n  if (env === 'prod' || env === 'production') {\r\n    // for production\r\n    if (symbol) {\r\n      return addSymbolParam('https://oracle4.deri.finance/price', symbol);\r\n    }\r\n    return 'https://oracle4.deri.finance/price';\r\n  } else {\r\n    if (symbol) {\r\n      return addSymbolParam('https://oracle2.deri.finance/price', symbol);\r\n    }\r\n    // for test\r\n    return 'https://oracle2.deri.finance/price';\r\n  }\r\n};\r\n\r\nexport const getOracleInfo = async (chainId, poolAddress) => {\r\n  let url = getOracleUrl(chainId, poolAddress);\r\n  //console.log('oracle url', url);\r\n  let retry = 2;\r\n  //let timeout = 1000;\r\n  let res;\r\n  while (retry > 0) {\r\n    res = await fetch(url, { mode: 'cors', cache: 'no-cache' });\r\n    //if (res && !res.timeout) {\r\n    if (res.ok) {\r\n      break;\r\n    }\r\n    //console.log('get oracle info timeout')\r\n    retry -= 1;\r\n    //timeout += 800;\r\n  }\r\n  if (retry === 0 && !res) {\r\n    throw new Error(`fetch oracle info error: exceed max retry(2).`);\r\n  }\r\n  return await res.json();\r\n};\r\n\r\nexport const getBTCUSDPrice = async (chainId, poolAddress) => {\r\n  const responseJson = await getOracleInfo(chainId, poolAddress);\r\n  let price = responseJson.price;\r\n  if (!price) {\r\n    price = '0';\r\n  }\r\n  return deriToNatural(responseJson.price).toString();\r\n};\r\nexport const getOraclePrice = getBTCUSDPrice;\r\n\r\nexport const getChainProviderUrl = async(chainId) => {\r\n  chainId = normalizeChainId(chainId);\r\n  const urls = getChainProviderUrlsConfig(chainId)\r\n  if (urls.length > 0) {\r\n    return await getAliveHttpServer(urls)\r\n  } else {\r\n    throw new Error(\r\n      `Cannot find the chain provider url with chainId: ${chainId}`\r\n    );\r\n  }\r\n};\r\n\r\nexport const format = (bigNumber) =>\r\n  bigNumber.toFormat().replaceAll(',', '').toString();\r\n\r\nexport const normalizeChainId = (chainId) => {\r\n  const chainIds = ['1', '56', '128', '3', '42', '97', '256']\r\n  let res = chainId ? chainId.toString() : chainId;\r\n  if (chainId && chainIds.includes(res)) {\r\n    return res;\r\n  } else {\r\n    throw new Error(`invalid chainId: ${chainId}`)\r\n  }\r\n};\r\n\r\nexport const normalizeAddress = (address) => {\r\n  if (address && typeof address === 'string' && address.startsWith('0x')) {\r\n    return Web3.utils.toChecksumAddress(address);\r\n  } else {\r\n    throw new Error(`invalid address: ${address}`)\r\n  }\r\n};","export {\r\n  DeriEnv,\r\n  //getContractAddressConfig,\r\n  getLpContractAddressConfig,\r\n  getSlpContractAddressConfig,\r\n} from './config';\r\nexport * from './utils';\r\nexport * from './calculation';\r\n\r\nexport * from './api/apiGlobals';\r\nexport * from './api/factoryApi';\r\nexport * from './api/walletApi';\r\nexport {\r\n  // isUnlocked,\r\n  // getEstimatedMargin,\r\n  // getEstimatedFee,\r\n  // getEstimatedFundingRate,\r\n  // getEstimatedLiquidityUsed,\r\n  isDeriUnlocked,\r\n  getUserWormholeSignature,\r\n  // getFundingRate,\r\n  //getPositionInfo,\r\n} from './api/contractQueryApi';\r\nexport {\r\n  //unlock,\r\n  //depositMargin,\r\n  //withdrawMargin,\r\n  //addLiquidity,\r\n  //removeLiquidity,\r\n  //tradeWithMargin,\r\n  //closePosition,\r\n  mint,\r\n  mintDToken,\r\n  freeze,\r\n  mintDeri,\r\n  unlockDeri,\r\n  mintAirdrop,\r\n} from './api/contractTransactionApi';\r\nexport {\r\n  getUserInfo,\r\n  getUserInfoHarvest,\r\n  getUserInfoTotal,\r\n  getUserInfoAll,\r\n  //getPoolInfoApy,\r\n  getLpPoolInfoApy,\r\n  getUserInfoInPool,\r\n  getUserInfoAllForAirDrop,\r\n} from './api/databaseApi';\r\n\r\n// export * from './api/slpPoolApi';\r\n// export * from './api/clpPoolApi';\r\n\r\n// export * from './api/tradeHistoryApi';\r\nexport {\r\n//getSpecification2 as getSpecification,\r\n// getPositionInfo2 as getPositionInfo,\r\n//getLiquidityInfo2 as getLiquidityInfo,\r\n//getWalletBalance2 as getWalletBalance,\r\n//getFundingRate2 as getFundingRate,\r\n//getLiquidityUsed2 as getLiquidityUsed,\r\ngetFundingRateCache2 as getFundingRateCache,\r\ngetSlpLiquidityInfo2 as getSlpLiquidityInfo,\r\ngetSlpWalletBalance2 as getSlpWalletBalance,\r\ngetClpLiquidityInfo2 as getClpLiquidityInfo,\r\ngetClpWalletBalance2 as getClpWalletBalance,\r\ngetDeriBalance2 as getDeriBalance,\r\n//getTradeHistory2 as getTradeHistory,\r\n} from './api/restApi';\r\n\r\n// export {\r\n  //tradeWithMargin2 as tradeWithMargin,\r\n  //closePosition2 as closePosition,\r\n  //depositMargin2 as depositMargin,\r\n  //withdrawMargin2 as withdrawMargin,\r\n  //addLiquidity2 as addLiquidity,\r\n  //removeLiquidity2 as removeLiquidity,\r\n// } from './api/contractTransactionApiV2'\r\n\r\nexport * from './api/lpPoolApi';\r\n\r\nexport * from './api_wrapper';\r\n\r\nexport {\r\n  getPoolConfigList,\r\n  getFilteredPoolConfigList,\r\n  getPoolBTokensBySymbolId,\r\n} from './v2';\r\n","import Web3 from 'web3';\r\nimport BigNumber from 'bignumber.js';\r\n\r\n// == bg\r\nBigNumber.config({\r\n  DECIMAL_PLACES: 18,\r\n  ROUNDING_MODE: BigNumber.ROUND_DOWN,\r\n  EXPONENTIAL_AT: 256,\r\n});\r\n\r\nexport const bg = (value, base = 0) => {\r\n  if (base === 0) {\r\n    return BigNumber(value);\r\n  }\r\n  if (base > 0) {\r\n    return BigNumber(value).times(BigNumber(`1${'0'.repeat(base)}`));\r\n  }\r\n  return BigNumber(value).div(BigNumber(`1${'0'.repeat(-base)}`));\r\n};\r\n\r\nexport const max = (value1, value2) => {\r\n  if (value1.gte(value2)) {\r\n    return value1;\r\n  }\r\n  return value2;\r\n};\r\n\r\nexport const min = (value1, value2) => {\r\n  if (value1.lte(value2)) {\r\n    return value1;\r\n  }\r\n  return value2;\r\n};\r\n\r\nexport const fromWei = (value, unit='ether') => Web3.utils.fromWei(value, unit)\r\n\r\nexport const toWei = (value, unit='ether') => Web3.utils.toWei(value, unit)\r\n\r\nexport const toNatural = (value, num = 0) => BigNumber(value).toFixed(num).toString();\r\n\r\nexport const toHex = (value) => Web3.utils.toHex(value);\r\n\r\nexport const toChecksumAddress = (value) => Web3.utils.toChecksumAddress(value);\r\n\r\nexport const hexToString = (value) => Web3.utils.hexToUtf8(value);\r\n\r\nexport const hexToNumber = (value) => Web3.utils.hexToNumber(value);\r\n\r\nexport const hexToNumberString = (value) => Web3.utils.hexToNumberString(value);\r\n\r\nexport const hexToDeri = (value) => bg(hexToNumberString(value));\r\n\r\nexport const hexToNatural = (value) => bg(hexToNumberString(value), -18);\r\n\r\nexport const deriToNatural = (value) => bg(value, -18);\r\n\r\nexport const naturalToDeri = (value) => bg(value, 18).toFixed(0);\r\n\r\n// == convert\r\nexport const numberToHex = (value) => Web3.utils.numberToHex(value);","// == func\r\n// const np = () => {}\r\n// const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms))\r\n\r\nexport const fetchWithTimeout = (url, options = {}) => {\r\n  const { timeout = 1200, ...fetchOptions } = options\r\n\r\n  return Promise.race([\r\n    fetch(url, fetchOptions),\r\n    new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        // reject(\r\n        //   new Error(\r\n        //     `Request for ${url} timed out after ${timeout} ms`,\r\n        //   ),\r\n        // )\r\n        resolve({timeout:true})\r\n      }, timeout)\r\n    }),\r\n  ])\r\n}\r\n\r\nexport const checkHttpServerIsAlive = async (url) => {\r\n  try {\r\n    const response = await fetch(url);\r\n    if (response.ok) {\r\n      return true;\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n  return false;\r\n};\r\n\r\nexport const getAliveHttpServer = async (urls = []) => {\r\n  for (let i = 0; i < urls.length; i++) {\r\n    const url = urls[i];\r\n    //console.log(url)\r\n    if (await checkHttpServerIsAlive(url)) {\r\n      return url;\r\n    }\r\n  }\r\n  throw new Error('No alive http server in urls', urls);\r\n};\r\n","import Web3 from 'web3';\r\n\r\n// validate\r\nexport const normalizeChainId = (chainId) => {\r\n  const chainIds = ['1', '56', '128', '3', '42', '97', '256'];\r\n  let res = chainId ? chainId.toString() : chainId;\r\n  if (chainId && chainIds.includes(res)) {\r\n    return res;\r\n  } else {\r\n    throw new Error(`invalid chainId: ${chainId}`);\r\n  }\r\n};\r\n\r\nexport const normalizeAddress = (address) => {\r\n  if (address && typeof address === 'string' && address.startsWith('0x')) {\r\n    return Web3.utils.toChecksumAddress(address);\r\n  } else {\r\n    throw new Error(`invalid address: ${address}`);\r\n  }\r\n};\r\n\r\nexport const validateArgs = (...args) => args.every((i) => !isNaN(parseFloat(i)));","import {\r\n  getChainProviderUrls,\r\n  getAnnualBlockNumberConfig,\r\n} from '../config';\r\nimport { normalizeChainId } from './validate';\r\nimport { getAliveHttpServer } from './network';\r\n\r\nexport const getChainProviderUrl = async (chainId) => {\r\n  chainId = normalizeChainId(chainId);\r\n  const urls = getChainProviderUrls(chainId);\r\n  if (urls.length > 0) {\r\n    return await getAliveHttpServer(urls);\r\n  } else {\r\n    throw new Error(\r\n      `Cannot find the chain provider url with chainId: ${chainId}`\r\n    );\r\n  }\r\n};\r\nexport const getAnnualBlockNumber = (chainId) => {\r\n  const blockNumbers = getAnnualBlockNumberConfig();\r\n  if (blockNumbers[chainId]) {\r\n    return parseInt(blockNumbers[chainId]);\r\n  } else {\r\n    throw new Error(`Invalid annual block number with chainId: ${chainId}`);\r\n  }\r\n};\r\n","import { metaMaskWeb3, web3Factory } from '../factory';\r\nimport { numberToHex } from '../utils';\r\n\r\nconst MAX_GAS_AMOUNT = 832731;\r\n\r\nexport class ContractBase {\r\n  constructor(chainId, contractAddress, useInfura) {\r\n    this.chainId = chainId;\r\n    this.contractAddress = contractAddress;\r\n    this.useInfura = useInfura\r\n  }\r\n\r\n  async _init() {\r\n    if (this.useInfura) {\r\n      this.web3 = await web3Factory.getOrSet(this.chainId);\r\n    } else {\r\n      this.web3 = metaMaskWeb3();\r\n    }\r\n  }\r\n\r\n  async _call(method, args = []) {\r\n    let res\r\n    let retry = 2\r\n    while (retry > 0) {\r\n      try {\r\n        await this._init()\r\n        res = await this.contract.methods[method](...args).call();\r\n        break\r\n      } catch(err) {\r\n        retry -= 1\r\n        this.web3 = null\r\n        console.log(err)\r\n      }\r\n    }\r\n    if (retry === 0 && !res) {\r\n      console.log(`method call '${method} ${args}' failed with max retry 3.`)\r\n    }\r\n    return res\r\n  }\r\n\r\n  async _estimatedGas(method, args = [], accountAddress) {\r\n    await this._init()\r\n    let gas = 0;\r\n    for (let i = 0; i < 2; i++) {\r\n      try {\r\n        gas = await this.contract.methods[method](...args).estimateGas({\r\n          from: accountAddress,\r\n        });\r\n        gas = parseInt(gas * 1.25);\r\n        break;\r\n      } catch (error) {\r\n        // ignore the metamask error\r\n      }\r\n    }\r\n    if (gas == 0 || gas > 10000000) gas = MAX_GAS_AMOUNT;\r\n    return gas;\r\n  }\r\n\r\n  _getTransactionReceipt(tx) {\r\n    const self = this;\r\n    return function _transactionReceipt(resolve, reject) {\r\n      self.web3.eth.getTransactionReceipt(tx, (error, receipt) => {\r\n        if (error) {\r\n          reject(error);\r\n        } else if (receipt === null) {\r\n          setTimeout(() => _transactionReceipt(resolve, reject), 500);\r\n        } else if (receipt.status === false) {\r\n          receipt.errorMessage = 'Transaction failed';\r\n          reject(receipt);\r\n        } else {\r\n          resolve(receipt);\r\n        }\r\n      });\r\n    };\r\n  }\r\n  async _transact(method, args, accountAddress) {\r\n    await this._init()\r\n    const gas = await this._estimatedGas(method, args, accountAddress)\r\n    let txRaw = [\r\n      {\r\n        from: accountAddress,\r\n        to: this.contractAddress,\r\n        gas: numberToHex(gas),\r\n        value: numberToHex('0'),\r\n        data: this.contract.methods[method](...args).encodeABI(),\r\n      },\r\n    ];\r\n    let tx = await window.ethereum.request({\r\n      method: 'eth_sendTransaction',\r\n      params: txRaw,\r\n    });\r\n    return await new Promise(this._getTransactionReceipt(tx));\r\n    //return await this.contract.methods[method](...args).send({from: accountAddress})\r\n  }\r\n\r\n}\r\n","\r\n/* eslint-disable */\r\nexport const perpetualPoolAbi = [ { \"inputs\": [ { \"internalType\": \"uint256[9]\", \"name\": \"parameters\", \"type\": \"uint256[9]\" }, { \"internalType\": \"address[4]\", \"name\": \"addresses\", \"type\": \"address[4]\" } ], \"stateMutability\": \"nonpayable\", \"type\": \"constructor\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" } ], \"name\": \"AddLiquidity\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" } ], \"name\": \"AddMargin\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"address\", \"name\": \"liquidator\", \"type\": \"address\" }, { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"reward\", \"type\": \"uint256\" } ], \"name\": \"Liquidate\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"collector\", \"type\": \"address\" }, { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"amount\", \"type\": \"uint256\" } ], \"name\": \"ProtocolFeeCollection\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" } ], \"name\": \"RemoveLiquidity\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" } ], \"name\": \"RemoveMargin\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" }, { \"indexed\": false, \"internalType\": \"int256\", \"name\": \"tradeVolume\", \"type\": \"int256\" }, { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"price\", \"type\": \"uint256\" } ], \"name\": \"Trade\", \"type\": \"event\" }, { \"inputs\": [ { \"components\": [ { \"internalType\": \"address\", \"name\": \"bTokenAddress\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"swapperAddress\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"oracleAddress\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"decimals\", \"type\": \"uint256\" }, { \"internalType\": \"int256\", \"name\": \"discount\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"price\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"liquidity\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"pnl\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"cumulativePnl\", \"type\": \"int256\" } ], \"internalType\": \"struct IPerpetualPool.BTokenInfo\", \"name\": \"info\", \"type\": \"tuple\" } ], \"name\": \"addBToken\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"blength\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"slength\", \"type\": \"uint256\" } ], \"name\": \"addLiquidity\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" } ], \"name\": \"addMargin\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"components\": [ { \"internalType\": \"string\", \"name\": \"symbol\", \"type\": \"string\" }, { \"internalType\": \"address\", \"name\": \"oracleAddress\", \"type\": \"address\" }, { \"internalType\": \"int256\", \"name\": \"multiplier\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"feeRatio\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"fundingRateCoefficient\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"price\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"cumulativeFundingRate\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"tradersNetVolume\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"tradersNetCost\", \"type\": \"int256\" } ], \"internalType\": \"struct IPerpetualPool.SymbolInfo\", \"name\": \"info\", \"type\": \"tuple\" } ], \"name\": \"addSymbol\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"targetPool\", \"type\": \"address\" } ], \"name\": \"approvePoolMigration\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"collectProtocolFee\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"sourcePool\", \"type\": \"address\" } ], \"name\": \"executePoolMigration\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"getAddresses\", \"outputs\": [ { \"internalType\": \"address\", \"name\": \"lTokenAddress\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"pTokenAddress\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"routerAddress\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"protocolFeeCollector\", \"type\": \"address\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" } ], \"name\": \"getBToken\", \"outputs\": [ { \"components\": [ { \"internalType\": \"address\", \"name\": \"bTokenAddress\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"swapperAddress\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"oracleAddress\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"decimals\", \"type\": \"uint256\" }, { \"internalType\": \"int256\", \"name\": \"discount\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"price\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"liquidity\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"pnl\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"cumulativePnl\", \"type\": \"int256\" } ], \"internalType\": \"struct IPerpetualPool.BTokenInfo\", \"name\": \"\", \"type\": \"tuple\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" } ], \"name\": \"getBTokenOracle\", \"outputs\": [ { \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"getLengths\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"getParameters\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"decimals0\", \"type\": \"uint256\" }, { \"internalType\": \"int256\", \"name\": \"minBToken0Ratio\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"minPoolMarginRatio\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"minInitialMarginRatio\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"minMaintenanceMarginRatio\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"minLiquidationReward\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"maxLiquidationReward\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"liquidationCutRatio\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"protocolFeeCollectRatio\", \"type\": \"int256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"getProtocolFeeAccrued\", \"outputs\": [ { \"internalType\": \"int256\", \"name\": \"\", \"type\": \"int256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" } ], \"name\": \"getSymbol\", \"outputs\": [ { \"components\": [ { \"internalType\": \"string\", \"name\": \"symbol\", \"type\": \"string\" }, { \"internalType\": \"address\", \"name\": \"oracleAddress\", \"type\": \"address\" }, { \"internalType\": \"int256\", \"name\": \"multiplier\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"feeRatio\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"fundingRateCoefficient\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"price\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"cumulativeFundingRate\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"tradersNetVolume\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"tradersNetCost\", \"type\": \"int256\" } ], \"internalType\": \"struct IPerpetualPool.SymbolInfo\", \"name\": \"\", \"type\": \"tuple\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" } ], \"name\": \"getSymbolOracle\", \"outputs\": [ { \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"liquidator\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"blength\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"slength\", \"type\": \"uint256\" } ], \"name\": \"liquidate\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"blength\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"slength\", \"type\": \"uint256\" } ], \"name\": \"removeLiquidity\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"blength\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"slength\", \"type\": \"uint256\" } ], \"name\": \"removeMargin\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"address\", \"name\": \"swapperAddress\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"oracleAddress\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"discount\", \"type\": \"uint256\" } ], \"name\": \"setBTokenParameters\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" }, { \"internalType\": \"address\", \"name\": \"oracleAddress\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"feeRatio\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"fundingRateCoefficient\", \"type\": \"uint256\" } ], \"name\": \"setSymbolParameters\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" }, { \"internalType\": \"int256\", \"name\": \"tradeVolume\", \"type\": \"int256\" }, { \"internalType\": \"uint256\", \"name\": \"blength\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"slength\", \"type\": \"uint256\" } ], \"name\": \"trade\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" } ]\r\nexport const perpetualPoolRouterAbi = [ { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"lTokenAddress\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"pTokenAddress\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"liquidatorQualifierAddress\", \"type\": \"address\" } ], \"stateMutability\": \"nonpayable\", \"type\": \"constructor\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"migrationTimestamp\", \"type\": \"uint256\" }, { \"indexed\": false, \"internalType\": \"address\", \"name\": \"source\", \"type\": \"address\" }, { \"indexed\": false, \"internalType\": \"address\", \"name\": \"target\", \"type\": \"address\" } ], \"name\": \"ExecuteMigration\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"migrationTimestamp\", \"type\": \"uint256\" }, { \"indexed\": false, \"internalType\": \"address\", \"name\": \"source\", \"type\": \"address\" }, { \"indexed\": false, \"internalType\": \"address\", \"name\": \"target\", \"type\": \"address\" } ], \"name\": \"PrepareMigration\", \"type\": \"event\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"bTokenAddress\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"swapperAddress\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"oracleAddress\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"discount\", \"type\": \"uint256\" } ], \"name\": \"addBToken\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" } ], \"name\": \"addLiquidity\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" }, { \"components\": [ { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"timestamp\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"price\", \"type\": \"uint256\" }, { \"internalType\": \"uint8\", \"name\": \"v\", \"type\": \"uint8\" }, { \"internalType\": \"bytes32\", \"name\": \"r\", \"type\": \"bytes32\" }, { \"internalType\": \"bytes32\", \"name\": \"s\", \"type\": \"bytes32\" } ], \"internalType\": \"struct IPerpetualPoolRouter.PriceInfo[]\", \"name\": \"infos\", \"type\": \"tuple[]\" } ], \"name\": \"addLiquidityWithPrices\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" } ], \"name\": \"addMargin\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" }, { \"components\": [ { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"timestamp\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"price\", \"type\": \"uint256\" }, { \"internalType\": \"uint8\", \"name\": \"v\", \"type\": \"uint8\" }, { \"internalType\": \"bytes32\", \"name\": \"r\", \"type\": \"bytes32\" }, { \"internalType\": \"bytes32\", \"name\": \"s\", \"type\": \"bytes32\" } ], \"internalType\": \"struct IPerpetualPoolRouter.PriceInfo[]\", \"name\": \"infos\", \"type\": \"tuple[]\" } ], \"name\": \"addMarginWithPrices\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"string\", \"name\": \"symbol\", \"type\": \"string\" }, { \"internalType\": \"address\", \"name\": \"oracleAddress\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"multiplier\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"feeRatio\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"fundingRateCoefficient\", \"type\": \"uint256\" } ], \"name\": \"addSymbol\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"approveMigration\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"claimNewController\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"controller\", \"outputs\": [ { \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"sourceRouter\", \"type\": \"address\" } ], \"name\": \"executeMigration\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" } ], \"name\": \"liquidate\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"components\": [ { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"timestamp\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"price\", \"type\": \"uint256\" }, { \"internalType\": \"uint8\", \"name\": \"v\", \"type\": \"uint8\" }, { \"internalType\": \"bytes32\", \"name\": \"r\", \"type\": \"bytes32\" }, { \"internalType\": \"bytes32\", \"name\": \"s\", \"type\": \"bytes32\" } ], \"internalType\": \"struct IPerpetualPoolRouter.PriceInfo[]\", \"name\": \"infos\", \"type\": \"tuple[]\" } ], \"name\": \"liquidateWithPrices\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"liquidatorQualifier\", \"outputs\": [ { \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"migrationDestination\", \"outputs\": [ { \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"migrationTimestamp\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"pool\", \"outputs\": [ { \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"target\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"graceDays\", \"type\": \"uint256\" } ], \"name\": \"prepareMigration\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" } ], \"name\": \"removeLiquidity\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" }, { \"components\": [ { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"timestamp\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"price\", \"type\": \"uint256\" }, { \"internalType\": \"uint8\", \"name\": \"v\", \"type\": \"uint8\" }, { \"internalType\": \"bytes32\", \"name\": \"r\", \"type\": \"bytes32\" }, { \"internalType\": \"bytes32\", \"name\": \"s\", \"type\": \"bytes32\" } ], \"internalType\": \"struct IPerpetualPoolRouter.PriceInfo[]\", \"name\": \"infos\", \"type\": \"tuple[]\" } ], \"name\": \"removeLiquidityWithPrices\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" } ], \"name\": \"removeMargin\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" }, { \"components\": [ { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"timestamp\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"price\", \"type\": \"uint256\" }, { \"internalType\": \"uint8\", \"name\": \"v\", \"type\": \"uint8\" }, { \"internalType\": \"bytes32\", \"name\": \"r\", \"type\": \"bytes32\" }, { \"internalType\": \"bytes32\", \"name\": \"s\", \"type\": \"bytes32\" } ], \"internalType\": \"struct IPerpetualPoolRouter.PriceInfo[]\", \"name\": \"infos\", \"type\": \"tuple[]\" } ], \"name\": \"removeMarginWithPrices\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"address\", \"name\": \"swapperAddress\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"oracleAddress\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"discount\", \"type\": \"uint256\" } ], \"name\": \"setBTokenParameters\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"qualifierAddress\", \"type\": \"address\" } ], \"name\": \"setLiquidatorQualifier\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"newController\", \"type\": \"address\" } ], \"name\": \"setNewController\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"poolAddress\", \"type\": \"address\" } ], \"name\": \"setPool\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" }, { \"internalType\": \"address\", \"name\": \"oracleAddress\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"feeRatio\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"fundingRateCoefficient\", \"type\": \"uint256\" } ], \"name\": \"setSymbolParameters\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" }, { \"internalType\": \"int256\", \"name\": \"tradeVolume\", \"type\": \"int256\" } ], \"name\": \"trade\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" }, { \"internalType\": \"int256\", \"name\": \"tradeVolume\", \"type\": \"int256\" }, { \"components\": [ { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"timestamp\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"price\", \"type\": \"uint256\" }, { \"internalType\": \"uint8\", \"name\": \"v\", \"type\": \"uint8\" }, { \"internalType\": \"bytes32\", \"name\": \"r\", \"type\": \"bytes32\" }, { \"internalType\": \"bytes32\", \"name\": \"s\", \"type\": \"bytes32\" } ], \"internalType\": \"struct IPerpetualPoolRouter.PriceInfo[]\", \"name\": \"infos\", \"type\": \"tuple[]\" } ], \"name\": \"tradeWithPrices\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" } ]\r\nexport const bTokenAbi = [ { \"inputs\": [ { \"internalType\": \"string\", \"name\": \"name_\", \"type\": \"string\" }, { \"internalType\": \"string\", \"name\": \"symbol_\", \"type\": \"string\" } ], \"stateMutability\": \"nonpayable\", \"type\": \"constructor\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"address\", \"name\": \"spender\", \"type\": \"address\" }, { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"amount\", \"type\": \"uint256\" } ], \"name\": \"Approval\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"from\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }, { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"amount\", \"type\": \"uint256\" } ], \"name\": \"Transfer\", \"type\": \"event\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"spender\", \"type\": \"address\" } ], \"name\": \"allowance\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"spender\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"amount\", \"type\": \"uint256\" } ], \"name\": \"approve\", \"outputs\": [ { \"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\" } ], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"account\", \"type\": \"address\" } ], \"name\": \"balanceOf\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"decimals\", \"outputs\": [ { \"internalType\": \"uint8\", \"name\": \"\", \"type\": \"uint8\" } ], \"stateMutability\": \"pure\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"name\", \"outputs\": [ { \"internalType\": \"string\", \"name\": \"\", \"type\": \"string\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"symbol\", \"outputs\": [ { \"internalType\": \"string\", \"name\": \"\", \"type\": \"string\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"totalSupply\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"amount\", \"type\": \"uint256\" } ], \"name\": \"transfer\", \"outputs\": [ { \"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\" } ], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"from\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"amount\", \"type\": \"uint256\" } ], \"name\": \"transferFrom\", \"outputs\": [ { \"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\" } ], \"stateMutability\": \"nonpayable\", \"type\": \"function\" } ]\r\nexport const lTokenAbi = [ { \"inputs\": [ { \"internalType\": \"string\", \"name\": \"name_\", \"type\": \"string\" }, { \"internalType\": \"string\", \"name\": \"symbol_\", \"type\": \"string\" }, { \"internalType\": \"uint256\", \"name\": \"numBTokens_\", \"type\": \"uint256\" } ], \"stateMutability\": \"nonpayable\", \"type\": \"constructor\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"address\", \"name\": \"operator\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"Approval\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"address\", \"name\": \"operator\", \"type\": \"address\" }, { \"indexed\": false, \"internalType\": \"bool\", \"name\": \"approved\", \"type\": \"bool\" } ], \"name\": \"ApprovalForAll\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"from\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"Transfer\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": false, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"indexed\": false, \"internalType\": \"int256\", \"name\": \"liquidity\", \"type\": \"int256\" }, { \"indexed\": false, \"internalType\": \"int256\", \"name\": \"pnl\", \"type\": \"int256\" }, { \"indexed\": false, \"internalType\": \"int256\", \"name\": \"lastCumulativePnl\", \"type\": \"int256\" } ], \"name\": \"UpdateAsset\", \"type\": \"event\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"operator\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"approve\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" } ], \"name\": \"balanceOf\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" } ], \"name\": \"burn\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" } ], \"name\": \"exists\", \"outputs\": [ { \"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"getApproved\", \"outputs\": [ { \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" } ], \"name\": \"getAsset\", \"outputs\": [ { \"components\": [ { \"internalType\": \"int256\", \"name\": \"liquidity\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"pnl\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"lastCumulativePnl\", \"type\": \"int256\" } ], \"internalType\": \"struct ILToken.Asset\", \"name\": \"\", \"type\": \"tuple\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" } ], \"name\": \"getAssets\", \"outputs\": [ { \"components\": [ { \"internalType\": \"int256\", \"name\": \"liquidity\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"pnl\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"lastCumulativePnl\", \"type\": \"int256\" } ], \"internalType\": \"struct ILToken.Asset[]\", \"name\": \"\", \"type\": \"tuple[]\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"operator\", \"type\": \"address\" } ], \"name\": \"isApprovedForAll\", \"outputs\": [ { \"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" } ], \"name\": \"mint\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"name\", \"outputs\": [ { \"internalType\": \"string\", \"name\": \"\", \"type\": \"string\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"numBTokens\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"ownerOf\", \"outputs\": [ { \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"pool\", \"outputs\": [ { \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"from\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"safeTransferFrom\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"from\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" }, { \"internalType\": \"bytes\", \"name\": \"data\", \"type\": \"bytes\" } ], \"name\": \"safeTransferFrom\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"operator\", \"type\": \"address\" }, { \"internalType\": \"bool\", \"name\": \"approved\", \"type\": \"bool\" } ], \"name\": \"setApprovalForAll\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"num\", \"type\": \"uint256\" } ], \"name\": \"setNumBTokens\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"newPool\", \"type\": \"address\" } ], \"name\": \"setPool\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"bytes4\", \"name\": \"interfaceId\", \"type\": \"bytes4\" } ], \"name\": \"supportsInterface\", \"outputs\": [ { \"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"symbol\", \"outputs\": [ { \"internalType\": \"string\", \"name\": \"\", \"type\": \"string\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"totalMinted\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"totalSupply\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"from\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"transferFrom\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"components\": [ { \"internalType\": \"int256\", \"name\": \"liquidity\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"pnl\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"lastCumulativePnl\", \"type\": \"int256\" } ], \"internalType\": \"struct ILToken.Asset\", \"name\": \"asset\", \"type\": \"tuple\" } ], \"name\": \"updateAsset\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" } ]\r\nexport const pTokenAbi = [ { \"inputs\": [ { \"internalType\": \"string\", \"name\": \"name_\", \"type\": \"string\" }, { \"internalType\": \"string\", \"name\": \"symbol_\", \"type\": \"string\" }, { \"internalType\": \"uint256\", \"name\": \"numSymbols_\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"numBTokens_\", \"type\": \"uint256\" } ], \"stateMutability\": \"nonpayable\", \"type\": \"constructor\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"address\", \"name\": \"operator\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"Approval\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"address\", \"name\": \"operator\", \"type\": \"address\" }, { \"indexed\": false, \"internalType\": \"bool\", \"name\": \"approved\", \"type\": \"bool\" } ], \"name\": \"ApprovalForAll\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"from\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"Transfer\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"indexed\": false, \"internalType\": \"int256\", \"name\": \"amount\", \"type\": \"int256\" } ], \"name\": \"UpdateMargin\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" }, { \"indexed\": false, \"internalType\": \"int256\", \"name\": \"volume\", \"type\": \"int256\" }, { \"indexed\": false, \"internalType\": \"int256\", \"name\": \"cost\", \"type\": \"int256\" }, { \"indexed\": false, \"internalType\": \"int256\", \"name\": \"lastCumulativeFundingRate\", \"type\": \"int256\" } ], \"name\": \"UpdatePosition\", \"type\": \"event\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"operator\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"approve\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" } ], \"name\": \"balanceOf\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" } ], \"name\": \"burn\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" } ], \"name\": \"exists\", \"outputs\": [ { \"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"getApproved\", \"outputs\": [ { \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" } ], \"name\": \"getMargin\", \"outputs\": [ { \"internalType\": \"int256\", \"name\": \"\", \"type\": \"int256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" } ], \"name\": \"getMargins\", \"outputs\": [ { \"internalType\": \"int256[]\", \"name\": \"\", \"type\": \"int256[]\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" } ], \"name\": \"getPosition\", \"outputs\": [ { \"components\": [ { \"internalType\": \"int256\", \"name\": \"volume\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"cost\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"lastCumulativeFundingRate\", \"type\": \"int256\" } ], \"internalType\": \"struct IPToken.Position\", \"name\": \"\", \"type\": \"tuple\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" } ], \"name\": \"getPositions\", \"outputs\": [ { \"components\": [ { \"internalType\": \"int256\", \"name\": \"volume\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"cost\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"lastCumulativeFundingRate\", \"type\": \"int256\" } ], \"internalType\": \"struct IPToken.Position[]\", \"name\": \"\", \"type\": \"tuple[]\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"operator\", \"type\": \"address\" } ], \"name\": \"isApprovedForAll\", \"outputs\": [ { \"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" } ], \"name\": \"mint\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"name\", \"outputs\": [ { \"internalType\": \"string\", \"name\": \"\", \"type\": \"string\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"numBTokens\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"numSymbols\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"ownerOf\", \"outputs\": [ { \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"pool\", \"outputs\": [ { \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"from\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"safeTransferFrom\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"from\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" }, { \"internalType\": \"bytes\", \"name\": \"data\", \"type\": \"bytes\" } ], \"name\": \"safeTransferFrom\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"operator\", \"type\": \"address\" }, { \"internalType\": \"bool\", \"name\": \"approved\", \"type\": \"bool\" } ], \"name\": \"setApprovalForAll\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"num\", \"type\": \"uint256\" } ], \"name\": \"setNumBTokens\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"num\", \"type\": \"uint256\" } ], \"name\": \"setNumSymbols\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"newPool\", \"type\": \"address\" } ], \"name\": \"setPool\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"bytes4\", \"name\": \"interfaceId\", \"type\": \"bytes4\" } ], \"name\": \"supportsInterface\", \"outputs\": [ { \"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"symbol\", \"outputs\": [ { \"internalType\": \"string\", \"name\": \"\", \"type\": \"string\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"totalMinted\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"totalSupply\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"from\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"transferFrom\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"int256\", \"name\": \"amount\", \"type\": \"int256\" } ], \"name\": \"updateMargin\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"int256[]\", \"name\": \"margins\", \"type\": \"int256[]\" } ], \"name\": \"updateMargins\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" }, { \"components\": [ { \"internalType\": \"int256\", \"name\": \"volume\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"cost\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"lastCumulativeFundingRate\", \"type\": \"int256\" } ], \"internalType\": \"struct IPToken.Position\", \"name\": \"position\", \"type\": \"tuple\" } ], \"name\": \"updatePosition\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" } ]\r\nexport const wooOracleAbi = [{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"_I_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]\r\n/* eslint-disable */","import { ContractBase } from './contract_base'\r\nimport { perpetualPoolAbi } from './abis';\r\nimport { deriToNatural, bg } from '../utils'\r\n\r\nexport class PerpetualPool extends ContractBase {\r\n  constructor(chainId, contractAddress, useInfura=false) {\r\n    super(chainId, contractAddress, useInfura)\r\n    this.contractAbi = perpetualPoolAbi\r\n\r\n    this.bTokenLength = 0\r\n    this.symbolLength = 0\r\n\r\n    this.lTokenAddress = ''\r\n    this.pTokenAddress = ''\r\n    this.routerAddress = ''\r\n    this.protocolFeeCollector = ''\r\n\r\n    this.protocolFeeAccrued = 0\r\n  }\r\n  async _init() {\r\n    if (!this.web3) {\r\n      await super._init()\r\n      this.contract = new this.web3.eth.Contract(this.contractAbi, this.contractAddress)\r\n    }\r\n  }\r\n\r\n  async _update() {\r\n    await Promise.all([\r\n      this.getLengths(),\r\n      this.getAddresses(),\r\n      this.getParameters(),\r\n    ]);\r\n  }\r\n\r\n  async getLengths() {\r\n    try {\r\n      const res = await this._call('getLengths')\r\n      //console.log(res[0])\r\n      if (res[0] && res[1]) {\r\n        this.bTokenLength = parseInt(res[0])\r\n        this.symbolLength = parseInt(res[1])\r\n      }\r\n    } catch(err) {\r\n      throw new Error(`PerpetualPool#_getLength error: ${err}`)\r\n    }\r\n  }\r\n  async getAddresses() {\r\n    try {\r\n      const res = await this._call('getAddresses')\r\n      this.lTokenAddress = res.lTokenAddress\r\n      this.pTokenAddress = res.pTokenAddress\r\n      this.routerAddress = res.routerAddress\r\n      this.protocolFeeCollector = res.protocolFeeCollector\r\n    } catch (err) {\r\n      throw new Error(`PerpetualPool#_getAddress error: ${err}`)\r\n    }\r\n  }\r\n  async getParameters() {\r\n    const res = await this._call('getParameters')\r\n    return {\r\n      decimals0: res.decimals0,\r\n      minBToken0Ratio: deriToNatural(res.minBToken0Ratio),\r\n      minPoolMarginRatio: deriToNatural(res.minPoolMarginRatio),\r\n      minInitialMarginRatio: deriToNatural(res.minInitialMarginRatio),\r\n      minMaintenanceMarginRatio: deriToNatural(res.minMaintenanceMarginRatio),\r\n      minLiquidationReward: deriToNatural(res.minLiquidationReward),\r\n      maxLiquidationReward: deriToNatural(res.maxLiquidationReward),\r\n      liquidationCutRatio: deriToNatural(res.liquidationCutRatio),\r\n      protocolFeeCollectRatio: deriToNatural(res.protocolFeeCollectRatio),\r\n    };\r\n  }\r\n  async getProtocolFeeAccrued() {\r\n    const res =  await this._call('getProtocolFeeAccrued')\r\n    this.protocolFeeAccrued = deriToNatural(res)\r\n  }\r\n  async getBToken(bTokenId) {\r\n    try {\r\n      //bTokenId = parseInt(bTokenId)\r\n      const res = await this._call('getBToken', [bTokenId]);\r\n      return {\r\n        bTokenAddress: res.bTokenAddress,\r\n        swapperAddress: res.bTokenAddress,\r\n        oracleAddress: res.oracleAddress,\r\n        decimals: res.decimals,\r\n        discount: deriToNatural(res.discount),\r\n        price: deriToNatural(res.price),\r\n        liquidity: deriToNatural(res.liquidity),\r\n        pnl: deriToNatural(res.pnl),\r\n        cumulativePnl: deriToNatural(res.cumulativePnl),\r\n      };\r\n    } catch (err) {\r\n      throw new Error(`PerpetualPool#getBToken error: ${err}`);\r\n    }\r\n  }\r\n  async getBTokenOracle(bTokenId) {\r\n    //bTokenId = parseInt(bTokenId)\r\n    return await this._call('getBTokenOracle', [bTokenId])\r\n  }\r\n  async getSymbol(symbolId) {\r\n    //symbolId = parseInt(symbolId)\r\n    try {\r\n      const res =  await this._call('getSymbol', [symbolId])\r\n      return {\r\n        symbol: res.symbol,\r\n        oracleAddress: res.oracleAddress,\r\n        multiplier: deriToNatural(res.multiplier),\r\n        feeRatio: deriToNatural(res.feeRatio),\r\n        fundingRateCoefficient: deriToNatural(res.fundingRateCoefficient),\r\n        price: deriToNatural(res.price),\r\n        cumulativeFundingRate: deriToNatural(res.cumulativeFundingRate),\r\n        tradersNetVolume: deriToNatural(res.tradersNetVolume),\r\n        tradersNetCost: deriToNatural(res.tradersNetCost),\r\n      };\r\n    } catch (err) {\r\n      throw new Error(`PerpetualPool#getSymbol error: ${err}`);\r\n    }\r\n  }\r\n  async getSymbolOracle(symbolId) {\r\n    //symbolId = parseInt(symbolId)\r\n    return await this._call('getSymbolOracle', [symbolId])\r\n  }\r\n\r\n  // trade history query methods\r\n  async _getTimeStamp(blockNumber) {\r\n    await this._init()\r\n    return await this.web3.eth.getBlock(blockNumber);\r\n  }\r\n  _calculateFee(volume, price, multiplier, feeRatio) {\r\n    return bg(volume)\r\n      .abs()\r\n      .times(price)\r\n      .times(multiplier)\r\n      .times(feeRatio)\r\n      .toString();\r\n  }\r\n  async _getBlockInfo(blockNumber) {\r\n    await this._init()\r\n    return await this.web3.eth.getBlock(blockNumber);\r\n  }\r\n\r\n  async _getPastEvents(eventName, filter = {}, fromBlock = 0, to = 0) {\r\n    await this._init()\r\n    let events = [];\r\n    //let toBlock = await this._getBlockInfo(\"latest\");\r\n    let amount\r\n    if (['56', '97'].includes(this.chainId)) {\r\n      amount = 999\r\n    } else {\r\n      amount = 4999\r\n    }\r\n    if ((fromBlock + amount) > to) {\r\n      amount = to - fromBlock\r\n    }\r\n    while (fromBlock <= to) {\r\n      let es = await this.contract.getPastEvents(eventName, {\r\n        filter: filter,\r\n        fromBlock: fromBlock,\r\n        toBlock: fromBlock + amount,\r\n      });\r\n      for (let e of es) {\r\n        events.push(e);\r\n      }\r\n      fromBlock += amount + 1;\r\n      if ((fromBlock + amount) > to) {\r\n        amount = to - fromBlock\r\n      }\r\n    }\r\n    return events;\r\n  }\r\n}","import { ContractBase } from './contract_base'\r\nimport { perpetualPoolRouterAbi} from './abis';\r\nimport { naturalToDeri } from '../utils'\r\nimport { MAX_INT256 } from '../config';\r\n\r\nexport class PerpetualPoolRouter extends ContractBase {\r\n  constructor(chainId, contractAddress, useInfura=false) {\r\n    super(chainId, contractAddress, useInfura)\r\n    this.contractAbi = perpetualPoolRouterAbi\r\n    this.poolAddress = ''\r\n  }\r\n  async _init() {\r\n    if (!this.web3) {\r\n      await super._init()\r\n      this.contract = new this.web3.eth.Contract(this.contractAbi, this.contractAddress)\r\n    }\r\n  }\r\n\r\n  // === query ===\r\n  async pool() {\r\n    this.poolAddress = await this._call('pool');\r\n    return this.poolAddress\r\n  }\r\n\r\n  // === transaction ===\r\n  async addLiquidity(accountAddress, bTokenId, amount) {\r\n    if (!this.poolAddress) {\r\n      await this.pool()\r\n    }\r\n    return await this._transact(\r\n      'addLiquidity',\r\n      [bTokenId, naturalToDeri(amount)],\r\n      accountAddress\r\n    );\r\n  }\r\n\r\n  async removeLiquidity(accountAddress, bTokenId, amount, isMaximum) {\r\n    if (isMaximum) {\r\n      return await this._transact(\r\n        'removeLiquidity',\r\n        [bTokenId, MAX_INT256],\r\n        accountAddress\r\n      );\r\n    } else {\r\n      return await this._transact(\r\n        'removeLiquidity',\r\n        [bTokenId, naturalToDeri(amount)],\r\n        accountAddress\r\n      );\r\n    }\r\n  }\r\n\r\n  async addMargin(accountAddress, bTokenId, amount) {\r\n    if (!this.poolAddress) {\r\n      await this.pool()\r\n    }\r\n    return await this._transact(\r\n      'addMargin',\r\n      [bTokenId, naturalToDeri(amount)],\r\n      accountAddress\r\n    );\r\n  }\r\n\r\n  async removeMargin(accountAddress, bTokenId, amount, isMaximum) {\r\n    if (!this.poolAddress) {\r\n      await this.pool()\r\n    }\r\n    if (isMaximum) {\r\n      console.log('->', MAX_INT256)\r\n      return await this._transact(\r\n        'removeMargin',\r\n        [bTokenId, MAX_INT256],\r\n        accountAddress\r\n      );\r\n    } else {\r\n      return await this._transact(\r\n        'removeMargin',\r\n        [bTokenId, naturalToDeri(amount)],\r\n        accountAddress\r\n      );\r\n    }\r\n  }\r\n\r\n  async trade(accountAddress, symbolId, amount) {\r\n    if (!this.poolAddress) {\r\n      await this.pool()\r\n    }\r\n    return await this._transact(\r\n      'trade',\r\n      [symbolId, naturalToDeri(amount)],\r\n      accountAddress\r\n    );\r\n  }\r\n\r\n  // with prices\r\n  async addLiquidityWithPrices(accountAddress, bTokenId, amount, priceInfos) {\r\n    if (!this.poolAddress) {\r\n      await this.pool()\r\n    }\r\n    return await this._transact(\r\n      'addLiquidityWithPrices',\r\n      [bTokenId, naturalToDeri(amount), priceInfos],\r\n      accountAddress\r\n    );\r\n  }\r\n  async removeLiquidityWithPrices(accountAddress, bTokenId, amount, priceInfos, isMaximum) {\r\n    if (isMaximum) {\r\n      return await this._transact(\r\n        'removeLiquidityWithPrices',\r\n        [bTokenId, MAX_INT256, priceInfos],\r\n        accountAddress\r\n      );\r\n    } else {\r\n      return await this._transact(\r\n        'removeLiquidityWithPrices',\r\n        [bTokenId, naturalToDeri(amount), priceInfos],\r\n        accountAddress\r\n      );\r\n    }\r\n  }\r\n\r\n  async addMarginWithPrices(accountAddress, bTokenId, amount, priceInfos) {\r\n    if (!this.poolAddress) {\r\n      await this.pool()\r\n    }\r\n    return await this._transact(\r\n      'addMarginWithPrices',\r\n      [bTokenId, naturalToDeri(amount), priceInfos],\r\n      accountAddress\r\n    );\r\n  }\r\n\r\n  async removeMarginWithPrices(accountAddress, bTokenId, amount, priceInfos, isMaximum) {\r\n    if (!this.poolAddress) {\r\n      await this.pool()\r\n    }\r\n    if (isMaximum) {\r\n      return await this._transact(\r\n        'removeMarginWithPrices',\r\n        [bTokenId, MAX_INT256, priceInfos],\r\n        accountAddress\r\n      );\r\n    } else {\r\n      return await this._transact(\r\n        'removeMarginWithPrices',\r\n        [bTokenId, naturalToDeri(amount), priceInfos],\r\n        accountAddress\r\n      );\r\n    }\r\n  }\r\n\r\n  async tradeWithPrices(accountAddress, symbolId, amount, priceInfos) {\r\n    if (!this.poolAddress) {\r\n      await this.pool()\r\n    }\r\n    return await this._transact(\r\n      'tradeWithPrices',\r\n      [symbolId, naturalToDeri(amount), priceInfos],\r\n      accountAddress\r\n    );\r\n  }\r\n\r\n  // async liquidate(acountAddress) {\r\n  //   if (!this.poolAddress) {\r\n  //     await this.pool()\r\n  //   }\r\n  //   return await this._transact(\r\n  //     'liquidate',\r\n  //     [accountAddress],\r\n  //     accountAddress\r\n  //   );\r\n  // }\r\n\r\n}","import { ContractBase } from './contract_base'\r\nimport { bTokenAbi } from './abis';\r\nimport { deriToNatural, bg } from '../utils'\r\nimport { MAX_UINT256} from '../config'\r\n\r\n\r\nexport class BToken extends ContractBase {\r\n  constructor(chainId, contractAddress, useInfura=false) {\r\n    super(chainId, contractAddress, useInfura);\r\n    this.contractAbi = bTokenAbi;\r\n  }\r\n  async _init() {\r\n    if (!this.web3) {\r\n      await super._init();\r\n      this.contract = new this.web3.eth.Contract(\r\n        this.contractAbi,\r\n        this.contractAddress\r\n      );\r\n    }\r\n  }\r\n\r\n  // === query ===\r\n  async symbol() {\r\n    return await this._call('symbol');\r\n  }\r\n\r\n  async decimals() {\r\n    return await this._call('decimals');\r\n  }\r\n  async _balanceOf(address) {\r\n    return await this._call('balanceOf', [address]);\r\n  }\r\n\r\n  async balanceOf(address) {\r\n    const [res, decimals] = await Promise.all([\r\n      this._balanceOf(address),\r\n      this.decimals(),\r\n    ]);\r\n    return bg(res, -decimals);\r\n  }\r\n\r\n  async totalSupply() {\r\n    const res = await this._call('totalSupply');\r\n    return deriToNatural(res);\r\n  }\r\n\r\n  async isUnlocked(accountAddress, poolAddress) {\r\n    const allowance = await this._call('allowance', [\r\n      accountAddress,\r\n      poolAddress,\r\n    ]);\r\n    return bg(allowance).gt(0);\r\n  }\r\n\r\n  // === transaction ===\r\n  async unlock(accountAddress, poolAddress) {\r\n    return await this._transact(\r\n      'approve',\r\n      [poolAddress, MAX_UINT256],\r\n      accountAddress\r\n    );\r\n  }\r\n\r\n  // async transfer() {\r\n  // call transfer\r\n  // }\r\n}","import { ContractBase } from './contract_base'\r\nimport { lTokenAbi } from './abis';\r\nimport { deriToNatural } from '../utils'\r\n\r\nconst processAsset = (res) => {\r\n  return {\r\n    liquidity: deriToNatural(res[0]),\r\n    pnl: deriToNatural(res[1]),\r\n    lastCumulativePnl: deriToNatural(res[2]),\r\n  }\r\n}\r\nexport class LToken extends ContractBase {\r\n  constructor(chainId, contractAddress, useInfura=false) {\r\n    super(chainId, contractAddress, useInfura)\r\n    this.contractAbi = lTokenAbi\r\n  }\r\n  async _init() {\r\n    if (!this.web3) {\r\n      await super._init()\r\n      this.contract = new this.web3.eth.Contract(this.contractAbi, this.contractAddress)\r\n    }\r\n  }\r\n\r\n  // === query ===\r\n  async balanceOf(accountAddress) {\r\n    return await this._call('balanceOf', [accountAddress]);\r\n  }\r\n  async pool() {\r\n    return await this._call('pool');\r\n  }\r\n  async exists(accountAddress) {\r\n    return await this._call('exists', [accountAddress]);\r\n  }\r\n  async getAsset(accountAddress, bTokenId) {\r\n    const res = await this._call('getAsset', [accountAddress, bTokenId]);\r\n    if (Array.isArray(res)) {\r\n      return processAsset(res)\r\n    } else {\r\n      throw new Error(`LToken#getAsset: invalid result with (${accountAddress} ${bTokenId})`)\r\n    }\r\n  }\r\n  async getAssets(accountAddress) {\r\n    const res = await this._call('getAssets', [accountAddress]);\r\n    if (Array.isArray(res)) {\r\n      return res.map(i => processAsset(i))\r\n    } else {\r\n      throw new Error(`LToken#getAsset: invalid result with (${accountAddress})`)\r\n    }\r\n  }\r\n\r\n  // === transaction ===\r\n}","import { ContractBase } from './contract_base'\r\nimport { pTokenAbi } from './abis';\r\nimport { deriToNatural } from '../utils'\r\n\r\nconst processPosition = (res) => {\r\n  return {\r\n    volume: deriToNatural(res.volume),\r\n    cost: deriToNatural(res.cost),\r\n    lastCumulativeFundingRate: deriToNatural(res.lastCumulativeFundingRate),\r\n  }\r\n}\r\nexport class PToken extends ContractBase {\r\n  constructor(chainId, contractAddress, useInfura=false) {\r\n    super(chainId, contractAddress, useInfura)\r\n    this.contractAbi = pTokenAbi\r\n  }\r\n  async _init() {\r\n    if (!this.web3) {\r\n      await super._init()\r\n      this.contract = new this.web3.eth.Contract(this.contractAbi, this.contractAddress)\r\n    }\r\n  }\r\n\r\n  // === query ===\r\n  async pool() {\r\n    return await this._call('pool');\r\n  }\r\n  async balanceOf(accountAddress) {\r\n    return await this._call('balanceOf', [accountAddress]);\r\n  }\r\n  async exists(accountAddress) {\r\n    return await this._call('exists', [accountAddress]);\r\n  }\r\n  async getMargin(accountAddress, symbolId) {\r\n    const res = await this._call('getMargin', [accountAddress, symbolId]);\r\n    return deriToNatural(res)\r\n  }\r\n  async getMargins(accountAddress) {\r\n    const res = await this._call('getMargins', [accountAddress]);\r\n    if (Array.isArray(res)) {\r\n      return res.map((i) => deriToNatural(i))\r\n    }\r\n  }\r\n  async getPosition(accountAddress, symbolId) {\r\n    const res = await this._call('getPosition', [accountAddress, symbolId]);\r\n    if (Array.isArray(res)) {\r\n      return processPosition(res)\r\n    } else {\r\n      throw new Error(`PToken#getMargin: invalid result with (${accountAddress})`)\r\n    }\r\n  }\r\n  async getPositions(accountAddress) {\r\n    const res = await this._call('getPositions', [accountAddress]);\r\n    if (Array.isArray(res)) {\r\n      return res.map((i) => processPosition(i))\r\n    }\r\n  }\r\n\r\n  // === transaction ===\r\n}","import { ContractBase } from \"./contract_base\";\r\nimport { wooOracleAbi } from './abis';\r\n\r\nexport class WooOracle extends ContractBase {\r\n  constructor(chainId, address, symbol, useInfura) {\r\n    super(chainId, address, useInfura)\r\n    this.contractAbi = wooOracleAbi\r\n    this.symbol = symbol\r\n  }\r\n  async _init() {\r\n    if (!this.web3) {\r\n      await super._init()\r\n      this.contract = new this.web3.eth.Contract(this.contractAbi, this.contractAddress)\r\n    }\r\n  }\r\n\r\n  async getPrice() {\r\n    return await this._call('_I_');\r\n  }\r\n}","import Web3 from 'web3';\r\nimport {\r\n  PerpetualPool,\r\n  PerpetualPoolRouter,\r\n  BToken,\r\n  LToken,\r\n  PToken,\r\n  WooOracle,\r\n} from './contract';\r\nimport { getChainProviderUrl } from './utils/chain';\r\n\r\nexport const metaMaskWeb3 = (function () {\r\n  let web3Instance = null;\r\n  return () => {\r\n    if (web3Instance !== null) {\r\n      return web3Instance;\r\n    }\r\n    if (typeof window.ethereum !== undefined) {\r\n      web3Instance = new Web3(window.ethereum);\r\n      return web3Instance;\r\n    } else {\r\n      // console.log(\"Please install MetaMask first\")\r\n      throw new Error('Please install MetaMask first');\r\n    }\r\n  };\r\n})();\r\n\r\nexport const web3Factory = (function () {\r\n  const web3InstanceMap = {};\r\n  return {\r\n    async getOrSet(chainId) {\r\n      if (Object.keys(web3InstanceMap).includes(chainId)) {\r\n        return web3InstanceMap[chainId];\r\n      }\r\n      console.log(\r\n        `==== web3Factory(${chainId}), please caution the access limits ===`\r\n      );\r\n      const providerUrl = await getChainProviderUrl(chainId);\r\n      web3InstanceMap[chainId] = new Web3(\r\n        new Web3.providers.HttpProvider(providerUrl)\r\n      );\r\n      return web3InstanceMap[chainId];\r\n    },\r\n  };\r\n})();\r\n\r\nexport const perpetualPoolFactory = (function () {\r\n  const instanceMap = {};\r\n  return (chainId, address, useInfura) => {\r\n    const key = useInfura ? `${address}.useInfura` : address;\r\n    if (Object.keys(instanceMap).includes(key)) {\r\n      return instanceMap[key];\r\n    } else {\r\n      instanceMap[key] = new PerpetualPool(chainId, address, useInfura);\r\n      return instanceMap[key];\r\n    }\r\n  };\r\n})();\r\n\r\nexport const perpetualPoolRouterFactory = (function () {\r\n  const instanceMap = {};\r\n  return (chainId, address, useInfura) => {\r\n    const key = useInfura ? `${address}.useInfura` : address;\r\n    if (Object.keys(instanceMap).includes(key)) {\r\n      return instanceMap[key];\r\n    } else {\r\n      instanceMap[key] = new PerpetualPoolRouter(chainId, address, useInfura);\r\n      return instanceMap[key];\r\n    }\r\n  };\r\n})();\r\n\r\nexport const bTokenFactory = (function () {\r\n  const instanceMap = {};\r\n  return (chainId, address, useInfura) => {\r\n    const key = useInfura ? `${address}.useInfura` : address;\r\n    if (Object.keys(instanceMap).includes(key)) {\r\n      return instanceMap[key];\r\n    } else {\r\n      instanceMap[key] = new BToken(chainId, address, useInfura);\r\n      return instanceMap[key];\r\n    }\r\n  };\r\n})();\r\n\r\nexport const lTokenFactory = (function () {\r\n  const instanceMap = {};\r\n  return (chainId, address, useInfura) => {\r\n    const key = useInfura ? `${address}.useInfura` : address;\r\n    if (Object.keys(instanceMap).includes(key)) {\r\n      return instanceMap[key];\r\n    } else {\r\n      instanceMap[key] = new LToken(chainId, address, useInfura);\r\n      return instanceMap[key];\r\n    }\r\n  };\r\n})();\r\n\r\nexport const pTokenFactory = (function () {\r\n  const instanceMap = {};\r\n  return (chainId, address, useInfura) => {\r\n    const key = useInfura ? `${address}.useInfura` : address;\r\n    if (Object.keys(instanceMap).includes(key)) {\r\n      return instanceMap[key];\r\n    } else {\r\n      instanceMap[key] = new PToken(chainId, address, useInfura);\r\n      return instanceMap[key];\r\n    }\r\n  };\r\n})();\r\n\r\nexport const wooOracleFactory = (function () {\r\n  const instanceMap = {};\r\n  return (chainId, address, symbol, useInfura) => {\r\n    const key = useInfura ? `${address}.useInfura` : address;\r\n    if (Object.keys(instanceMap).includes(key)) {\r\n      return instanceMap[key];\r\n    } else {\r\n      instanceMap[key] = new WooOracle(chainId, address, symbol, useInfura);\r\n      return instanceMap[key];\r\n    }\r\n  };\r\n})();\r\n","import { getPoolConfig, getOracleConfig } from '../config';\r\nimport { DeriEnv } from '../../config'\r\nimport { wooOracleFactory } from '../factory'\r\nimport { deriToNatural } from './convert'\r\nimport { normalizeChainId } from './validate'\r\n\r\nexport const getOracleUrl = (poolAddress, symbolId) => {\r\n  const env = DeriEnv.get();\r\n  const { symbol } = getPoolConfig(poolAddress, null, symbolId);\r\n  const addSymbolParam = (url, symbol = 'BTCUSD') => `${url}?symbol=${symbol}`;\r\n  if (env === 'prod' || env === 'production') {\r\n    // for production\r\n    if (symbol) {\r\n      return addSymbolParam('https://oracle4.deri.finance/price', symbol);\r\n    }\r\n    return 'https://oracle4.deri.finance/price';\r\n  } else {\r\n    if (symbol) {\r\n      return addSymbolParam('https://oracle4.deri.finance/price', symbol);\r\n    }\r\n    // for test\r\n    return 'https://oracle4.deri.finance/price';\r\n  }\r\n};\r\n\r\nexport const getOracleInfo = async (poolAddress, symbolId) => {\r\n  let url = getOracleUrl(poolAddress, symbolId);\r\n  //console.log('oracle url', url);\r\n  let retry = 2;\r\n  let res;\r\n  while (retry > 0) {\r\n    res = await fetch(url, { mode: 'cors', cache: 'no-cache' });\r\n    if (res.ok) {\r\n      break;\r\n    }\r\n    retry -= 1;\r\n  }\r\n  if (retry === 0 && !res) {\r\n    throw new Error(`fetch oracle info error: exceed max retry(2).`);\r\n  }\r\n  return await res.json();\r\n};\r\n\r\n// export const getOraclePrice = async (poolAddress, symbolId) => {\r\n//   const responseJson = await getOracleInfo(poolAddress, symbolId);\r\n//   let price = responseJson.price;\r\n//   if (!price) {\r\n//     price = '0';\r\n//   }\r\n//   return deriToNatural(responseJson.price).toString();\r\n// };\r\n\r\nexport const getOraclePrice = async(chainId, symbol, useInfura=false) => {\r\n  chainId = normalizeChainId(chainId)\r\n  const config = getOracleConfig(chainId, symbol)\r\n  if (config && config.address) {\r\n    const wooOracle = wooOracleFactory(chainId, config.address, symbol, useInfura)\r\n    return deriToNatural(await wooOracle.getPrice()).toString()\r\n  }\r\n}\r\n","import { bg, max } from '../utils';\r\n\r\nexport const calculateEntryPrice = (volume, cost, multiplier) =>\r\n  volume.eq(0) ? bg(0) : cost.div(volume).div(multiplier);\r\n\r\nexport const calculateMarginHeld = (\r\n  price,\r\n  volume,\r\n  multiplier,\r\n  minInitialMarginRatio\r\n) => {\r\n  return volume.abs().times(price).times(multiplier).times(minInitialMarginRatio)\r\n};\r\n\r\nexport const calculatePnl = (price, volume, multiplier, cost) => {\r\n  return volume.times(price).times(multiplier).minus(cost);\r\n}\r\n\r\n// export const calculateMaxWithdrawMargin = (\r\n//   price,\r\n//   volume,\r\n//   margin,\r\n//   cost,\r\n//   multiplier,\r\n//   minInitialMarginRatio\r\n// ) => {\r\n//   if (volume.eq(0)) {\r\n//     return margin;\r\n//   }\r\n//   const held = calculateMarginHeld(\r\n//     price,\r\n//     volume,\r\n//     multiplier,\r\n//     minInitialMarginRatio\r\n//   );\r\n//   const pnl = calculatePnl(price, volume, multiplier, cost);\r\n//   const withdrawable = max(margin.plus(pnl).minus(held.times(1.02)), bg(0));\r\n//   return withdrawable;\r\n// };\r\n\r\nexport const calculateLiquidationPrice = (\r\n  volume,\r\n  margin,\r\n  cost,\r\n  dynamicCost,\r\n  multiplier,\r\n  minMaintenanceMarginRatio\r\n) => {\r\n  const tmp = cost.minus(margin);\r\n  let res = volume.gt(0)\r\n    ? tmp.div(bg(1).minus(minMaintenanceMarginRatio)).minus(dynamicCost).div(volume).div(multiplier)\r\n    : tmp.div(bg(1).plus(minMaintenanceMarginRatio)).minus(dynamicCost).div(volume).div(multiplier);\r\n  res = max(res, bg(0));\r\n  return res;\r\n};\r\n\r\nexport const isOrderValid = (\r\n  //price,\r\n  margin,\r\n  marginHeld,\r\n  liquidity,\r\n  liquidityUsed,\r\n  // multiplier,\r\n  // minPoolMarginRatio,\r\n  // newVolume,\r\n) => {\r\n  const minMargin = marginHeld;\r\n  // const poolMaxVolume = liquidity.minus(liquidityUsed)\r\n  //   .div(minPoolMarginRatio)\r\n  //   .div(price)\r\n  //   .div(multiplier);\r\n  if (margin.gte(minMargin)) {\r\n    // if (\r\n    //   newVolume.lte(poolMaxVolume) &&\r\n    //   newVolume.gte(poolMaxVolume.negated())\r\n    // ) {\r\n    if (liquidity.minus(liquidityUsed).gte(0)) {\r\n      return { success: true };\r\n    }\r\n    return { success: false, error: 'Pool has insufficient liquidity' };\r\n  }\r\n  return { success: false, error: 'Trader has insufficient margin' };\r\n};\r\n","import { bg, getAnnualBlockNumber, validateArgs } from '../utils';\r\n\r\nexport const calculateLiquidityUsed = (\r\n  tradersNetVolume,\r\n  price,\r\n  multiplier,\r\n  liquidity,\r\n  poolMarginRatio\r\n) => {\r\n  if (\r\n    validateArgs(\r\n      tradersNetVolume,\r\n      price,\r\n      multiplier,\r\n      liquidity,\r\n      poolMarginRatio\r\n    )\r\n  ) {\r\n    return bg(tradersNetVolume)\r\n      .times(price)\r\n      .times(multiplier)\r\n      .times(poolMarginRatio)\r\n      .div(liquidity)\r\n      .abs();\r\n  } else {\r\n    const args = [\r\n      tradersNetVolume,\r\n      price,\r\n      multiplier,\r\n      liquidity,\r\n      poolMarginRatio,\r\n    ];\r\n    throw new Error(`calculateLiquidityUsed: invalid args: ${args}`);\r\n  }\r\n}\r\n\r\nexport const calculateFundingRate = (\r\n  tradersNetVolume,\r\n  price,\r\n  multiplier,\r\n  liquidity,\r\n  fundingRateCoefficient\r\n) => {\r\n  if (\r\n    validateArgs(\r\n      tradersNetVolume,\r\n      price,\r\n      multiplier,\r\n      liquidity,\r\n      fundingRateCoefficient\r\n    )\r\n  ) {\r\n    return bg(liquidity).eq(0) ? bg(0) : bg(tradersNetVolume)\r\n      .times(price)\r\n      // .times(price)\r\n      // .times(multiplier)\r\n      .times(multiplier)\r\n      .times(fundingRateCoefficient)\r\n      .div(liquidity);\r\n  } else {\r\n    const args = [\r\n      tradersNetVolume,\r\n      price,\r\n      multiplier,\r\n      liquidity,\r\n      fundingRateCoefficient\r\n    ];\r\n    throw new Error(`calculateFundingRate: invalid args: ${args}`);\r\n  }\r\n};\r\n\r\nexport const processFundingRate = (chainId, fundingRate) => {\r\n  const annualBlockCount = getAnnualBlockNumber(chainId);\r\n  //console.log(annualBlockCount);\r\n  return bg(fundingRate).times(annualBlockCount);\r\n};\r\n","import { bg, max, min } from '../utils'\r\n\r\nexport const calculateBTokenDynamicEquities = (bTokens) => {\r\n  //const dynamicEquities = bTokens.map((b) => bg(b.liquidity).times(b.price).times(b.discount).plus(b.pnl))\r\n  //const totalDynamicEquity = dynamicEquities.reduce((accum, d) => accum.plus(d), bg(0))\r\n  const totalDynamicEquity = bTokens.reduce((accum, b) => accum.plus(bg(b.liquidity).times(b.price).times(b.discount).plus(b.pnl)), bg(0))\r\n  return totalDynamicEquity\r\n}\r\n\r\nexport const isBToken0RatioValid = (bTokens, bTokenId, amount, bToken0Ratio) => {\r\n  bTokens[bTokenId].liquidity = bg(bTokens[bTokenId].liquidity).plus(amount)\r\n  const totalDynamicEquity = calculateBTokenDynamicEquities(bTokens)\r\n  const b = bTokens['0']\r\n  const dynamicEquity = bg(b.liquidity).times(b.price).times(b.discount).plus(b.pnl)\r\n  //console.log('estimatedBToken0Ratio',dynamicEquity.div(totalDynamicEquity).toString())\r\n  // use 1 as efficient\r\n  if (\r\n    !totalDynamicEquity.eq(0) &&\r\n    dynamicEquity.div(totalDynamicEquity).times('1').lt(bToken0Ratio)\r\n  ) {\r\n    return { success: false, error: 'Trader has insufficient bToken0' };\r\n  } else {\r\n    return { success: true };\r\n  }\r\n}\r\n\r\nexport const isPoolMarginRatioValid = (bTokens, bTokenId, amount, userLiquidity, symbols, poolMarginRatio) => {\r\n  if (bg(amount).gte(userLiquidity)) {\r\n    bTokens[bTokenId].liquidity = bg(bTokens[bTokenId].liquidity).minus(userLiquidity)\r\n  } else {\r\n    bTokens[bTokenId].liquidity = bg(bTokens[bTokenId].liquidity).minus(amount)\r\n  }\r\n  let totalDynamicEquity = calculateBTokenDynamicEquities(bTokens)\r\n  let totalCost = bg(0)\r\n  for (let i=0; i<symbols.length; i++) {\r\n    const s = symbols[i]\r\n    if (!bg(s.tradersNetVolume).eq(0)) {\r\n      const cost = bg(s.tradersNetVolume).times(s.price).times(s.multiplier)\r\n      totalDynamicEquity = totalDynamicEquity.plus(s.tradersNetCost).minus(cost)\r\n      totalCost = totalCost.plus(cost.abs())\r\n    }\r\n  }\r\n  //console.log(totalDynamicEquity.toString(), totalCost.toString())\r\n  if (\r\n    !totalCost.eq(0) &&\r\n    totalDynamicEquity.div(totalCost).times('1').lt(poolMarginRatio)\r\n  ) {\r\n    return { success: false, error: 'Trader has insufficient liquidity' };\r\n  } else {\r\n    return { success: true };\r\n  }\r\n}\r\n\r\n\r\nexport const calculateMaxRemovableLiquidity = (\r\n  bToken,\r\n  userLiquidity,\r\n  cost,\r\n  pnl,\r\n  restLiquidity,\r\n  minPoolMarginRatio,\r\n) => {\r\n  if (bg(cost).eq(0)) {\r\n    return userLiquidity;\r\n  } else {\r\n    return max(\r\n      min(\r\n        bToken.liquidity.minus(\r\n          minPoolMarginRatio\r\n            .times(cost)\r\n            .plus(pnl)\r\n            .minus(restLiquidity)\r\n            .div(bToken.price)\r\n            .div(bToken.discount)\r\n        ).times('0.98'),\r\n        userLiquidity\r\n      ),\r\n      bg(0)\r\n    );\r\n  }\r\n};","import { lTokenFactory, perpetualPoolFactory } from '../factory'\r\nimport { getPoolConfig, getFilteredPoolConfigList} from '../config'\r\nimport { bg, deriToNatural } from '../utils'\r\nimport { getNetworkName } from '../../utils'\r\nimport { calculateMaxRemovableLiquidity } from '../calculation'\r\nimport { databaseFactory } from '../../factory/contracts';\r\n\r\nexport const getLiquidityInfo = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  bTokenId,\r\n  useInfura,\r\n) => {\r\n  try {\r\n    const {lToken:lTokenAddress} = getPoolConfig(poolAddress, bTokenId)\r\n    const perpetualPool = perpetualPoolFactory(chainId, poolAddress, useInfura)\r\n    const lToken = lTokenFactory(chainId, lTokenAddress, useInfura);\r\n\r\n    const bTokenConfigList = getFilteredPoolConfigList(poolAddress, null, '0').sort((i, j) => parseInt(i.bTokenId) - parseInt(j.bTokenId))\r\n    const symbolConfigList = getFilteredPoolConfigList(poolAddress, '0').sort((i, j) => parseInt(i.symbolId) - parseInt(j.symbolId))\r\n    const bTokenIdList = bTokenConfigList.map((i) => i.bTokenId)\r\n    const symbolIdList = symbolConfigList.map((i) => i.symbolId)\r\n\r\n    const [parameterInfo, bTokenInfo, lTokenAsset ] = await Promise.all([\r\n      perpetualPool.getParameters(),\r\n      perpetualPool.getBToken(bTokenId),\r\n      lToken.getAsset(accountAddress, bTokenId),\r\n    ])\r\n    const { minPoolMarginRatio } = parameterInfo\r\n    let promises = []\r\n    for (let i=0; i<bTokenIdList.length; i++) {\r\n      promises.push(perpetualPool.getBToken(bTokenIdList[i]))\r\n    }\r\n    const bTokens = await Promise.all(promises)\r\n\r\n    promises = []\r\n    for (let i=0; i<symbolIdList.length; i++) {\r\n      promises.push(perpetualPool.getSymbol(symbolIdList[i]))\r\n    }\r\n    const symbols = await Promise.all(promises)\r\n\r\n    const cost = symbols.reduce((accum, s) => {\r\n        return accum.plus(bg(s.tradersNetVolume).times(s.price).times(s.multiplier).abs())\r\n    }, bg(0))\r\n    const totalPnl = symbols.reduce((accum, s) => {\r\n        return accum.plus(bg(s.tradersNetVolume).times(s.price).times(s.multiplier).minus(s.tradersNetCost))\r\n    }, bg(0))\r\n    const restLiquidity = bTokens.reduce((accum, b, index) => {\r\n      if (index === parseInt(bTokenId)) {\r\n        return accum.plus(b.pnl)\r\n      } else {\r\n        return accum.plus(bg(b.liquidity).times(b.price).times(b.discount).plus(b.pnl))\r\n      }\r\n    }, bg(0))\r\n\r\n    const { liquidity: poolLiquidity } = bTokenInfo;\r\n    const { liquidity, pnl, lastCumulativePnl } = lTokenAsset\r\n    const maxRemovableShares = calculateMaxRemovableLiquidity(bTokens[bTokenId], liquidity, cost, totalPnl, restLiquidity, minPoolMarginRatio)\r\n    const approximatePnl = pnl.plus(bg(bTokens[bTokenId].cumulativePnl).minus(lastCumulativePnl).times(liquidity))\r\n    //console.log(\"approximatePnl\", approximatePnl.toString())\r\n    return {\r\n      //totalSupply: lTokenTotalSupply.toString(),\r\n      poolLiquidity: poolLiquidity.toString(),\r\n      // shares: liquidity.toString(),\r\n      // shareValue: '1',\r\n      // maxRemovableShares: liquidity.toString()\r\n      shares: liquidity.toString(),\r\n      pnl: approximatePnl.toString(),\r\n      maxRemovableShares: maxRemovableShares.toString()\r\n    };\r\n  } catch (err) {\r\n    console.log(err)\r\n  }\r\n  return {\r\n    poolLiquidity: '',\r\n    shares: '',\r\n    pnl: '',\r\n    maxRemovableShares: '',\r\n  };\r\n};\r\n\r\nexport const getPoolLiquidity = async (chainId, poolAddress, bTokenId) => {\r\n  // use the dev database\r\n  const db = databaseFactory();\r\n  try {\r\n    const res = await db\r\n      .getValues([`${chainId}.${poolAddress}.liquidity${bTokenId}`])\r\n      .catch((err) => console.log('getPoolLiquidity', err));\r\n    if (res) {\r\n      const [liquidity] = res;\r\n      return {\r\n        liquidity: deriToNatural(liquidity).toString(),\r\n        symbol:'',\r\n      };\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n  return {\r\n    liquidity: '',\r\n    symbol:'',\r\n  };\r\n};\r\n\r\nexport const getPoolInfoApy = async (chainId, poolAddress, bTokenId) => {\r\n  const db = databaseFactory(true);\r\n  try {\r\n    const poolNetwork = getNetworkName(chainId);\r\n    const res = await db\r\n      .getValues([\r\n        `${poolNetwork}.${poolAddress}.apy${bTokenId}`,\r\n        `${poolNetwork}.${poolAddress}.volume.1h`,\r\n        `${poolNetwork}.${poolAddress}.volume.24h`,\r\n      ])\r\n      .catch((err) => console.log('getPoolInfoApy', err));\r\n    if (res) {\r\n      const [apy, volume1h, volume24h] = res;\r\n      return {\r\n        apy: deriToNatural(apy).toString(),\r\n        volume1h: deriToNatural(volume1h).toString(),\r\n        volume24h: deriToNatural(volume24h).toString(),\r\n      };\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};","import { getFilteredPoolConfigList, getPoolConfig } from '../config'\r\nimport { perpetualPoolRouterFactory, perpetualPoolFactory, lTokenFactory } from '../factory'\r\nimport { getOracleInfo } from '../utils'\r\nimport { isBToken0RatioValid, isPoolMarginRatioValid } from '../calculation'\r\n\r\nexport const addLiquidity = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  amount,\r\n  bTokenId,\r\n) => {\r\n   const {router:routerAddress} = getPoolConfig(poolAddress, bTokenId)\r\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress)\r\n   const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\r\n   const bTokenConfigList = getFilteredPoolConfigList(poolAddress, null, '0').sort((i, j) => parseInt(i.bTokenId) - parseInt(j.bTokenId))\r\n   const bTokenIdList = bTokenConfigList.map((i) => i.bTokenId)\r\n   let promises = []\r\n   for (let i=0; i<bTokenIdList.length; i++) {\r\n    promises.push(perpetualPool.getBToken(bTokenIdList[i]))\r\n   }\r\n   const bTokens = await Promise.all(promises)\r\n   const { minBToken0Ratio } = await perpetualPool.getParameters();\r\n   const validation = isBToken0RatioValid(bTokens, bTokenId, amount, minBToken0Ratio)\r\n   let res\r\n   if (validation.success) {\r\n    try {\r\n      const tx = await perpetualPoolRouter.addLiquidity(accountAddress, bTokenId, amount);\r\n      res = { success: true, transaction: tx };\r\n    } catch (err) {\r\n      res = { success: false, error: err};\r\n    }\r\n   } else {\r\n      res = { success: false, error: validation.error};\r\n   }\r\n   return res\r\n}\r\n\r\nexport const removeLiquidity = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  amount,\r\n  bTokenId,\r\n  isMaximum=false,\r\n) => {\r\n   const {router:routerAddress} = getPoolConfig(poolAddress, bTokenId)\r\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress)\r\n   const {lToken:lTokenAddress} = getPoolConfig(poolAddress, bTokenId)\r\n   const perpetualPool = perpetualPoolFactory(chainId, poolAddress)\r\n   const lToken = lTokenFactory(chainId, lTokenAddress);\r\n   const lTokenAsset = await lToken.getAsset(accountAddress, bTokenId)\r\n  const { liquidity:userLiquidity } = lTokenAsset\r\n   const bTokenConfigList = getFilteredPoolConfigList(poolAddress, null, '0').sort((i, j) => parseInt(i.bTokenId) - parseInt(j.bTokenId))\r\n   const bTokenIdList = bTokenConfigList.map((i) => i.bTokenId)\r\n   let promises = []\r\n   for (let i=0; i<bTokenIdList.length; i++) {\r\n    promises.push(perpetualPool.getBToken(bTokenIdList[i]))\r\n   }\r\n   const bTokens = await Promise.all(promises)\r\n   const symbolConfigList = getFilteredPoolConfigList(poolAddress, '0').sort((i, j) => parseInt(i.symbolId) - parseInt(j.symbolId))\r\n   let symbolIdList = symbolConfigList.map((i) => i.symbolId)\r\n   promises = []\r\n   for (let i=0; i<symbolIdList.length; i++) {\r\n     promises.push(perpetualPool.getSymbol(symbolIdList[i]))\r\n   }\r\n   const symbols = await Promise.all(promises)\r\n   const { minPoolMarginRatio } = await perpetualPool.getParameters();\r\n   const validation = isPoolMarginRatioValid(bTokens, bTokenId, amount, userLiquidity, symbols, minPoolMarginRatio)\r\n   let res\r\n   if (validation.success) {\r\n     try {\r\n       const tx = await perpetualPoolRouter.removeLiquidity(accountAddress, bTokenId, amount, isMaximum);\r\n       res = { success: true, transaction: tx };\r\n     } catch (err) {\r\n       res = { success: false, error: err};\r\n     }\r\n   } else {\r\n    res = { success: false, error: validation.error };\r\n   }\r\n   return res\r\n}\r\n\r\nexport const addLiquidityWithPrices = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  amount,\r\n  bTokenId,\r\n) => {\r\n   const {router:routerAddress} = getPoolConfig(poolAddress, bTokenId)\r\n   const symbolList = getFilteredPoolConfigList(poolAddress, '0').sort((i, j) => parseInt(i.symbolId) - parseInt(j.symbolId)).map(c => c.symbolId)\r\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress)\r\n   const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\r\n   const bTokenConfigList = getFilteredPoolConfigList(poolAddress, null, '0').sort((i, j) => parseInt(i.bTokenId) - parseInt(j.bTokenId))\r\n   const bTokenIdList = bTokenConfigList.map((i) => i.bTokenId)\r\n   let promises = []\r\n   for (let i=0; i<bTokenIdList.length; i++) {\r\n    promises.push(perpetualPool.getBToken(bTokenIdList[i]))\r\n   }\r\n   const bTokens = await Promise.all(promises)\r\n   const { minBToken0Ratio } = await perpetualPool.getParameters();\r\n   const validation = isBToken0RatioValid(bTokens, bTokenId, amount, minBToken0Ratio)\r\n   let res\r\n   if (validation.success) {\r\n    try {\r\n      const promises = symbolList.map(async(s) => {\r\n        return await getOracleInfo(poolAddress, s)\r\n      })\r\n      const prices = await Promise.all(promises)\r\n      const priceInfos = prices.map((p, index) => {\r\n        return [symbolList[index], p.timestamp, p.price, parseInt(p.v).toString(), p.r, p.s]\r\n      })\r\n      const tx = await perpetualPoolRouter.addLiquidityWithPrices(accountAddress, bTokenId, amount, priceInfos);\r\n      res = { success: true, transaction: tx };\r\n    } catch (err) {\r\n      res = { success: false, error: err};\r\n    }\r\n   } else {\r\n    res = { success: false, error: validation.error };\r\n   }\r\n   return res\r\n}\r\n\r\nexport const removeLiquidityWithPrices = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  amount,\r\n  bTokenId,\r\n  isMaximum = false,\r\n) => {\r\n   const {router:routerAddress, lToken:lTokenAddress} = getPoolConfig(poolAddress, bTokenId)\r\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress)\r\n   const perpetualPool = perpetualPoolFactory(chainId, poolAddress)\r\n\r\n   const lToken = lTokenFactory(chainId, lTokenAddress);\r\n   const lTokenAsset = await lToken.getAsset(accountAddress, bTokenId)\r\n   const { liquidity:userLiquidity } = lTokenAsset\r\n   const bTokenConfigList = getFilteredPoolConfigList(poolAddress, null, '0').sort((i, j) => parseInt(i.bTokenId) - parseInt(j.bTokenId))\r\n   const bTokenIdList = bTokenConfigList.map((i) => i.bTokenId)\r\n   let promises = []\r\n   for (let i=0; i<bTokenIdList.length; i++) {\r\n    promises.push(perpetualPool.getBToken(bTokenIdList[i]))\r\n   }\r\n   const bTokens = await Promise.all(promises)\r\n   promises = []\r\n\r\n   const symbolList = getFilteredPoolConfigList(poolAddress, '0').sort((i, j) => parseInt(i.symbolId) - parseInt(j.symbolId)).map(c => c.symbolId)\r\n   for (let i=0; i<symbolList.length; i++) {\r\n     promises.push(perpetualPool.getSymbol(symbolList[i]))\r\n   }\r\n   const symbols = await Promise.all(promises)\r\n   const { minPoolMarginRatio } = await perpetualPool.getParameters();\r\n\r\n   const validation = isPoolMarginRatioValid(bTokens, bTokenId, amount, userLiquidity, symbols, minPoolMarginRatio)\r\n   let res\r\n   if (validation.success) {\r\n     try {\r\n       promises = symbolList.map(async(s) => {\r\n         return await getOracleInfo(poolAddress, s)\r\n       })\r\n       const prices = await Promise.all(promises)\r\n       const priceInfos = prices.map((p, index) => {\r\n         return [symbolList[index], p.timestamp, p.price, parseInt(p.v).toString(), p.r, p.s]\r\n       })\r\n       const tx = await perpetualPoolRouter.removeLiquidityWithPrices(accountAddress, bTokenId, amount, priceInfos, isMaximum);\r\n       res = { success: true, transaction: tx };\r\n     } catch (err) {\r\n       res = { success: false, error: err};\r\n     }\r\n   } else {\r\n    res = { success: false, error: validation.error };\r\n   }\r\n   return res\r\n}\r\n","export const priceCache = (function(){\r\n  let _prices = {}\r\n  return {\r\n    get(poolAddress, symbolId) {\r\n      const key = `${poolAddress}.${symbolId}`\r\n      if (Object.keys(_prices).includes(key)) {\r\n        const [price, ] = _prices[key].split('|')\r\n        //if (parseInt(timestamp) - Date.now() < 10000) {\r\n          return price\r\n        //}\r\n      }\r\n      console.log('please init priceCache first')\r\n    },\r\n    // update(chainId, poolAddress, symbolId) {\r\n    //   // place holder\r\n    // },\r\n    set(poolAddress, symbolId, val) {\r\n      if (!isNaN(parseFloat(val))) {\r\n        const timestamp = Date.now().toString()\r\n        _prices[`${poolAddress}.${symbolId}`] = `${val}|${timestamp}`\r\n      }\r\n    }\r\n  }\r\n})()\r\n\r\nexport const fundingRateCache = (function () {\r\n  let resourceMap = {};\r\n  return {\r\n    get(chainId, contractAddress, symbolId) {\r\n      const key = `${chainId}.${contractAddress}.${symbolId}`;\r\n      if (Object.keys(resourceMap).includes(key)) {\r\n        return resourceMap[key];\r\n      }\r\n      console.log(`fundingRateCache: key is not in exist: ${key}`);\r\n      return undefined;\r\n    },\r\n    set(chainId, contractAddress, symbolId, resource) {\r\n      const key = `${chainId}.${contractAddress}.${symbolId}`;\r\n      resourceMap[key] = resource;\r\n    },\r\n  };\r\n})();","import { perpetualPoolFactory, bTokenFactory, pTokenFactory } from '../factory';\r\nimport { getFilteredPoolConfigList, getPoolConfig} from '../config'\r\nimport {\r\n  calculateEntryPrice,\r\n  calculateLiquidationPrice,\r\n  calculateFundingRate,\r\n  processFundingRate,\r\n} from '../calculation';\r\nimport { getOraclePrice, bg, min, max } from '../utils'\r\nimport { fundingRateCache, priceCache } from '../api/api_globals';\r\n\r\nexport const getSpecification = async (\r\n  chainId,\r\n  poolAddress,\r\n  bTokenId,\r\n  symbolId,\r\n  useInfura,\r\n) => {\r\n  try {\r\n    const {symbol, bTokenSymbol } = getPoolConfig(poolAddress, bTokenId, symbolId)\r\n    const perpetualPool = perpetualPoolFactory(chainId, poolAddress, useInfura);\r\n    const [symbolInfo, parameterInfo] = await Promise.all([\r\n      perpetualPool.getSymbol(symbolId),\r\n      perpetualPool.getParameters(),\r\n    ])\r\n    const { multiplier, feeRatio, fundingRateCoefficient} = symbolInfo\r\n    const {\r\n      minPoolMarginRatio,\r\n      minInitialMarginRatio,\r\n      minMaintenanceMarginRatio,\r\n      minLiquidationReward,\r\n      maxLiquidationReward,\r\n      liquidationCutRatio,\r\n      protocolFeeCollectRatio,\r\n    } = parameterInfo\r\n    return {\r\n      symbol: symbol,\r\n      bSymbol: bTokenSymbol,\r\n      multiplier: multiplier.toString(),\r\n      feeRatio: feeRatio.toString(),\r\n      fundingRateCoefficient: fundingRateCoefficient.toString(),\r\n      minPoolMarginRatio: minPoolMarginRatio.toString(),\r\n      minInitialMarginRatio: minInitialMarginRatio.toString(),\r\n      minMaintenanceMarginRatio: minMaintenanceMarginRatio.toString(),\r\n      //minAddLiquidity: minAddLiquidity.toString(),\r\n      //redemptionFeeRatio: redemptionFeeRatio.toString(),\r\n      minLiquidationReward: minLiquidationReward.toString(),\r\n      maxLiquidationReward: maxLiquidationReward.toString(),\r\n      liquidationCutRatio: liquidationCutRatio.toString(),\r\n      protocolFeeCollectRatio: protocolFeeCollectRatio.toString(),\r\n    }\r\n  } catch (err) {\r\n    console.log(err)\r\n  }\r\n  return {\r\n    symbol: '',\r\n    bSymbol: '',\r\n    multiplier: '',\r\n    feeRatio: '',\r\n    fundingRateCoefficient: '',\r\n    minPoolMarginRatio: '',\r\n    minInitialMarginRatio: '',\r\n    minMaintenanceMarginRatio: '',\r\n    minLiquidationReward: '',\r\n    maxLiquidationReward: '',\r\n    liquidationCutRatio: '',\r\n    protocolFeeCollectRatio: '',\r\n  }\r\n};\r\n\r\nexport const getPositionInfo = async (chainId, poolAddress, accountAddress, symbolId, useInfura) => {\r\n  try {\r\n    const bTokenConfigList = getFilteredPoolConfigList(poolAddress, null, symbolId).sort((i, j) => parseInt(i.bTokenId) - parseInt(j.bTokenId))\r\n    const symbolConfigList = getFilteredPoolConfigList(poolAddress, '0').sort((i, j) => parseInt(i.symbolId) - parseInt(j.symbolId))\r\n    const bTokenIdList = bTokenConfigList.map((i) => i.bTokenId)\r\n    const symbolIdList = symbolConfigList.map((i) => i.symbolId)\r\n    const symbolList = symbolConfigList.map((i) => i.symbol)\r\n    //console.log('bTokenList', bTokenList)\r\n    const perpetualPool = perpetualPoolFactory(chainId, poolAddress, useInfura);\r\n    const {pToken: pTokenAddress } = getPoolConfig(poolAddress, null, symbolId)\r\n    const pToken = pTokenFactory(chainId, pTokenAddress, useInfura);\r\n    const [symbolInfo, parameterInfo, positionInfo, margins, positions ] = await Promise.all([\r\n      perpetualPool.getSymbol(symbolId),\r\n      perpetualPool.getParameters(),\r\n      pToken.getPosition(accountAddress, symbolId),\r\n      pToken.getMargins(accountAddress),\r\n      pToken.getPositions(accountAddress),\r\n      //pToken.getMargin(accountAddress, symbolId),\r\n    ])\r\n    const { volume, cost } = positionInfo\r\n    const { multiplier } = symbolInfo\r\n    const {\r\n      minInitialMarginRatio,\r\n      minMaintenanceMarginRatio,\r\n    } = parameterInfo\r\n    let promises = []\r\n    for (let i=0; i<bTokenIdList.length; i++) {\r\n      promises.push(perpetualPool.getBToken(bTokenIdList[i]))\r\n    }\r\n    const bTokens = await Promise.all(promises)\r\n    const margin = bTokens.reduce((accum, a, index) => {\r\n      return accum.plus(bg(a.price).times(a.discount).times(margins[index]))\r\n    }, bg(0))\r\n\r\n    promises = []\r\n    for (let i=0; i<symbolIdList.length; i++) {\r\n      promises.push(perpetualPool.getSymbol(symbolIdList[i]))\r\n    }\r\n    const symbols = await Promise.all(promises)\r\n    promises = []\r\n    for (let i=0; i<symbolList.length; i++) {\r\n      promises.push(getOraclePrice(chainId, symbolList[i], useInfura))\r\n    }\r\n    const symbolPrices = await Promise.all(promises)\r\n    const price = symbolPrices[symbolId]\r\n    priceCache.set(poolAddress, symbolId, price)\r\n    const marginHeld = symbols.reduce((accum, s, index) => {\r\n      return accum.plus(bg(symbolPrices[index]).times(s.multiplier).times(positions[index].volume).times(minInitialMarginRatio).abs())\r\n    }, bg(0))\r\n    const marginHeldBySymbol = bg(volume).abs().times(multiplier).times(symbolPrices[symbolId]).times(minInitialMarginRatio)\r\n    //console.log('margin', margin.toString(), marginHeld.toString())\r\n    //\r\n    //const unrealizedPnl = bg(positions[symbolId].volume).times(price).times(multiplier).minus(positions[symbolId].cost)\r\n    const unrealizedPnl = symbols.reduce((accum, s, index) => {\r\n      return accum.plus(bg(symbolPrices[index]).times(s.multiplier).times(positions[index].volume).minus(positions[index].cost))\r\n    }, bg(0))\r\n    const unrealizedPnlList = symbols.map((s, index) => {\r\n      return [s.symbol, bg(symbolPrices[index]).times(s.multiplier).times(positions[index].volume).minus(positions[index].cost).toString()]\r\n    })\r\n\r\n    const totalCost = positions.reduce((accum, a) => {\r\n      return accum.plus(bg(a.cost))\r\n    }, bg(0))\r\n    const dynamicCost = symbols.reduce((accum, s, index) => {\r\n      if (index !== parseInt(symbolId)) {\r\n        return accum.plus(bg(positions[index].volume).times(symbolPrices[index]).times(s.multiplier))\r\n      } else {\r\n        return accum\r\n      }\r\n    }, bg(0))\r\n    //console.log('cost', costTotal.toString())\r\n  return {\r\n      price: price,\r\n      volume: volume.toString(),\r\n      averageEntryPrice: calculateEntryPrice(volume, cost, multiplier).toString(),\r\n      margin: margin.toString(),\r\n      marginHeld: marginHeld.toString(),\r\n      marginHeldBySymbol: marginHeldBySymbol.toString(),\r\n      unrealizedPnl: unrealizedPnl.toString(),\r\n      unrealizedPnlList,\r\n      liquidationPrice: calculateLiquidationPrice(\r\n        volume,\r\n        margin,\r\n        totalCost,\r\n        dynamicCost,\r\n        multiplier,\r\n        minMaintenanceMarginRatio\r\n      ).toString(),\r\n    };\r\n  } catch(err) {\r\n    console.log(err)\r\n  }\r\n  return {\r\n    volume: '',\r\n    averageEntryPrice: '',\r\n    margin: '',\r\n    marginHeld: '',\r\n    unrealizedPnl: '',\r\n    liquidationPrice: '',\r\n  };\r\n}\r\n\r\nexport const getWalletBalance = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  bTokenId,\r\n  useInfura,\r\n) => {\r\n  const { bToken: bTokenAddress } = getPoolConfig(poolAddress, bTokenId);\r\n  const balance = await bTokenFactory(chainId, bTokenAddress, useInfura).balanceOf(accountAddress)\r\n  return balance.toString()\r\n}\r\n\r\nexport const isUnlocked = async (chainId, poolAddress, accountAddress, bTokenId, useInfura) => { \r\n  const { bToken: bTokenAddress } = getPoolConfig(poolAddress, bTokenId);\r\n  const bToken = await bTokenFactory(chainId, bTokenAddress, useInfura)\r\n  return bToken.isUnlocked(accountAddress, poolAddress)\r\n}\r\n\r\nexport const getEstimatedFee = async (chainId, poolAddress, volume, symbolId, useInfura) => {\r\n  let price = priceCache.get(poolAddress, symbolId)\r\n  const {symbol} = getPoolConfig(poolAddress, null, symbolId)\r\n  if (!price) {\r\n    //price = await getOraclePrice(poolAddress, symbolId)\r\n    price = await getOraclePrice(chainId, symbol, useInfura)\r\n    priceCache.set(poolAddress, symbolId, price)\r\n  }\r\n  let cache = fundingRateCache.get(chainId, poolAddress, symbolId)\r\n  if (!cache || !cache.multiplier) {\r\n    await _getFundingRate(chainId, poolAddress, symbolId, useInfura)\r\n    cache = fundingRateCache.get(chainId, poolAddress, symbolId)\r\n  }\r\n  const { multiplier, feeRatio } = cache;\r\n  //console.log(volume, price, multiplier, feeRatio)\r\n  return bg(volume).abs().times(price).times(multiplier).times(feeRatio).toString()\r\n}\r\n\r\nexport const getEstimatedMargin = async(\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  volume,\r\n  leverage,\r\n  symbolId,\r\n  useInfura,\r\n) => {\r\n  const {symbol} = getPoolConfig(poolAddress, null, symbolId)\r\n  const perpetualPool = perpetualPoolFactory(chainId, poolAddress, useInfura);\r\n  const [price, symbolInfo ] = await Promise.all([\r\n    //getOraclePrice(poolAddress, symbolId),\r\n    getOraclePrice(chainId, symbol, useInfura),\r\n    perpetualPool.getSymbol(symbolId),\r\n  ])\r\n  priceCache.set(poolAddress, symbolId, price)\r\n  const {multiplier} = symbolInfo\r\n  //console.log('m',multiplier.toString())\r\n  return bg(volume).abs().times(price).times(multiplier).div(bg(leverage)).toString()\r\n}\r\n\r\nexport const getFundingRateCache = async(chainId, poolAddress, symbolId) => {\r\n  return fundingRateCache.get(chainId, poolAddress, symbolId)\r\n}\r\n\r\nconst _getFundingRate = async(chainId, poolAddress, symbolId, useInfura) => {\r\n  const perpetualPool = perpetualPoolFactory(chainId, poolAddress, useInfura)\r\n  const poolConfigList = getFilteredPoolConfigList(poolAddress, null, symbolId).sort((i, j) => parseInt(i.bTokenId) - parseInt(j.bTokenId))\r\n  const {symbol} = getPoolConfig(poolAddress, null, symbolId)\r\n  let bTokenIdList = poolConfigList.map((i) => i.bTokenId)\r\n  let promiseList = []\r\n  for (let i=0; i<bTokenIdList.length; i++) {\r\n    promiseList.push(perpetualPool.getBToken(i))\r\n  }\r\n  const bTokenInfoList = await Promise.all(promiseList)\r\n  const liquidity = bTokenInfoList.reduce((accum, i) => accum.plus(bg(i.liquidity).times(i.price).times(i.discount).plus(i.pnl)), bg(0))\r\n  //const pnl = bTokenInfoList.reduce((accum, i) => accum.plus(i.pnl), bg(0))\r\n  //console.log('pnl', pnl.toString())\r\n\r\n  const [price, symbolInfo, parameterInfo ] = await Promise.all([\r\n    //getOraclePrice(poolAddress, symbolId),\r\n    getOraclePrice(chainId, symbol, useInfura),\r\n    perpetualPool.getSymbol(symbolId),\r\n    perpetualPool.getParameters(),\r\n  ])\r\n  priceCache.set(poolAddress, symbolId, price)\r\n  const { multiplier, fundingRateCoefficient, tradersNetVolume, feeRatio } = symbolInfo;\r\n  const { minPoolMarginRatio } = parameterInfo;\r\n  const fundingRateArgs = [\r\n    tradersNetVolume,\r\n    price,\r\n    multiplier,\r\n    liquidity,\r\n    fundingRateCoefficient,\r\n  ]\r\n  const fundingRatePerBlock = calculateFundingRate(...fundingRateArgs)\r\n  const fundingRate = processFundingRate(chainId, fundingRatePerBlock)\r\n  // const liquidityUsedArgs = [\r\n  //   tradersNetVolume,\r\n  //   price,\r\n  //   multiplier,\r\n  //   liquidity,\r\n  //   minPoolMarginRatio,\r\n  // ]\r\n  const symbolConfigList = getFilteredPoolConfigList(poolAddress, '0').sort((i, j) => parseInt(i.symbolId) - parseInt(j.symbolId))\r\n  let symbolIdList = symbolConfigList.map((i) => i.symbolId)\r\n  let promises = []\r\n  for (let i=0; i<symbolIdList.length; i++) {\r\n    promises.push(perpetualPool.getSymbol(symbolIdList[i]))\r\n  }\r\n  const symbols = await Promise.all(promises)\r\n  //console.log('margin', margin.toString(), marginHeld.toString())\r\n  const liquidityUsedInAmount = symbols.reduce((accum, a) => {\r\n    return accum.plus(bg(a.tradersNetVolume).times(a.price).times(a.multiplier).times(minPoolMarginRatio).abs())\r\n  }, bg(0))\r\n\r\n  //const liquidityUsed = liquidityUsedInAmount.div(liquidity)\r\n  const res = {\r\n    price,\r\n    multiplier: multiplier.toString(),\r\n    feeRatio: feeRatio.toString(),\r\n    tradersNetVolume: tradersNetVolume.toString(),\r\n    liquidity: liquidity.toString(),\r\n    //pnl: pnl.toString(),\r\n    fundingRateCoefficient: fundingRateCoefficient.toString(),\r\n    minPoolMarginRatio: minPoolMarginRatio.toString(),\r\n    fundingRatePerBlock: fundingRatePerBlock,\r\n    fundingRate: fundingRate,\r\n    liquidityUsed: liquidityUsedInAmount.div(liquidity)\r\n  }\r\n  fundingRateCache.set(chainId, poolAddress, symbolId, res)\r\n  return res\r\n}\r\n\r\nexport const getFundingRate = async (chainId, poolAddress, symbolId, useInfura) => {\r\n  try {\r\n    const res = await _getFundingRate(chainId, poolAddress, symbolId, useInfura)\r\n    const { fundingRate, fundingRatePerBlock, liquidity, tradersNetVolume } = res\r\n    return {\r\n      fundingRate0: fundingRate.times(100).toString(),\r\n      fundingRatePerBlock: fundingRatePerBlock.toString(),\r\n      liquidity: liquidity.toString(),\r\n      volume: '-',\r\n      tradersNetVolume: tradersNetVolume.toString()\r\n    };\r\n  } catch(err) {\r\n    console.log(err)\r\n  }\r\n  return {\r\n    fundingRate0: '',\r\n    fundingRatePerBlock: '',\r\n    liquidity: '',\r\n    volume: '',\r\n    tradersNetVolume: '',\r\n  };\r\n}\r\n\r\nexport const getEstimatedFundingRate = async (\r\n  chainId,\r\n  poolAddress,\r\n  newNetVolume,\r\n  symbolId,\r\n  useInfura,\r\n) => {\r\n  try {\r\n    let res = fundingRateCache.get(chainId, poolAddress, symbolId)\r\n    if (!res) {\r\n      res = await _getFundingRate(chainId, poolAddress, symbolId, useInfura)\r\n    }\r\n    const args = [\r\n      bg(res.tradersNetVolume).plus(newNetVolume).toString(),\r\n      res.price,\r\n      res.multiplier,\r\n      res.liquidity,\r\n      res.fundingRateCoefficient,\r\n    ]\r\n    let fundingRate1 = calculateFundingRate(...args)\r\n    fundingRate1 = processFundingRate(chainId, fundingRate1)\r\n    return {\r\n      fundingRate1: fundingRate1.times(100).toString()\r\n    }\r\n  } catch(err) {\r\n    console.log(err)\r\n  }\r\n  return {\r\n    fundingRate1: '',\r\n  }\r\n}\r\n\r\nexport const getLiquidityUsed = async (\r\n  chainId,\r\n  poolAddress,\r\n  symbolId,\r\n  useInfura,\r\n) => {\r\n  try {\r\n    let res = fundingRateCache.get(chainId, poolAddress, symbolId)\r\n    if (!res) {\r\n      res = await _getFundingRate(chainId, poolAddress, symbolId, useInfura)\r\n    }\r\n    return {\r\n      liquidityUsed0: res.liquidityUsed.times(100).toString(),\r\n    };\r\n  } catch(err) {\r\n    console.log(err)\r\n  }\r\n  return {\r\n    liquidityUsed0: '',\r\n  }\r\n};\r\n\r\nexport const getEstimatedLiquidityUsed = async (\r\n  chainId,\r\n  poolAddress,\r\n  newNetVolume,\r\n  symbolId,\r\n  useInfura,\r\n) => {\r\n  try {\r\n    let res = fundingRateCache.get(chainId, poolAddress, symbolId)\r\n    if (!res) {\r\n      res = await _getFundingRate(chainId, poolAddress, symbolId, useInfura)\r\n    }\r\n    const perpetualPool = perpetualPoolFactory(chainId, poolAddress, useInfura)\r\n    // const {pToken: pTokenAddress } = getPoolConfig(poolAddress, null, symbolId)\r\n    // const pToken = pTokenFactory(chainId, pTokenAddress, useInfura);\r\n    // const { volume } = pToken.getPosition(accountAddress, symbolId);\r\n    const symbolConfigList = getFilteredPoolConfigList(poolAddress, '0').sort((i, j) => parseInt(i.symbolId) - parseInt(j.symbolId))\r\n    let symbolIdList = symbolConfigList.map((i) => i.symbolId)\r\n    let promises = []\r\n    for (let i=0; i<symbolIdList.length; i++) {\r\n      promises.push(perpetualPool.getSymbol(symbolIdList[i]))\r\n    }\r\n    const symbols = await Promise.all(promises)\r\n    let liquidityUsed0 = symbols.reduce((accum, a, index) => {\r\n      if (index === parseInt(symbolId)) {\r\n        return accum.plus(bg(a.price).times(a.multiplier).times(a.tradersNetVolume.plus(newNetVolume)).abs())\r\n      } else {\r\n        return accum.plus(bg(a.price).times(a.multiplier).times(a.tradersNetVolume).abs())\r\n      }\r\n    }, bg(0))\r\n    //liquidityUsed0 = liquidityUsed0.times(res.minPoolMarginRatio)\r\n    //const liquidityUsed = bg(newNetVolume).times(res.price).times(res.multiplier).times(res.minPoolMarginRatio).div(res.liquidity)\r\n    const liquidityUsed1 = liquidityUsed0.times(res.minPoolMarginRatio).div(res.liquidity)\r\n    return {\r\n      liquidityUsed1: liquidityUsed1.times(100).toString()\r\n    }\r\n  } catch(err) {\r\n    console.log(err)\r\n  }\r\n  return {\r\n    liquidityUsed1: '',\r\n  }\r\n}\r\n\r\n\r\nexport const getPoolBTokensBySymbolId = async(chainId, poolAddress, accountAddress, symbolId, useInfura) => {\r\n  try {\r\n    const bTokensConfigList = getFilteredPoolConfigList(poolAddress, null, symbolId).sort((i, j) => parseInt(i.bTokenId) - parseInt(j.bTokenId))\r\n    const symbolsConfigList = getFilteredPoolConfigList(poolAddress, '0').sort((i, j) => parseInt(i.symbolId) - parseInt(j.symbolId))\r\n    const perpetualPool = perpetualPoolFactory(chainId, poolAddress, useInfura)\r\n    const {pToken: pTokenAddress } = getPoolConfig(poolAddress, null, symbolId)\r\n    const pToken = pTokenFactory(chainId, pTokenAddress, useInfura);\r\n    let bTokenList = bTokensConfigList.map((i) => {\r\n      return {bTokenId: i.bTokenId, bTokenSymbol: i.bTokenSymbol, bTokenAddress: i.bToken}\r\n    })\r\n    let promiseList = []\r\n    for (let i=0; i<bTokenList.length; i++) {\r\n      promiseList.push(bTokenFactory(chainId, bTokenList[i].bTokenAddress, useInfura).balanceOf(accountAddress))\r\n    }\r\n    const resultList = await Promise.all(promiseList)\r\n    for (let i=0; i<bTokenList.length; i++) {\r\n      bTokenList[i].walletBalance = resultList[i].toString()\r\n    }\r\n\r\n    let bTokenIdList = bTokensConfigList.map((i) => i.bTokenId)\r\n    let symbolIdList = symbolsConfigList.map((i) => i.symbolId)\r\n    const [margins, positions, parameterInfo] = await Promise.all([\r\n      pToken.getMargins(accountAddress),\r\n      pToken.getPositions(accountAddress),\r\n      perpetualPool.getParameters(),\r\n    ]);\r\n    const { minInitialMarginRatio } = parameterInfo;\r\n\r\n    let promises = []\r\n    for (let i=0; i<bTokenIdList.length; i++) {\r\n      promises.push(perpetualPool.getBToken(bTokenIdList[i]))\r\n    }\r\n    const bTokens = await Promise.all(promises)\r\n    const margin = bTokens.reduce((accum, a, index) => {\r\n      return accum.plus(bg(a.price).times(a.discount).times(margins[index]))\r\n    }, bg(0))\r\n    //console.log('margin', margin.toString())\r\n\r\n    promises = []\r\n    for (let i=0; i<symbolIdList.length; i++) {\r\n      promises.push(perpetualPool.getSymbol(symbolIdList[i]))\r\n    }\r\n    const symbols = await Promise.all(promises)\r\n    const marginHeld = symbols.reduce((accum, a, index) => {\r\n      return accum.plus(bg(a.price).times(a.multiplier).times(positions[index].volume).abs().times(minInitialMarginRatio))\r\n    }, bg(0))\r\n    //console.log('marginHeld', marginHeld.toString())\r\n\r\n    const pnl = symbols.reduce((accum, a, index) => {\r\n      return accum.plus(bg(a.price).times(a.multiplier).times(positions[index].volume).minus(positions[index].cost))\r\n    }, bg(0))\r\n    //console.log('pnl', pnl.toString())\r\n\r\n    bTokenList = bTokenList.map((i, index) => {\r\n      if(!isNaN(parseFloat(bTokens[index].price)) || bTokens[index].price !== '0') {\r\n        i.availableBalance = max(min(margin.minus(marginHeld).plus(pnl).div(bTokens[index].price).div(bTokens[index].discount), margins[index]), bg(0)).toString()\r\n      } else {\r\n        i.availableBalance = '-'\r\n      }\r\n      return i\r\n    })\r\n    return bTokenList\r\n  } catch(err) {\r\n    console.log(err)\r\n  }\r\n  return []\r\n}\r\n","import { deriToNatural } from '../utils';\r\nimport { perpetualPoolFactory } from '../factory';\r\nimport { getFilteredPoolConfigList, getPoolConfig} from '../config'\r\n\r\nimport { getRestServerConfig, DeriEnv } from '../../config';\r\n\r\nconst getHttpBase = () => {\r\n  return getRestServerConfig(DeriEnv.get());\r\n};\r\n\r\nconst fetchJson = async (url) => {\r\n  const resp = await fetch(url);\r\n  return await resp.json();\r\n};\r\n\r\nconst processTradeEvent = async (\r\n  perpetualPool,\r\n  info,\r\n  blockNumber,\r\n  txHash,\r\n  multiplier,\r\n  feeRatio\r\n) => {\r\n  const tradeVolume = deriToNatural(info.tradeVolume);\r\n  const timeStamp = await perpetualPool._getTimeStamp(blockNumber);\r\n\r\n  const direction = tradeVolume.gt(0) ? 'LONG' : 'SHORT';\r\n  const price = deriToNatural(info.price);\r\n  const time = `${+timeStamp.timestamp}000`;\r\n  const symbolId = info.symbolId\r\n  const transactionFee = perpetualPool._calculateFee(\r\n    tradeVolume,\r\n    price,\r\n    multiplier[parseInt(symbolId)],\r\n    feeRatio[parseInt(symbolId)]\r\n  );\r\n  const notional = tradeVolume.abs().times(price).times(multiplier[parseInt(symbolId)]);\r\n  const volume = tradeVolume.abs();\r\n\r\n  const res = {\r\n    direction,\r\n    //baseToken: bTokenSymbol,\r\n    symbolId,\r\n    price: price.toString(),\r\n    notional: notional.toString(),\r\n    volume: volume.toString(),\r\n    transactionFee: transactionFee.toString(),\r\n    transactionHash: txHash.toString(),\r\n    time,\r\n  };\r\n  return res;\r\n};\r\nconst getTradeHistoryOnline = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  symbolId,\r\n  fromBlock\r\n) => {\r\n\r\n  const symbolConfigList = getFilteredPoolConfigList(poolAddress, '0').sort((i, j) => parseInt(i.symbolId) - parseInt(j.symbolId))\r\n  const symbolIdList = symbolConfigList.map((i) => i.symbolId)\r\n  //console.log('symbolIdList', symbolIdList);\r\n  const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\r\n  const toBlock = await perpetualPool._getBlockInfo('latest');\r\n  fromBlock = parseInt(fromBlock);\r\n\r\n  let promises= []\r\n  for (let i=0; i<symbolIdList.length; i++) {\r\n    promises.push(perpetualPool.getSymbol(symbolIdList[i]))\r\n  }\r\n  let symbols = await Promise.all(promises)\r\n\r\n  const multiplier = symbols.map((i) => i.multiplier.toString());\r\n  const feeRatio = symbols.map((i) => i.feeRatio.toString());\r\n\r\n  const filters = { owner: accountAddress };\r\n  let events = await perpetualPool._getPastEvents(\r\n    'Trade',\r\n    filters,\r\n    fromBlock,\r\n    toBlock.number\r\n  );\r\n\r\n  const result = [];\r\n  events  = events.filter((i) => i.returnValues.symbolId === symbolId)\r\n  //console.log(\"events length:\", events.length);\r\n  for (let i = 0; i < events.length; i++) {\r\n    const item = events[i];\r\n    const res = await processTradeEvent(\r\n      perpetualPool,\r\n      item.returnValues,\r\n      item.blockNumber,\r\n      item.transactionHash,\r\n      multiplier,\r\n      feeRatio,\r\n    );\r\n    result.unshift(res);\r\n  }\r\n  return result;\r\n};\r\n\r\nexport const getTradeHistory = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  symbolId\r\n) => {\r\n  try {\r\n    let tradeFromBlock, tradeHistory = [];\r\n    const res = await fetchJson(\r\n      `${getHttpBase()}/trade_history/${chainId}/${poolAddress}/${accountAddress}/${symbolId}`\r\n    );\r\n    if (res && res.success) {\r\n      tradeFromBlock = parseInt(res.data.tradeHistoryBlock);\r\n      if (res.data.tradeHistory && Array.isArray(res.data.tradeHistory)) {\r\n        tradeHistory = res.data.tradeHistory;\r\n      }\r\n    }\r\n    if (tradeHistory.length > 0) {\r\n      tradeHistory = tradeHistory\r\n        .filter((i) => i)\r\n        .map((i) => {\r\n          return {\r\n            direction: i.direction.trim(),\r\n            //baseToken: i.baseToken.trim(),\r\n            symbolId: i.symbolId,\r\n            price: deriToNatural(i.price).toString(),\r\n            notional: deriToNatural(i.notional).toString(),\r\n            volume: deriToNatural(i.volume).toString(),\r\n            transactionFee: deriToNatural(i.transactionFee).toString(),\r\n            transactionHash: i.transactionHash,\r\n            time: i.time.toString(),\r\n          };\r\n        });\r\n    }\r\n      //console.log('tradeHistory1',tradeHistory)\r\n    if (tradeFromBlock !== 0) {\r\n      // console.log(tradeFromBlock, liquidateFromBlock)\r\n      const [tradeHistoryOnline] = await Promise.all([\r\n        getTradeHistoryOnline(\r\n          chainId,\r\n          poolAddress,\r\n          accountAddress,\r\n          symbolId,\r\n          tradeFromBlock + 1\r\n        ),\r\n      ]);\r\n      const result = tradeHistoryOnline.concat(tradeHistory);\r\n      return result.sort((a, b) => parseInt(b.time) - parseInt(a.time));\r\n    } else {\r\n\r\n      const {initialBlock} = getPoolConfig(poolAddress, null, symbolId)\r\n      tradeFromBlock = parseInt(initialBlock);\r\n      const [tradeHistoryOnline] = await Promise.all([\r\n        getTradeHistoryOnline(\r\n          chainId,\r\n          poolAddress,\r\n          accountAddress,\r\n          symbolId,\r\n          tradeFromBlock + 1\r\n        ),\r\n      ]);\r\n      const result = tradeHistoryOnline;\r\n      return result.sort((a, b) => parseInt(b.time) - parseInt(a.time));\r\n    }\r\n  } catch(err) {\r\n    console.log(err)\r\n  }\r\n  return []\r\n};\r\n","import { isOrderValid } from '../calculation';\r\nimport { getPoolConfig, getFilteredPoolConfigList } from '../config'\r\nimport {\r\n  bTokenFactory,\r\n  perpetualPoolRouterFactory,\r\n  pTokenFactory,\r\n  perpetualPoolFactory,\r\n} from '../factory';\r\nimport { getOracleInfo, bg } from '../utils';\r\n\r\nexport const unlock = async (chainId, poolAddress, accountAddress, bTokenId) => {\r\n   const { bToken: bTokenAddress } = getPoolConfig(poolAddress, bTokenId);\r\n  const bToken = bTokenFactory(chainId, bTokenAddress);\r\n  let res;\r\n  try {\r\n    const tx = await bToken.unlock(accountAddress, poolAddress)\r\n    res = { success: true, transaction: tx };\r\n  } catch (err) {\r\n    res = { success: false, error: err };\r\n  }\r\n  return res;\r\n};\r\n\r\n\r\nexport const depositMargin = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  amount,\r\n  bTokenId,\r\n) => {\r\n   const { router: routerAddress } = getPoolConfig(poolAddress, bTokenId);\r\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress);\r\n   let res;\r\n   try {\r\n     const tx = await perpetualPoolRouter.addMargin(accountAddress, bTokenId, amount);\r\n     res = { success: true, transaction: tx };\r\n   } catch (err) {\r\n     res = { success: false, error: err };\r\n   }\r\n   return res;\r\n}\r\n\r\nexport const withdrawMargin = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  amount,\r\n  bTokenId,\r\n  isMaximum = false,\r\n) => {\r\n   const { router: routerAddress } = getPoolConfig(poolAddress, bTokenId);\r\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress);\r\n   let res;\r\n   try {\r\n     const tx = await perpetualPoolRouter.removeMargin(accountAddress, bTokenId, amount, isMaximum);\r\n     res = { success: true, transaction: tx };\r\n   } catch (err) {\r\n     res = { success: false, error: err };\r\n   }\r\n   return res;\r\n}\r\n\r\nexport const tradeWithMargin = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  newVolume,\r\n  symbolId,\r\n) => {\r\n   const { router: routerAddress } = getPoolConfig(poolAddress);\r\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress);\r\n   const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\r\n   const {pToken: pTokenAddress } = getPoolConfig(poolAddress, null, symbolId)\r\n   const pToken = pTokenFactory(chainId, pTokenAddress);\r\n   const [parameterInfo, positions] = await Promise.all([\r\n    //  getOraclePrice(poolAddress, symbolId),\r\n    //  perpetualPool.getSymbol(symbolId),\r\n     perpetualPool.getParameters(),\r\n     pToken.getPositions(accountAddress),\r\n     //pToken.getMargin(accountAddress, symbolId),\r\n   ]);\r\n\r\n   //const { multiplier } = symbolInfo;\r\n   const { minInitialMarginRatio, minPoolMarginRatio} = parameterInfo;\r\n\r\n   const bTokenConfigList = getFilteredPoolConfigList(poolAddress, null, symbolId).sort((i, j) => parseInt(i.bTokenId) - parseInt(j.bTokenId))\r\n   const bTokenIdList = bTokenConfigList.map((i) => i.bTokenId)\r\n   const margins = await pToken.getMargins(accountAddress)\r\n    let promises = []\r\n    for (let i=0; i<bTokenIdList.length; i++) {\r\n      promises.push(perpetualPool.getBToken(bTokenIdList[i]))\r\n    }\r\n    const bTokens = await Promise.all(promises)\r\n    const margin = bTokens.reduce((accum, i, index) => {\r\n      return accum.plus(bg(i.price).times(i.discount).times(margins[index]))\r\n    }, bg(0))\r\n\r\n    const liquidity = bTokens.reduce((accum, i) => accum.plus(bg(i.liquidity).times(i.price).times(i.discount).plus(i.pnl)), bg(0))\r\n    const symbolConfigList = getFilteredPoolConfigList(poolAddress, '0').sort((i, j) => parseInt(i.symbolId) - parseInt(j.symbolId))\r\n    let symbolIdList = symbolConfigList.map((i) => i.symbolId)\r\n    promises = []\r\n    for (let i=0; i<symbolIdList.length; i++) {\r\n      promises.push(perpetualPool.getSymbol(symbolIdList[i]))\r\n    }\r\n    const symbols = await Promise.all(promises)\r\n    let marginHeld = symbols.reduce((accum, a, index) => {\r\n      if (index === parseInt(symbolId)) {\r\n        return accum.plus(bg(a.price).times(a.multiplier).times(positions[index].volume.plus(newVolume)).abs())\r\n      } else {\r\n        return accum.plus(bg(a.price).times(a.multiplier).times(positions[index].volume).abs())\r\n      }\r\n    }, bg(0))\r\n    marginHeld = marginHeld.times(minInitialMarginRatio)\r\n\r\n    //console.log('margin', margin.toString(), marginHeld.toString())\r\n    let liquidityUsed = symbols.reduce((accum, a, index) => {\r\n      if (index === parseInt(symbolId)) {\r\n        return accum.plus(bg(a.tradersNetVolume.plus(newVolume)).times(a.price).times(a.multiplier).abs())\r\n      } else {\r\n        return accum.plus(bg(a.tradersNetVolume).times(a.price).times(a.multiplier).abs())\r\n      }\r\n    }, bg(0))\r\n    liquidityUsed = liquidityUsed.times(minPoolMarginRatio)\r\n    //console.log('liquidityUsed', liquidityUsed.toString())\r\n\r\n   const orderValidation = isOrderValid(\r\n     //price,\r\n     margin,\r\n     marginHeld,\r\n     liquidity,\r\n     liquidityUsed,\r\n     //multiplier,\r\n     //minPoolMarginRatio,\r\n     //bg(newVolume),\r\n   )\r\n   let res;\r\n   if (orderValidation.success) {\r\n    try {\r\n      const tx = await perpetualPoolRouter.trade(accountAddress, symbolId, newVolume);\r\n      res = { success: true, transaction: tx };\r\n    } catch (err) {\r\n      res = { success: false, error: err };\r\n    }\r\n   } else {\r\n     res = { success: false, error: orderValidation.error};\r\n   }\r\n   return res;\r\n}\r\n\r\nexport const closePosition = async (chainId, poolAddress, accountAddress, symbolId) => {\r\n   const { router: routerAddress, pToken: pTokenAddress } = getPoolConfig(poolAddress);\r\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress)\r\n   const pToken = pTokenFactory(chainId, pTokenAddress)\r\n   const { volume } = await pToken.getPosition(accountAddress, symbolId)\r\n   const newVolume = volume.negated()\r\n   let res;\r\n   if (!volume.eq(0)) {\r\n    try {\r\n      const tx = await perpetualPoolRouter.trade(accountAddress, symbolId, newVolume);\r\n      res = { success: true, transaction: tx };\r\n    } catch (err) {\r\n      res = { success: false, error: err };\r\n    }\r\n    return res;\r\n  } else {\r\n    res = { success: false, error: 'no position to close' };\r\n  }\r\n  return res\r\n}\r\n\r\nexport const depositMarginWithPrices = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  amount,\r\n  bTokenId,\r\n) => {\r\n   const { router: routerAddress } = getPoolConfig(poolAddress, bTokenId);\r\n   const symbolList = getFilteredPoolConfigList(poolAddress, '0').sort((i, j) => parseInt(i.symbolId) - parseInt(j.symbolId)).map(c => c.symbolId)\r\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress);\r\n   let res;\r\n   try {\r\n     const promises = symbolList.map(async(s) => {\r\n       return await getOracleInfo(poolAddress, s)\r\n     })\r\n     const prices = await Promise.all(promises)\r\n     const priceInfos = prices.map((p, index) => {\r\n       return [symbolList[index], p.timestamp, p.price, parseInt(p.v).toString(), p.r, p.s]\r\n     })\r\n     const tx = await perpetualPoolRouter.addMarginWithPrices(accountAddress, bTokenId, amount, priceInfos);\r\n     res = { success: true, transaction: tx };\r\n   } catch (err) {\r\n     res = { success: false, error: err };\r\n   }\r\n   return res;\r\n}\r\n\r\nexport const withdrawMarginWithPrices = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  amount,\r\n  bTokenId,\r\n  isMaximum = false,\r\n) => {\r\n   const { router: routerAddress } = getPoolConfig(poolAddress, bTokenId);\r\n   const symbolList = getFilteredPoolConfigList(poolAddress, '0').sort((i, j) => parseInt(i.symbolId) - parseInt(j.symbolId)).map(c => c.symbolId)\r\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress);\r\n   let res;\r\n   try {\r\n     const promises = symbolList.map(async(s) => {\r\n       return await getOracleInfo(poolAddress, s)\r\n     })\r\n     const prices = await Promise.all(promises)\r\n     const priceInfos = prices.map((p, index) => {\r\n       return [symbolList[index], p.timestamp, p.price, parseInt(p.v).toString(), p.r, p.s]\r\n     })\r\n     const tx = await perpetualPoolRouter.removeMarginWithPrices(accountAddress, bTokenId, amount, priceInfos, isMaximum);\r\n     res = { success: true, transaction: tx };\r\n   } catch (err) {\r\n     res = { success: false, error: err };\r\n   }\r\n   return res;\r\n}\r\n\r\nexport const tradeWithMarginWithPrices = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  newVolume,\r\n  symbolId,\r\n) => {\r\n   const { router: routerAddress } = getPoolConfig(poolAddress);\r\n   const symbolList = getFilteredPoolConfigList(poolAddress, '0').sort((i, j) => parseInt(i.symbolId) - parseInt(j.symbolId)).map(c => c.symbolId)\r\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress);\r\n   const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\r\n   const {pToken: pTokenAddress } = getPoolConfig(poolAddress, null, symbolId)\r\n   const pToken = pTokenFactory(chainId, pTokenAddress);\r\n   //const [price, symbolInfo, parameterInfo, positions] = await Promise.all([\r\n   const [parameterInfo, positions] = await Promise.all([\r\n    //  getOraclePrice(poolAddress, symbolId),\r\n    //  perpetualPool.getSymbol(symbolId),\r\n     perpetualPool.getParameters(),\r\n     pToken.getPositions(accountAddress),\r\n     //pToken.getMargin(accountAddress, symbolId),\r\n   ]);\r\n\r\n   //const { multiplier } = symbolInfo;\r\n   const { minInitialMarginRatio, minPoolMarginRatio} = parameterInfo;\r\n\r\n   const bTokenConfigList = getFilteredPoolConfigList(poolAddress, null, symbolId).sort((i, j) => parseInt(i.bTokenId) - parseInt(j.bTokenId))\r\n   const bTokenIdList = bTokenConfigList.map((i) => i.bTokenId)\r\n   const margins = await pToken.getMargins(accountAddress)\r\n    let promises = []\r\n    for (let i=0; i<bTokenIdList.length; i++) {\r\n      promises.push(perpetualPool.getBToken(bTokenIdList[i]))\r\n    }\r\n    const bTokens = await Promise.all(promises)\r\n    const margin = bTokens.reduce((accum, i, index) => {\r\n      return accum.plus(bg(i.price).times(i.discount).times(margins[index]))\r\n    }, bg(0))\r\n\r\n    const liquidity = bTokens.reduce((accum, i) => accum.plus(bg(i.liquidity).times(i.price).times(i.discount).plus(i.pnl)), bg(0))\r\n    //console.log('liquidity', liquidity.toString())\r\n    const symbolConfigList = getFilteredPoolConfigList(poolAddress, '0').sort((i, j) => parseInt(i.symbolId) - parseInt(j.symbolId))\r\n    let symbolIdList = symbolConfigList.map((i) => i.symbolId)\r\n    promises = []\r\n    for (let i=0; i<symbolIdList.length; i++) {\r\n      promises.push(perpetualPool.getSymbol(symbolIdList[i]))\r\n    }\r\n    const symbols = await Promise.all(promises)\r\n    let marginHeld = symbols.reduce((accum, a, index) => {\r\n      if (index === parseInt(symbolId)) {\r\n        return accum.plus(bg(a.price).times(a.multiplier).times(positions[index].volume.plus(newVolume)).abs())\r\n      } else {\r\n        return accum.plus(bg(a.price).times(a.multiplier).times(positions[index].volume).abs())\r\n      }\r\n    }, bg(0))\r\n    marginHeld = marginHeld.times(minInitialMarginRatio)\r\n\r\n    //console.log('margin', margin.toString(), marginHeld.toString())\r\n    let liquidityUsed = symbols.reduce((accum, a, index) => {\r\n      if (index === parseInt(symbolId)) {\r\n        return accum.plus(bg(a.tradersNetVolume.plus(newVolume)).times(a.price).times(a.multiplier).abs())\r\n      } else {\r\n        return accum.plus(bg(a.tradersNetVolume).times(a.price).times(a.multiplier).abs())\r\n      }\r\n    }, bg(0))\r\n    liquidityUsed = liquidityUsed.times(minPoolMarginRatio)\r\n    //console.log('liquidityUsed', liquidityUsed.toString())\r\n\r\n    // const pnl = bTokens.reduce((accum, i) => accum.plus(i.pnl), bg(0))\r\n    // console.log('pnl', pnl.toString())\r\n\r\n   const orderValidation = isOrderValid(\r\n     //price,\r\n     margin,\r\n     marginHeld,\r\n     liquidity,\r\n     liquidityUsed,\r\n     //multiplier,\r\n     //minPoolMarginRatio,\r\n     //bg(newVolume),\r\n   )\r\n   let res;\r\n   if (orderValidation.success) {\r\n    try {\r\n     promises = symbolList.map(async(s) => {\r\n       return await getOracleInfo(poolAddress, s)\r\n     })\r\n     const prices = await Promise.all(promises)\r\n     const priceInfos = prices.map((p, index) => {\r\n       return [symbolList[index], p.timestamp, p.price, parseInt(p.v).toString(), p.r, p.s]\r\n     })\r\n      const tx = await perpetualPoolRouter.tradeWithPrices(accountAddress, symbolId, newVolume, priceInfos);\r\n      res = { success: true, transaction: tx };\r\n    } catch (err) {\r\n      res = { success: false, error: err };\r\n    }\r\n   } else {\r\n     res = { success: false, error: orderValidation.error};\r\n   }\r\n   return res;\r\n}\r\n\r\nexport const closePositionWithPrices = async (chainId, poolAddress, accountAddress, symbolId) => {\r\n   const { router: routerAddress, pToken: pTokenAddress } = getPoolConfig(poolAddress);\r\n   const symbolList = getFilteredPoolConfigList(poolAddress, '0').sort((i, j) => parseInt(i.symbolId) - parseInt(j.symbolId)).map(c => c.symbolId)\r\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress)\r\n   const pToken = pTokenFactory(chainId, pTokenAddress)\r\n   const { volume } = await pToken.getPosition(accountAddress, symbolId)\r\n   const newVolume = volume.negated()\r\n   let res;\r\n   if (!volume.eq(0)) {\r\n    try {\r\n     const promises = symbolList.map(async(s) => {\r\n       return await getOracleInfo(poolAddress, s)\r\n     })\r\n     const prices = await Promise.all(promises)\r\n     const priceInfos = prices.map((p, index) => {\r\n       return [symbolList[index], p.timestamp, p.price, parseInt(p.v).toString(), p.r, p.s]\r\n     })\r\n      const tx = await perpetualPoolRouter.tradeWithPrices(accountAddress, symbolId, newVolume, priceInfos);\r\n      res = { success: true, transaction: tx };\r\n    } catch (err) {\r\n      res = { success: false, error: err };\r\n    }\r\n    return res;\r\n  } else {\r\n    res = { success: false, error: 'no position to close' };\r\n  }\r\n  return res\r\n}","import Web3 from 'web3';\r\nimport { metaMaskWeb3 } from '../factory/web3';\r\nimport { hexToNumber } from '../utils';\r\n\r\n/**\r\n * check ethereum client status for web browser\r\n * @function\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {boolean} response.isMetaMask - check if it is MetaMask client\r\n * @returns {boolean} response.[error] - error message when request failed\r\n */\r\nexport const hasWallet = () => {\r\n  if (window.ethereum && window.ethereum.isMetaMask) {\r\n    return { success: true, isMetaMask: true };\r\n  }\r\n  return {\r\n    success: false,\r\n    error:\r\n      'The browser is not support ethereum wallet, please install MetaMask to proceed.',\r\n  };\r\n};\r\n\r\n/**\r\n *  Connect wallet using MetaMask account\r\n * @async\r\n * @function\r\n * @param {function} [handleChainChanged] - Callback when chainId changed\r\n * @param {function} [handleAccountChanged]  - callback when account changed\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {string} response.chainId - chain Id\r\n * @returns {string} response.account - account address\r\n * @returns {boolean} response.[error] - error message when request failed\r\n */\r\nexport const connectWallet = async (\r\n  handleChainChanged,\r\n  handleAccountChanged\r\n) => {\r\n  if (typeof window.ethereum !== undefined) {\r\n    const accounts = await window.ethereum.request({\r\n      method: 'eth_requestAccounts',\r\n    });\r\n    const chainId = parseInt(\r\n      await window.ethereum.request({ method: 'net_version' })\r\n    );\r\n    // const chainId = hexToNumber(\r\n    //   await window.ethereum.request({ method: 'eth_chainId' })\r\n    // );\r\n    const account = Array.isArray(accounts) && accounts[0];\r\n\r\n    // await web3.eth.requestAccounts().then(console.log)\r\n    window.ethereum.on('accountsChanged', (accounts) => {\r\n      let account;\r\n      if (accounts.length > 0) {\r\n        account = accounts[0];\r\n      } else {\r\n        account = '';\r\n      }\r\n      if (typeof handleAccountChanged === 'function') {\r\n        handleAccountChanged(account);\r\n      } else {\r\n        window.location.reload();\r\n      }\r\n      //console.log('accountChanged', account);\r\n    });\r\n    window.ethereum.on('chainChanged', (chainId) => {\r\n      let res = hexToNumber(chainId);\r\n      if (typeof handleChainChanged === 'function') {\r\n        handleChainChanged(res);\r\n      } else {\r\n        window.location.reload();\r\n      }\r\n      //console.log('chainChanged', res);\r\n    });\r\n    return { success: true, account, chainId };\r\n  }\r\n  return {\r\n    success: false,\r\n    error: 'Cannot connect wallet, please install MetaMask.',\r\n  };\r\n};\r\n\r\n/**\r\n * Get balance of the connected account\r\n * @async\r\n * @method\r\n * @param {string} chainId - Id of the chain\r\n * @param {string} accountAddress - Address of the connected account\r\n * @returns {string} Account balance\r\n */\r\nexport const getUserWalletBalance = async (chainId, walletAddress) => {\r\n  //const web3 = web3Factory(chainId);\r\n  const web3 = metaMaskWeb3();\r\n  const balance = await web3.eth.getBalance(walletAddress);\r\n  const res = Web3.utils.fromWei(balance);\r\n  return res;\r\n};\r\n","import {\r\n  getSlpLiquidityInfo,\r\n  getSlpWalletBalance,\r\n  isSlpUnlocked,\r\n  unlockSlp,\r\n  // addSlpLiquidity,\r\n  // removeSlpLiquidity,\r\n} from './slpPoolApi';\r\nimport {\r\n  getClp2LiquidityInfo,\r\n  getClp2WalletBalance,\r\n  isClp2Unlocked,\r\n  unlockClp2,\r\n  // addSlpLiquidity,\r\n  // removeSlpLiquidity,\r\n} from './clp2PoolApi';\r\nimport {\r\n  getClpLiquidityInfo,\r\n  getClpWalletBalance,\r\n  isClpUnlocked,\r\n  unlockClp,\r\n  // addClpLiquidity,\r\n  // removeClpLiquidity,\r\n} from './clpPoolApi';\r\n\r\nimport {\r\n  addSlpLiquidity2 as addSlpLiquidity,\r\n  removeSlpLiquidity2 as removeSlpLiquidity,\r\n  addClpLiquidity2 as addClpLiquidity,\r\n  removeClpLiquidity2 as removeClpLiquidity,\r\n  addClp2Liquidity2 as addClp2Liquidity,\r\n  removeClp2Liquidity2 as removeClp2Liquidity,\r\n} from './contractTransactionApiV2'\r\nimport { getLpContractAddress } from '../utils';\r\n\r\n/**\r\n * Get liquidity info of LP pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {Object} response\r\n * @returns {string} response.liquidity\r\n * @returns {string} response.bTokenBalance\r\n * @returns {string} response.shares\r\n */\r\nexport const getLpLiquidityInfo = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress\r\n) => {\r\n  const { type } = getLpContractAddress(chainId, poolAddress);\r\n  if (type === 'slp') {\r\n    return await getSlpLiquidityInfo(chainId, poolAddress, accountAddress);\r\n  } else if (type === 'clp') {\r\n    return await getClpLiquidityInfo(chainId, poolAddress, accountAddress);\r\n  } else if (type === 'clp2') {\r\n    return await getClp2LiquidityInfo(chainId, poolAddress, accountAddress);\r\n  } else {\r\n    console.log(`getLpLiquidityInfo(): invalid lp type ${type}`);\r\n  }\r\n};\r\n\r\n/**\r\n * Add liquidity to LP pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @param {number} amount\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {string} response.[error]\r\n * @returns {Object} response.transaction - eth transaction receipt object\r\n */\r\nexport const addLpLiquidity = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  amount\r\n) => {\r\n  const { type } = getLpContractAddress(chainId, poolAddress);\r\n  if (type === 'slp') {\r\n    return await addSlpLiquidity(chainId, poolAddress, accountAddress, amount);\r\n  } else if (type === 'clp') {\r\n    return await addClpLiquidity(chainId, poolAddress, accountAddress, amount);\r\n  } else if (type === 'clp2') {\r\n    return await addClp2Liquidity(chainId, poolAddress, accountAddress, amount);\r\n  } else {\r\n    console.log(`addLpLiquidity(): invalid lp type ${type}`);\r\n  }\r\n};\r\n\r\n/**\r\n * Remove liquidity to LP pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @param {number} amount\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {string} response.[error]\r\n * @returns {Object} response.transaction - eth transaction receipt object\r\n */\r\nexport const removeLpLiquidity = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  amount\r\n) => {\r\n  const { type } = getLpContractAddress(chainId, poolAddress);\r\n  if (type === 'slp') {\r\n    return await removeSlpLiquidity(\r\n      chainId,\r\n      poolAddress,\r\n      accountAddress,\r\n      amount\r\n    );\r\n  } else if (type === 'clp') {\r\n    return await removeClpLiquidity(\r\n      chainId,\r\n      poolAddress,\r\n      accountAddress,\r\n      amount\r\n    );\r\n  } else if (type === 'clp2') {\r\n    return await removeClp2Liquidity(\r\n      chainId,\r\n      poolAddress,\r\n      accountAddress,\r\n      amount\r\n    );\r\n  } else {\r\n    console.log(`removeLpLiquidity(): invalid lp type ${type}`);\r\n  }\r\n};\r\n\r\n/**\r\n * Check account is unlocked in the lp pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {bool}\r\n */\r\nexport const isLpUnlocked = async (chainId, poolAddress, accountAddress) => {\r\n  const { type } = getLpContractAddress(chainId, poolAddress);\r\n  if (type === 'slp') {\r\n    return await isSlpUnlocked(chainId, poolAddress, accountAddress);\r\n  } else if (type === 'clp') {\r\n    return await isClpUnlocked(chainId, poolAddress, accountAddress);\r\n  } else if (type === 'clp2') {\r\n    return await isClp2Unlocked(chainId, poolAddress, accountAddress);\r\n  } else {\r\n    console.log(`isLpLiquidity(): invalid lp type ${type}`);\r\n  }\r\n};\r\n\r\n/**\r\n * Unlock the account in the lp pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {string} response.[error]\r\n * @returns {Object} response.transaction - eth transaction receipt object\r\n */\r\nexport const unlockLp = async (chainId, poolAddress, accountAddress) => {\r\n  const { type } = getLpContractAddress(chainId, poolAddress);\r\n  if (type === 'slp') {\r\n    return await unlockSlp(chainId, poolAddress, accountAddress);\r\n  } else if (type === 'clp') {\r\n    return await unlockClp(chainId, poolAddress, accountAddress);\r\n  } else if (type === 'clp2') {\r\n    return await unlockClp2(chainId, poolAddress, accountAddress);\r\n  } else {\r\n    console.log(`unlockLp(): invalid lp type ${type}`);\r\n  }\r\n};\r\n\r\n/**\r\n * Get account balance in lp pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} accountAddress\r\n * @returns {string} Account balance\r\n */\r\nexport const getLpWalletBalance = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress\r\n) => {\r\n  const { type } = getLpContractAddress(chainId, poolAddress);\r\n  if (type === 'slp') {\r\n    return await getSlpWalletBalance(chainId, poolAddress, accountAddress);\r\n  } else if (type === 'clp') {\r\n    return await getClpWalletBalance(chainId, poolAddress, accountAddress);\r\n  } else if (type === 'clp2') {\r\n    return await getClp2WalletBalance(chainId, poolAddress, accountAddress);\r\n  } else {\r\n    console.log(`getLpWalletBalance(): invalid lp type ${type}`);\r\n  }\r\n};\r\n","import { makeObservable, observable, action } from \"mobx\";\r\nimport { getContractAddressConfig, DeriEnv } from \"../lib/web3js/indexV2\";\r\n\r\nexport default class Config {\r\n  all = []\r\n\r\n  constructor(){\r\n    makeObservable(this,{\r\n      all : observable,\r\n      setAll : action\r\n    })\r\n  }\r\n\r\n  load(version){\r\n    const current = version && version.current;\r\n    let configs = getContractAddressConfig(DeriEnv.get(),current)\r\n    if(version){\r\n      configs = configs.filter(c => c.version === version.current)\r\n      //v2 不需要展示base token,需要合并相同的base token\r\n      if(version.isV2){\r\n        configs = configs.reduce((total,cur) => {\r\n          const pos = total.findIndex(c => c.symbolId === cur.symbolId);\r\n          if(pos === -1){\r\n            total.push(cur)\r\n          }\r\n          return total;\r\n        },[])\r\n      }\r\n    }\r\n    this.setAll(configs)\r\n    return configs;\r\n  }\r\n\r\n  setAll(all){\r\n    this.all = all;\r\n  }\r\n  \r\n}","const { getContractAddressConfig:getContractAddressConfig2} = require(\"../config\");\r\nconst { getPoolConfigList:getPoolConfigListV2} = require(\"../v2/config\")\r\n\r\nexport const getContractAddressConfig = (env = 'dev', version) => {\r\n  if (!version || version === '1' || version === 'v1') {\r\n    return getContractAddressConfig2(env)\r\n  } else if (version === '2' || version === 'v2') {\r\n    return getPoolConfigListV2(env).concat(getContractAddressConfig2(env))\r\n  } else {\r\n    throw new Error(`getPoolContractAddress: invalid version: ${version}`)\r\n  }\r\n}","import { getLiquidityInfo2 } from '../api/restApi';\r\nimport { getPoolLiquidity as getPoolLiquidity2, getPoolInfoApy as getPoolInfoApy2 } from '../api/databaseApi';\r\nimport { \r\n  getLiquidityInfo as getLiquidityInfoV2,\r\n  getPoolLiquidity as getPoolLiquidityV2,\r\n  getPoolInfoApy as getPoolInfoApyV2,\r\n } from '../v2';\r\n\r\nexport const getLiquidityInfo = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  bTokenId,\r\n) => {\r\n  if (bTokenId === undefined) {\r\n    return getLiquidityInfo2(chainId, poolAddress, accountAddress)\r\n  } else {\r\n    return getLiquidityInfoV2(chainId, poolAddress, accountAddress, bTokenId)\r\n  }\r\n};\r\n\r\nexport const getPoolLiquidity = async (\r\n  chainId,\r\n  poolAddress,\r\n  bTokenId,\r\n) => {\r\n  if (bTokenId === undefined) {\r\n    return getPoolLiquidity2(chainId, poolAddress)\r\n  } else {\r\n    return getPoolLiquidityV2(chainId, poolAddress, bTokenId)\r\n  }\r\n};\r\n\r\nexport const getPoolInfoApy = async (chainId, poolAddress, bTokenId) => {\r\n  if (bTokenId === undefined) {\r\n    return getPoolInfoApy2(chainId, poolAddress)\r\n  } else {\r\n    return getPoolInfoApyV2(chainId, poolAddress, bTokenId)\r\n  }\r\n};","import {addLiquidity2, removeLiquidity2 } from '../api/contractTransactionApiV2';\r\nimport {\r\n  addLiquidity as addLiquidityV2,\r\n  removeLiquidity as removeLiquidityV2\r\n  // addLiquidityWithPrices as addLiquidityV2,\r\n  // removeLiquidityWithPrices as removeLiquidityV2,\r\n} from '../v2';\r\n\r\nexport const addLiquidity = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  amount,\r\n  bTokenId,\r\n) => {\r\n  if (bTokenId === undefined) {\r\n    return addLiquidity2(chainId, poolAddress, accountAddress, amount);\r\n  } else {\r\n    return addLiquidityV2(\r\n      chainId,\r\n      poolAddress,\r\n      accountAddress,\r\n      amount,\r\n      bTokenId\r\n    );\r\n  }\r\n}\r\n\r\nexport const removeLiquidity = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  amount,\r\n  bTokenId,\r\n  isMaximum,\r\n) => {\r\n  if (bTokenId === undefined) {\r\n    return removeLiquidity2(chainId, poolAddress, accountAddress, amount);\r\n  } else {\r\n    return removeLiquidityV2(\r\n      chainId,\r\n      poolAddress,\r\n      accountAddress,\r\n      amount,\r\n      bTokenId,\r\n      isMaximum,\r\n    );\r\n  }\r\n}\r\n","import {\r\n  getPositionInfo as getPositionInfo2,\r\n  isUnlocked as isUnlocked2,\r\n  getEstimatedMargin as getEstimatedMargin2,\r\n  getEstimatedFee as getEstimatedFee2,\r\n  getEstimatedFundingRate as getEstimatedFundingRate2,\r\n  getEstimatedLiquidityUsed as getEstimatedLiquidityUsed2,\r\n  getWalletBalance as getWalletBalance2,\r\n} from '../api/contractQueryApi'\r\n\r\nimport {\r\n  getSpecification2,\r\n  getFundingRate2,\r\n  getLiquidityUsed2,\r\n  getFundingRateCache2,\r\n} from '../api/restApi'\r\n//import { bTokenFactory } from '../factory/contracts'\r\n\r\nimport {\r\n  getPositionInfo as getPositionInfoV2,\r\n  isUnlocked as isUnlockedV2,\r\n  getEstimatedMargin as getEstimatedMarginV2,\r\n  getEstimatedFee as getEstimatedFeeV2,\r\n  getEstimatedFundingRate as getEstimatedFundingRateV2,\r\n  getEstimatedLiquidityUsed as getEstimatedLiquidityUsedV2,\r\n  getSpecification as getSpecificationV2,\r\n  getWalletBalance as getWalletBalanceV2,\r\n  getFundingRate as getFundingRateV2,\r\n  getLiquidityUsed as getLiquidityUsedV2,\r\n  getFundingRateCache as getFundingRateCacheV2,\r\n} from '../v2'\r\n\r\n\r\nexport const getSpecification = async (\r\n  chainId,\r\n  poolAddress,\r\n  bTokenId,\r\n  symbolId,\r\n) => {\r\n  if (symbolId === undefined) {\r\n    return getSpecification2(chainId, poolAddress)\r\n  } else {\r\n    return getSpecificationV2(chainId, poolAddress, bTokenId, symbolId)\r\n  }\r\n}\r\n\r\nexport const getPositionInfo = async (chainId, poolAddress, accountAddress, symbolId) => {\r\n  if (symbolId === undefined) {\r\n    return getPositionInfo2(chainId, poolAddress, accountAddress)\r\n  } else {\r\n    return getPositionInfoV2(chainId, poolAddress, accountAddress, symbolId)\r\n  }\r\n}\r\nexport const getWalletBalance = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  bTokenId,\r\n) => {\r\n  if (bTokenId === undefined) {\r\n    return getWalletBalance2(chainId, poolAddress, accountAddress)\r\n  } else {\r\n    return getWalletBalanceV2(chainId, poolAddress, accountAddress, bTokenId)\r\n  }\r\n}\r\n\r\nexport const isUnlocked = async (chainId, poolAddress, accountAddress, bTokenId) => { \r\n  if (bTokenId === undefined) {\r\n    return isUnlocked2(chainId, poolAddress, accountAddress)\r\n  } else {\r\n    return isUnlockedV2(chainId, poolAddress, accountAddress, bTokenId)\r\n  }\r\n}\r\n\r\nexport const getEstimatedFee = async (chainId, poolAddress, volume, symbolId) => {\r\n  if (symbolId === undefined) {\r\n    return getEstimatedFee2(chainId, poolAddress, volume)\r\n  } else {\r\n    return getEstimatedFeeV2(chainId, poolAddress, volume, symbolId)\r\n  }\r\n}\r\n\r\nexport const getEstimatedMargin = async(\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  volume,\r\n  leverage,\r\n  symbolId,\r\n) => {\r\n  if (symbolId === undefined) {\r\n    return getEstimatedMargin2(chainId, poolAddress, accountAddress, volume, leverage)\r\n  } else {\r\n    return getEstimatedMarginV2(chainId, poolAddress, accountAddress, volume, leverage, symbolId)\r\n  }\r\n}\r\n\r\nexport const getFundingRate = async (chainId, poolAddress, symbolId) => {\r\n  if (symbolId === undefined) {\r\n    return getFundingRate2(chainId, poolAddress)\r\n  } else {\r\n    return getFundingRateV2(chainId, poolAddress, symbolId)\r\n  }\r\n}\r\n\r\nexport const getEstimatedFundingRate = async (\r\n  chainId,\r\n  poolAddress,\r\n  newNetVolume,\r\n  symbolId,\r\n) => {\r\n  if (symbolId === undefined) {\r\n    return getEstimatedFundingRate2(chainId, poolAddress, newNetVolume)\r\n  } else {\r\n    return getEstimatedFundingRateV2(chainId, poolAddress, newNetVolume, symbolId)\r\n  }\r\n}\r\n\r\nexport const getLiquidityUsed = async (\r\n  chainId,\r\n  poolAddress,\r\n  symbolId\r\n) => {\r\n  if (symbolId === undefined) {\r\n    return getLiquidityUsed2(chainId, poolAddress)\r\n  } else {\r\n    return getLiquidityUsedV2(chainId, poolAddress, symbolId)\r\n  }\r\n};\r\n\r\nexport const getEstimatedLiquidityUsed = async (\r\n  chainId,\r\n  poolAddress,\r\n  newNetVolume,\r\n  symbolId,\r\n) => {\r\n  if (symbolId === undefined) {\r\n    return getEstimatedLiquidityUsed2(chainId, poolAddress, newNetVolume)\r\n  } else {\r\n    return getEstimatedLiquidityUsedV2(chainId, poolAddress, newNetVolume, symbolId)\r\n  }\r\n}\r\n\r\nexport const getFundingRateCache = async(chainId, poolAddress, symbolId) => {\r\n  if (symbolId === undefined) {\r\n    return getFundingRateCache2(chainId, poolAddress)\r\n  } else {\r\n    return getFundingRateCacheV2(chainId, poolAddress, symbolId)\r\n  }\r\n}\r\n","import { unlock as unlock2 } from '../api/contractTransactionApi';\r\nimport {\r\n  tradeWithMargin2,\r\n  closePosition2,\r\n  depositMargin2,\r\n  withdrawMargin2,\r\n} from '../api/contractTransactionApiV2';\r\nimport {\r\n  unlock as unlockV2,\r\n  tradeWithMargin as tradeWithMarginV2,\r\n  closePosition as closePositionV2,\r\n  depositMargin as depositMarginV2,\r\n  withdrawMargin as withdrawMarginV2,\r\n  // tradeWithMarginWithPrices as tradeWithMarginV2,\r\n  // depositMarginWithPrices as depositMarginV2,\r\n  // withdrawMarginWithPrices as withdrawMarginV2,\r\n  // closePositionWithPrices as closePositionV2,\r\n} from '../v2';\r\n\r\nexport const unlock = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  bTokenId\r\n) => {\r\n  if(bTokenId === undefined) {\r\n    return unlock2(chainId, poolAddress, accountAddress)\r\n  } else {\r\n    return unlockV2(chainId, poolAddress, accountAddress, bTokenId)\r\n  }\r\n};\r\n\r\nexport const depositMargin = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  amount,\r\n  bTokenId,\r\n) => {\r\n  if(bTokenId === undefined) {\r\n    return depositMargin2(chainId, poolAddress, accountAddress, amount)\r\n  } else {\r\n    return depositMarginV2(chainId, poolAddress, accountAddress, amount, bTokenId)\r\n  }\r\n};\r\n\r\nexport const withdrawMargin = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  amount,\r\n  bTokenId,\r\n  isMaximum,\r\n) => {\r\n  if(bTokenId === undefined) {\r\n    return withdrawMargin2(chainId, poolAddress, accountAddress, amount)\r\n  } else {\r\n    return withdrawMarginV2(chainId, poolAddress, accountAddress, amount, bTokenId, isMaximum)\r\n  }\r\n};\r\n\r\nexport const tradeWithMargin = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  newVolume,\r\n  symbolId,\r\n) => {\r\n  if(symbolId === undefined) {\r\n    return tradeWithMargin2(chainId, poolAddress, accountAddress, newVolume)\r\n  } else {\r\n    return tradeWithMarginV2(chainId, poolAddress, accountAddress, newVolume, symbolId)\r\n  }\r\n};\r\n\r\nexport const closePosition = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  symbolId,\r\n) => {\r\n  if(symbolId === undefined) {\r\n    return closePosition2(chainId, poolAddress, accountAddress)\r\n  } else {\r\n    return closePositionV2(chainId, poolAddress, accountAddress, symbolId)\r\n  }\r\n};\r\n","\r\nimport {getTradeHistory2} from '../api/restApi';\r\nimport { \r\n  getTradeHistory as getTradeHistoryV2\r\n } from '../v2';\r\n\r\nexport const getTradeHistory = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  symbolId,\r\n) => {\r\n  if (symbolId === undefined) {\r\n    return getTradeHistory2(chainId, poolAddress, accountAddress);\r\n  } else {\r\n    return getTradeHistoryV2(\r\n      chainId,\r\n      poolAddress,\r\n      accountAddress,\r\n      symbolId,\r\n    );\r\n  }\r\n}","import { bg, getAnnualBlockNumber } from '../utils';\r\n\r\nexport const calculateLiquidityUsed = (\r\n  tradersNetVolume,\r\n  price,\r\n  multiplier,\r\n  liquidity,\r\n  poolMarginRatio\r\n) => {\r\n  return bg(\r\n    ((tradersNetVolume * price * multiplier) / liquidity) * poolMarginRatio\r\n  ).abs();\r\n}\r\n\r\nexport const calculateFundingRate = (\r\n  tradersNetVolume,\r\n  price,\r\n  multiplier,\r\n  liquidity,\r\n  fundingRateCoefficient\r\n) => {\r\n  return ((tradersNetVolume * price * multiplier) / liquidity) *\r\n  fundingRateCoefficient;\r\n}\r\n\r\nexport const processFundingRate = (chainId, fundingRate) => {\r\n  const annualBlockCount = getAnnualBlockNumber(chainId);\r\n  //console.log(annualBlockCount);\r\n  return bg(fundingRate).times(annualBlockCount);\r\n};\r\n","import { bg, max, min } from '../utils';\r\n\r\nexport * from './fundingRate';\r\n\r\nexport const calculateShareValue = (lTokenTotalSupply, liquidity) =>\r\n  lTokenTotalSupply.eq(0) ? bg(0) : liquidity.div(lTokenTotalSupply);\r\nexport const calculateMaxRemovableShares = (\r\n  lTokenBalance,\r\n  lTokenTotalSupply,\r\n  liquidity,\r\n  tradersNetVolume,\r\n  tradersNetCost,\r\n  multiplier,\r\n  minPoolMarginRatio,\r\n  price\r\n) => {\r\n  const shareValue = calculateShareValue(lTokenTotalSupply, liquidity);\r\n  const value = tradersNetVolume.times(price).times(multiplier);\r\n  const removable = liquidity\r\n    .plus(tradersNetCost)\r\n    .minus(value)\r\n    .minus(value.abs().times(minPoolMarginRatio));\r\n  const shares = max(min(lTokenBalance, removable.div(shareValue)), bg(0));\r\n  return shares;\r\n};\r\n\r\nexport const calculateEntryPrice = (volume, cost, multiplier) =>\r\n  volume.eq(0) ? bg(0) : cost.div(volume).div(multiplier);\r\n\r\nexport const calculateMarginHeld = (\r\n  price,\r\n  volume,\r\n  multiplier,\r\n  minInitialMarginRatio\r\n) => {\r\n  return volume.abs().times(price).times(multiplier).times(minInitialMarginRatio)\r\n};\r\n\r\nexport const calculatePnl = (price, volume, multiplier, cost) => {\r\n  return volume.times(price).times(multiplier).minus(cost);\r\n}\r\n\r\nexport const calculateMaxWithdrawMargin = (\r\n  price,\r\n  volume,\r\n  margin,\r\n  cost,\r\n  multiplier,\r\n  minInitialMarginRatio\r\n) => {\r\n  if (volume.eq(0)) {\r\n    return margin;\r\n  }\r\n  const held = calculateMarginHeld(\r\n    price,\r\n    volume,\r\n    multiplier,\r\n    minInitialMarginRatio\r\n  );\r\n  const pnl = calculatePnl(price, volume, multiplier, cost);\r\n  const withdrawable = max(margin.plus(pnl).minus(held.times(1.02)), bg(0));\r\n  return withdrawable;\r\n};\r\n\r\nexport const calculateLiquidationPrice = (\r\n  volume,\r\n  margin,\r\n  cost,\r\n  multiplier,\r\n  minMaintenanceMarginRatio\r\n) => {\r\n  const tmp = cost.minus(margin).div(volume).div(multiplier);\r\n  let res = volume.gt(0)\r\n    ? tmp.div(bg(1).minus(minMaintenanceMarginRatio))\r\n    : tmp.div(bg(1).plus(minMaintenanceMarginRatio));\r\n  res = max(res, bg(0));\r\n  return res;\r\n};\r\n\r\nexport const isOrderValid = (\r\n  price,\r\n  margin,\r\n  volume,\r\n  liquidity,\r\n  tradersNetVolume,\r\n  multiplier,\r\n  minPoolMarginRatio,\r\n  minInitialMarginRatio,\r\n  newVolume,\r\n  amount\r\n) => {\r\n  const minMargin = volume\r\n    .plus(newVolume)\r\n    .abs()\r\n    .times(price)\r\n    .times(multiplier)\r\n    .times(minInitialMarginRatio);\r\n  const poolMaxVolume = liquidity\r\n    .div(minPoolMarginRatio)\r\n    .div(price)\r\n    .div(multiplier);\r\n  if (margin.plus(amount).gte(minMargin)) {\r\n    if (\r\n      newVolume.lte(poolMaxVolume.minus(tradersNetVolume)) &&\r\n      newVolume.gte(poolMaxVolume.negated().minus(tradersNetVolume))\r\n    ) {\r\n      return { success: true };\r\n    }\r\n    return { success: false, message: 'Pool insufficient liquidity' };\r\n  }\r\n  return { success: false, message: 'Trader insufficient margin' };\r\n};\r\n","import { databaseFactory, databaseAirdropFactory } from '../factory/contracts';\r\nimport {\r\n  toChecksumAddress,\r\n  getNetworkName,\r\n  deriToString,\r\n  deriToBool,\r\n  deriToNatural,\r\n  getPoolContractAddress,\r\n} from '../utils';\r\n// import { getLiquidityUsed } from \"./contractApi\";\r\n\r\nexport const getUserInfo = async (userAddress) => {\r\n  const db = databaseFactory(true);\r\n  userAddress = toChecksumAddress(userAddress);\r\n  const res = await db\r\n    .getValues([\r\n      `${userAddress}.claim.chainId`,\r\n      `${userAddress}.claim.amount`,\r\n      `${userAddress}.claim.deadline`,\r\n      `${userAddress}.claim.nonce`,\r\n      `${userAddress}.claim.v`,\r\n      `${userAddress}.claim.r`,\r\n      `${userAddress}.claim.s`,\r\n      `${userAddress}.claim.valid`,\r\n    ])\r\n    .catch((err) => console.log('getUserInfo', err));\r\n  if (res) {\r\n    const [chainId, amount, deadline, nonce, v, r, s, valid] = res;\r\n    return {\r\n      chainId: deriToString(chainId),\r\n      amount: deriToNatural(amount).toString(),\r\n      deadline: deriToString(deadline),\r\n      nonce: deriToString(nonce),\r\n      v: deriToString(v),\r\n      r,\r\n      s,\r\n      valid: deriToBool(valid),\r\n    };\r\n  }\r\n};\r\n\r\nexport const getUserInfoHarvest = async (userAddress) => {\r\n  const db = databaseFactory(true);\r\n  userAddress = toChecksumAddress(userAddress);\r\n  const res = await db\r\n    .getValues([\r\n      `${userAddress}.claim.harvest.lp`,\r\n      `${userAddress}.claim.harvest.trade`,\r\n    ])\r\n    .catch((err) => console.log('getUserInfoHarvest', err));\r\n  if (res) {\r\n    const [harvestLp, harvestTrade] = res;\r\n    return {\r\n      lp: deriToNatural(harvestLp).toString(),\r\n      trade: deriToNatural(harvestTrade).toString(),\r\n    };\r\n  }\r\n};\r\n\r\nexport const getUserInfoTotal = async (userAddress) => {\r\n  const db = databaseFactory(true);\r\n  userAddress = toChecksumAddress(userAddress);\r\n  const res = await db\r\n    .getValues([`${userAddress}.claim.total`])\r\n    .catch((err) => console.log('getUserInfoTotal', err));\r\n  if (res) {\r\n    const [total] = res;\r\n    return {\r\n      total: deriToNatural(total).toString(),\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Get user claim info from database\r\n * @async\r\n * @method\r\n * @param {string} userAddress - account address\r\n * @returns {Object} response\r\n * @returns {string} resposne.chainId\r\n * @returns {BigNumber} response.amount\r\n * @returns {string} response.deadline\r\n * @returns {string} response.nonce\r\n * @returns {string} response.v\r\n * @returns {string} response.r\r\n * @returns {string} response.s\r\n * @returns {bool} response.valid\r\n * @returns {BigNumber} response.lp\r\n * @returns {BigNumber} response.trade\r\n * @returns {string} response.total\r\n */\r\nexport const getUserInfoAll = async (userAddress) => {\r\n  const userInfo = await getUserInfo(userAddress);\r\n  const userInfoHarvest = await getUserInfoHarvest(userAddress);\r\n  const userInfoTotal = await getUserInfoTotal(userAddress);\r\n  return Object.assign(userInfo, userInfoHarvest, userInfoTotal);\r\n};\r\n\r\n/**\r\n * Get pool liquidity\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @returns {Object} response\r\n * @returns {string} response.liquidity\r\n * @returns {symbol} response.symbol\r\n */\r\nexport const getPoolLiquidity = async (chainId, poolAddress) => {\r\n  // use the dev database\r\n  const db = databaseFactory();\r\n  try {\r\n    const res = await db\r\n      .getValues([`${chainId}.${poolAddress}.liquidity`])\r\n      .catch((err) => console.log('getPoolLiquidity', err));\r\n    const { symbol } = getPoolContractAddress(chainId, poolAddress)\r\n    if (res) {\r\n      const [liquidity] = res;\r\n      return {\r\n        liquidity: deriToNatural(liquidity).toString(),\r\n        symbol,\r\n      };\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\n\r\n/**\r\n * Get pool apy\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @returns {Object} response\r\n * @returns {string} response.apy\r\n * @returns {string} response.volume1h\r\n * @returns {string} response.volume24h\r\n */\r\nexport const getPoolInfoApy = async (chainId, poolAddress) => {\r\n  const db = databaseFactory(true);\r\n  //const [poolAddress] = getPoolContractAddress(chainId, bSymbol);\r\n  //console.log('getPoolInfoApy', chainId, poolAddress);\r\n  try {\r\n    const poolNetwork = getNetworkName(chainId);\r\n    const res = await db\r\n      .getValues([\r\n        `${poolNetwork}.${poolAddress}.apy`,\r\n        `${poolNetwork}.${poolAddress}.volume.1h`,\r\n        `${poolNetwork}.${poolAddress}.volume.24h`,\r\n      ])\r\n      .catch((err) => console.log('getPoolInfoApy', err));\r\n    if (res) {\r\n      const [apy, volume1h, volume24h] = res;\r\n      return {\r\n        apy: deriToNatural(apy).toString(),\r\n        volume1h: deriToNatural(volume1h).toString(),\r\n        volume24h: deriToNatural(volume24h).toString(),\r\n      };\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\n\r\n/**\r\n * Get apy of the Slp pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @returns {Object} response\r\n * @returns {string} response.apy\r\n * @returns {string} response.volume1h\r\n * @returns {string} response.volume24h\r\n */\r\nexport const getLpPoolInfoApy = async (chainId, poolAddress) => {\r\n  const db = databaseFactory(true);\r\n  try {\r\n    const poolNetwork = getNetworkName(chainId);\r\n    const res = await db\r\n      .getValues([\r\n        `${poolNetwork}.${poolAddress}.apy`,\r\n        `${poolNetwork}.${poolAddress}.apy2`,\r\n        `${poolNetwork}.${poolAddress}.volume.1h`,\r\n        `${poolNetwork}.${poolAddress}.volume.24h`,\r\n      ])\r\n      .catch((err) => console.log('getPoolInfoApy', err));\r\n    if (res) {\r\n      const [apy, apy2, volume1h, volume24h] = res;\r\n      return {\r\n        apy: deriToNatural(apy).toString(),\r\n        apy2: deriToNatural(apy2).toString(),\r\n        volume1h: deriToNatural(volume1h).toString(),\r\n        volume24h: deriToNatural(volume24h).toString(),\r\n      };\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\n\r\n/**\r\n * Get apy of the Clp pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @returns {Object} response\r\n * @returns {string} response.apy\r\n * @returns {string} response.volume1h\r\n * @returns {string} response.volume24h\r\n */\r\n// export const getClpPoolInfoApy = async (chainId, poolAddress) => {\r\n//   const db = databaseFactory(true);\r\n//   try {\r\n//     const poolNetwork = getNetworkName(chainId);\r\n//     const res = await db\r\n//       .getValues([\r\n//         `${poolNetwork}.${poolAddress}.apy`,\r\n//         `${poolNetwork}.${poolAddress}.apy2`,\r\n//         `${poolNetwork}.${poolAddress}.volume.1h`,\r\n//         `${poolNetwork}.${poolAddress}.volume.24h`,\r\n//       ])\r\n//       .catch((err) => console.log('getPoolInfoApy', err));\r\n//     if (res) {\r\n//       const [apy, apy2, volume1h, volume24h] = res;\r\n//       return {\r\n//         apy: deriToNatural(apy).toString(),\r\n//         apy2: deriToNatural(apy2).toString(),\r\n//         volume1h: deriToNatural(volume1h).toString(),\r\n//         volume24h: deriToNatural(volume24h).toString(),\r\n//       };\r\n//     }\r\n//   } catch (err) {\r\n//     console.log(err);\r\n//   }\r\n// };\r\n\r\n/**\r\n * Get user info of the pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} userAddress\r\n * @returns {Object} response\r\n * @returns {string} response.volume1h\r\n * @returns {string} response.volume24h\r\n */\r\nexport const getUserInfoInPool = async (chainId, poolAddress, userAddress) => {\r\n  const db = databaseFactory(true);\r\n  //const {poolAddress} = getPoolContractAddress(chainId, poolAddress);\r\n  userAddress = toChecksumAddress(userAddress);\r\n  try {\r\n    const poolNetwork = getNetworkName(chainId);\r\n    const res = await db\r\n      .getValues([\r\n        `${poolNetwork}.${poolAddress}.${userAddress}.volume.1h`,\r\n        `${poolNetwork}.${poolAddress}.${userAddress}.volume.24h`,\r\n      ])\r\n      .catch((err) => console.log('getUserInfoInPool', err));\r\n    if (res) {\r\n      const [volume1h, volume24h] = res;\r\n      return {\r\n        volume1h: deriToNatural(volume1h).toString(),\r\n        volume24h: deriToNatural(volume24h).toString(),\r\n      };\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\n\r\nexport const getUserInfoAllForAirDrop = async (userAddress) => {\r\n  const db = databaseAirdropFactory(true);\r\n  userAddress = toChecksumAddress(userAddress);\r\n  const res = await db\r\n    .getValues([\r\n      `${userAddress}.claim.chainId`,\r\n      `${userAddress}.claim.amount`,\r\n      `${userAddress}.claim.deadline`,\r\n      `${userAddress}.claim.nonce`,\r\n      `${userAddress}.claim.v1`,\r\n      `${userAddress}.claim.r1`,\r\n      `${userAddress}.claim.s1`,\r\n      `${userAddress}.claim.v2`,\r\n      `${userAddress}.claim.r2`,\r\n      `${userAddress}.claim.s2`,\r\n      `${userAddress}.claim.valid`,\r\n      // `${userAddress}.claim.harvest.lp`,\r\n      // `${userAddress}.claim.harvest.trade`,\r\n      // `${userAddress}.claim.total`,\r\n    ])\r\n    .catch((err) => console.log('getUserInfoAllForAirDrop', err));\r\n  if (res) {\r\n    const [\r\n      chainId,\r\n      amount,\r\n      deadline,\r\n      nonce,\r\n      v1,\r\n      r1,\r\n      s1,\r\n      v2,\r\n      r2,\r\n      s2,\r\n      valid,\r\n      // harvestLp,\r\n      // harvestTrade,\r\n      // total,\r\n    ] = res;\r\n    return {\r\n      chainId: deriToString(chainId),\r\n      amount: deriToNatural(amount).toString(),\r\n      deadline: deriToString(deadline),\r\n      nonce: deriToString(nonce),\r\n      v1: deriToString(v1),\r\n      r1,\r\n      s1,\r\n      v2: deriToString(v2),\r\n      r2,\r\n      s2,\r\n      valid: deriToBool(valid),\r\n      // lp: deriToNatural(harvestLp),\r\n      // trade: deriToNatural(harvestTrade),\r\n      // total: deriToString(total),\r\n    };\r\n  }\r\n};\r\n","import {\r\n  getPoolContractAddress,\r\n  //naturalToDeri,\r\n  deriToNatural,\r\n  hexToString,\r\n  toChecksumAddress,\r\n  hexToNumber,\r\n  hexToNumberString,\r\n} from '../utils';\r\nimport { databaseFactory, perpetualPoolFactory } from '../factory/contracts';\r\n\r\nconst processTradeEvent = async (\r\n  perpetualPool,\r\n  bTokenSymbol,\r\n  info,\r\n  blockNumber,\r\n  txHash,\r\n  multiplier,\r\n  feeRatio\r\n) => {\r\n  const tradeVolume = deriToNatural(info.tradeVolume);\r\n  const timeStamp = await perpetualPool._getTimeStamp(blockNumber);\r\n\r\n  const direction = tradeVolume.gt(0) ? 'LONG' : 'SHORT';\r\n  const price = deriToNatural(info.price);\r\n  const time = `${+timeStamp.timestamp}000`;\r\n  const transactionFee = perpetualPool._calculateFee(\r\n    tradeVolume,\r\n    price,\r\n    multiplier,\r\n    feeRatio\r\n  );\r\n  const notional = tradeVolume.abs().times(price).times(multiplier);\r\n  const volume = tradeVolume.abs();\r\n\r\n  const res = {\r\n    direction,\r\n    baseToken: bTokenSymbol,\r\n    price: price.toString(),\r\n    notional: notional.toString(),\r\n    volume: volume.toString(),\r\n    transactionFee: transactionFee.toString(),\r\n    transactionHash: txHash.toString(),\r\n    time,\r\n  };\r\n  // console.log(JSON.stringify(res))\r\n  return res;\r\n};\r\n\r\nconst processLiquidateEvent = async (\r\n  info,\r\n  txHash,\r\n  bTokenSymbol,\r\n  multiplier\r\n) => {\r\n  // console.log(info)\r\n  const volume = deriToNatural(info.volume).abs();\r\n  // const cost = deriToNatural(info.cost).abs()\r\n  // const margin = info.margin\r\n  const timestamp = `${info.timestamp}000`;\r\n  const price = deriToNatural(info.price);\r\n  // const liquidator = info.liquidator\r\n  // const reward = info.reward\r\n  const national = volume.times(price).times(multiplier);\r\n  // const transactionFee = volume.times(price).times(multiplier).times(feeRatio)\r\n\r\n  const res = {\r\n    direction: 'Liquidation',\r\n    baseToken: bTokenSymbol,\r\n    price: price.toString(),\r\n    notional: national.toString(),\r\n    volume: volume.toString(),\r\n    transactionFee: '0',\r\n    transactionHash: txHash.toString(),\r\n    time: timestamp,\r\n    // cost: naturalToDeri(cost).toString(),\r\n    // margin: margin.toString(),\r\n    // liquidator,\r\n    // reward: reward.toString(),\r\n  };\r\n  return res;\r\n};\r\n\r\n/**\r\n * Get the user trade history\r\n * @async\r\n * @method\r\n * @param {string} chainId - Chain Id\r\n * @param {string} poolAddress - Pool Address\r\n * @param {string} accountAddress - Account Address\r\n * @returns {Object[]} response\r\n * @returns {string} response[].direction\r\n * @returns {string} response[].baseToken\r\n * @returns {string} response[].price\r\n * @returns {string} response[].notional\r\n * @returns {string} response[].volume\r\n * @returns {string} response[].transactionFee\r\n * @returns {string} response[].time - Timestamp of the trade\r\n */\r\n\r\nexport const getTradeHistory = async (chainId, poolAddress, accountAddress) => {\r\n  const keyMeta = `${chainId}.${poolAddress}`;\r\n  const db = databaseFactory();\r\n  let [tradeFromBlock, liquidateFromBlock] = await Promise.all([\r\n    db.getValues([`${keyMeta}.tradeHistoryBlock`]),\r\n    db.getValues([`${keyMeta}.liquidateHistoryBlock`]),\r\n  ]);\r\n  tradeFromBlock = hexToNumber(tradeFromBlock[0]);\r\n  liquidateFromBlock = hexToNumber(liquidateFromBlock[0]);\r\n  if (tradeFromBlock !== 0 && liquidateFromBlock !== 0) {\r\n    // console.log(tradeFromBlock, liquidateFromBlock)\r\n    const [\r\n      tradeHistoryOffline,\r\n      tradeHistoryOnline,\r\n      liquidateHistoryOffline,\r\n      liquidateHistoryOnline,\r\n    ] = await Promise.all([\r\n      getTradeHistoryOffline(chainId, poolAddress, accountAddress),\r\n      getTradeHistoryOnline(\r\n        chainId,\r\n        poolAddress,\r\n        accountAddress,\r\n        tradeFromBlock + 1\r\n      ),\r\n      getLiquidateHistoryOffline(chainId, poolAddress, accountAddress),\r\n      getLiquidateHistoryOnline(\r\n        chainId,\r\n        poolAddress,\r\n        accountAddress,\r\n        liquidateFromBlock + 1\r\n      ),\r\n    ]);\r\n    const result = tradeHistoryOnline\r\n      .concat(liquidateHistoryOnline)\r\n      .concat(tradeHistoryOffline)\r\n      .concat(liquidateHistoryOffline);\r\n    return result.sort((a, b) => parseInt(b.time) - parseInt(a.time));\r\n  } else {\r\n    const { initialBlock } = getPoolContractAddress(chainId, poolAddress);\r\n    tradeFromBlock = parseInt(initialBlock);\r\n    liquidateFromBlock = parseInt(initialBlock);\r\n    const [tradeHistoryOnline, liquidateHistoryOnline] = await Promise.all([\r\n      getTradeHistoryOnline(\r\n        chainId,\r\n        poolAddress,\r\n        accountAddress,\r\n        tradeFromBlock + 1\r\n      ),\r\n      getLiquidateHistoryOnline(\r\n        chainId,\r\n        poolAddress,\r\n        accountAddress,\r\n        liquidateFromBlock + 1\r\n      ),\r\n    ]);\r\n    const result = tradeHistoryOnline.concat(liquidateHistoryOnline);\r\n    return result.sort((a, b) => parseInt(b.time) - parseInt(a.time));\r\n  }\r\n};\r\n\r\n// get trade history combined from cache and from online pull\r\nconst getTradeHistoryOffline = async (chainId, poolAddress, accountAddress) => {\r\n  // console.log(chainId, poolAddress, accountAddress)\r\n  let result = [];\r\n  // use dev database\r\n  const db = databaseFactory();\r\n  const keyBlock = `${chainId}.${poolAddress}.tradeHistoryBlock`;\r\n  const keyMeta = `${chainId}.${poolAddress}.${toChecksumAddress(\r\n    accountAddress\r\n  )}.trade`;\r\n  //const [res, fromBlock] = await db.getValues([`${keyMeta}.count`, keyBlock]);\r\n  const [res] = await db.getValues([`${keyMeta}.count`, keyBlock]);\r\n  const count = hexToNumber(res);\r\n  try {\r\n    if (count && count >= 0) {\r\n      let keyArray = [];\r\n      for (let i = count; i > 0; i--) {\r\n        const key = `${keyMeta}.${i.toString()}`;\r\n        keyArray = keyArray.concat([\r\n          `${key}.direction`,\r\n          `${key}.baseToken`,\r\n          `${key}.price`,\r\n          `${key}.notional`,\r\n          `${key}.volume`,\r\n          `${key}.transactionFee`,\r\n          `${key}.transactionHash`,\r\n          `${key}.time`,\r\n        ]);\r\n      }\r\n      // console.log(keyArray)\r\n      const tradeHistoryLength = keyArray.length / 8;\r\n      // console.log(`trade history length: ${tradeHistoryLength}`)\r\n      const resp = await db.getValues(keyArray);\r\n      for (let i = 0; i < tradeHistoryLength; i++) {\r\n        const indexBase = i * 8;\r\n        //console.log(resp[indexBase + 6].trim());\r\n        const item = {\r\n          direction: hexToString(resp[indexBase]).trim(),\r\n          baseToken: hexToString(resp[indexBase + 1]).trim(),\r\n          price: deriToNatural(resp[indexBase + 2]).toString(),\r\n          notional: deriToNatural(resp[indexBase + 3]).toString(),\r\n          volume: deriToNatural(resp[indexBase + 4]).toString(),\r\n          transactionFee: deriToNatural(resp[indexBase + 5]).toString(),\r\n          transactionHash: resp[indexBase + 6],\r\n          time: hexToNumberString(resp[indexBase + 7]).toString(),\r\n        };\r\n        result.push(item);\r\n      }\r\n    } else {\r\n      result = [];\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n    result = [];\r\n  }\r\n  return result;\r\n};\r\n\r\n// get trade history online from the Block number\r\nexport const getTradeHistoryOnline = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  fromBlock\r\n) => {\r\n  const { bTokenSymbol } = getPoolContractAddress(chainId, poolAddress);\r\n  // console.log(poolAddr, bTokenAddress);\r\n  const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\r\n  //perpetualPool.setAccount(accountAddress);\r\n  const toBlock = await perpetualPool._getBlockInfo('latest');\r\n  /// let { initialBlock:fromBlock} = getPoolContractAddress(chainId, poolAddress)\r\n  fromBlock = parseInt(fromBlock);\r\n  const filters = { owner: accountAddress };\r\n  const events = await perpetualPool._getPastEvents(\r\n    'Trade',\r\n    filters,\r\n    fromBlock,\r\n    toBlock.number\r\n  );\r\n  const {\r\n    multiplier,\r\n    feeRatio,\r\n    minInitialMarginRatio,\r\n  } = await perpetualPool.getParameters();\r\n\r\n  const result = [];\r\n  // console.log(\"events length:\", events.length);\r\n  for (let i = 0; i < events.length; i++) {\r\n    const item = events[i];\r\n    // const info = item.returnValues;\r\n    const res = await processTradeEvent(\r\n      perpetualPool,\r\n      bTokenSymbol,\r\n      item.returnValues,\r\n      item.blockNumber,\r\n      item.transactionHash,\r\n      multiplier,\r\n      feeRatio,\r\n      minInitialMarginRatio\r\n    );\r\n    result.unshift(res);\r\n  }\r\n  return result;\r\n};\r\n\r\n// get liquidate history online from the Block number\r\nexport const getLiquidateHistoryOnline = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  fromBlock\r\n) => {\r\n  const { bTokenSymbol } = getPoolContractAddress(chainId, poolAddress);\r\n  // console.log(poolAddr, bTokenAddress);\r\n  const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\r\n  //perpetualPool.setAccount(accountAddress);\r\n  const toBlock = await perpetualPool._getBlockInfo('latest');\r\n  fromBlock = parseInt(fromBlock);\r\n  const filters = { owner: accountAddress };\r\n  const events = await perpetualPool._getPastEvents(\r\n    'Liquidate',\r\n    filters,\r\n    fromBlock,\r\n    toBlock.number\r\n  );\r\n  const { multiplier } = await perpetualPool.getParameters();\r\n\r\n  const result = [];\r\n  // console.log(\"events length:\", events.length);\r\n  for (let i = 0; i < events.length; i++) {\r\n    const item = events[i];\r\n    // const info = item.returnValues;\r\n    const res = await processLiquidateEvent(\r\n      item.returnValues,\r\n      item.transactionHash,\r\n      bTokenSymbol,\r\n      multiplier\r\n    );\r\n    result.unshift(res);\r\n  }\r\n  return result;\r\n};\r\n\r\n// get trade history combined from cache and from online pull\r\nconst getLiquidateHistoryOffline = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress\r\n) => {\r\n  let result = [];\r\n  // use dev database\r\n  const db = databaseFactory();\r\n  const keyBlock = `${chainId}.${poolAddress}.liquidateHistoryBlock`;\r\n  const keyMeta = `${chainId}.${poolAddress}.${toChecksumAddress(\r\n    accountAddress\r\n  )}.liquidate`;\r\n  //const [res, fromBlock] = await db.getValues([`${keyMeta}.count`, keyBlock]);\r\n  const [res] = await db.getValues([`${keyMeta}.count`, keyBlock]);\r\n  const count = hexToNumber(res);\r\n  try {\r\n    if (count && count >= 0) {\r\n      let keyArray = [];\r\n      for (let i = count; i > 0; i--) {\r\n        const key = `${keyMeta}.${i.toString()}`;\r\n        keyArray = keyArray.concat([\r\n          `${key}.direction`,\r\n          `${key}.baseToken`,\r\n          `${key}.price`,\r\n          `${key}.notional`,\r\n          `${key}.volume`,\r\n          `${key}.transactionFee`,\r\n          `${key}.transactionHash`,\r\n          `${key}.time`,\r\n        ]);\r\n      }\r\n      // console.log(keyArray)\r\n      const liquidateHistoryLength = keyArray.length / 8;\r\n      const resp = await db.getValues(keyArray);\r\n      for (let i = 0; i < liquidateHistoryLength; i++) {\r\n        const indexBase = i * 8;\r\n        const item = {\r\n          direction: hexToString(resp[indexBase]).trim(),\r\n          baseToken: hexToString(resp[indexBase + 1]).trim(),\r\n          price: deriToNatural(resp[indexBase + 2]).toString(),\r\n          notional: deriToNatural(resp[indexBase + 3]).toString(),\r\n          volume: deriToNatural(resp[indexBase + 4]).toString(),\r\n          transactionFee: deriToNatural(resp[indexBase + 5]).toString(),\r\n          transactionHash: resp[indexBase + 6],\r\n          time: hexToNumberString(resp[indexBase + 7]).toString(),\r\n        };\r\n        result.push(item);\r\n      }\r\n    } else {\r\n      result = [];\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n    result = [];\r\n  }\r\n  return result;\r\n};\r\n","// const\r\nimport { getRestServerConfig, DeriEnv } from '../config';\r\nimport { bg, getPoolContractAddress, deriToNatural } from '../utils';\r\nimport {\r\n  getLiquidateHistoryOnline,\r\n  getTradeHistoryOnline,\r\n} from './tradeHistoryApi';\r\n\r\nconst getHttpBase = () => {\r\n  return getRestServerConfig(DeriEnv.get());\r\n};\r\n\r\nconst fetchJson = async (url) => {\r\n  const resp = await fetch(url);\r\n  return await resp.json();\r\n};\r\n\r\n/**\r\n * Get specification from REST API, please refer {@link getSpecification}\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @returns {Object}\r\n */\r\nexport const getSpecification2 = async (chainId, poolAddress) => {\r\n  const res = await fetchJson(`${getHttpBase()}/specification/${poolAddress}`);\r\n  if (res && res.success) {\r\n    return res.data;\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Get funding rate from REST API, please refer {@link getFundingRate}\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @returns {Object}\r\n */\r\nexport const getFundingRate2 = async (chainId, poolAddress) => {\r\n  const res = await fetchJson(`${getHttpBase()}/funding_rate/${poolAddress}`);\r\n  if (res && res.success) {\r\n    return res.data;\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Get liquidity used from REST API, please refer {@link getLiquidityUsed}\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @returns {Object}\r\n */\r\nexport const getLiquidityUsed2 = async (chainId, poolAddress) => {\r\n  const res = await fetchJson(`${getHttpBase()}/liquidity_used/${poolAddress}`);\r\n  if (res && res.success) {\r\n    return res.data;\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Get funding rate cache from REST API, it used to 'fundingRateCache.update(chainId, poolAddress, result)'\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @returns {Object}\r\n */\r\nexport const getFundingRateCache2 = async (chainId, poolAddress) => {\r\n  const res = await fetchJson(\r\n    `${getHttpBase()}/funding_rate_cache/${poolAddress}`\r\n  );\r\n  if (res && res.success) {\r\n    let result = res.data;\r\n    result.price = bg(result.price);\r\n    result.fundingRate = bg(result.fundingRate);\r\n    result.liquidityUsed = bg(result.liquidityUsed);\r\n    return result;\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Get position info from REST API, please refer {@link getPositionInfo}\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {Object}\r\n */\r\nexport const getPositionInfo2 = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress\r\n) => {\r\n  const res = await fetchJson(\r\n    `${getHttpBase()}/position_info/${chainId}/${poolAddress}/${accountAddress}`\r\n  );\r\n  if (res && res.success) {\r\n    return res.data;\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Get liquidity info from REST API, please refer {@link getLiquidityInfo}\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {Object}\r\n */\r\nexport const getLiquidityInfo2 = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress\r\n) => {\r\n  const res = await fetchJson(\r\n    `${getHttpBase()}/liquidity_info/${chainId}/${poolAddress}/${accountAddress}`\r\n  );\r\n  if (res && res.success) {\r\n    return res.data;\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Get balance from REST API, please refer {@link getWalletBalance}\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {Object}\r\n */\r\nexport const getWalletBalance2 = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress\r\n) => {\r\n  const res = await fetchJson(\r\n    `${getHttpBase()}/wallet_balance/${chainId}/${poolAddress}/${accountAddress}`\r\n  );\r\n  if (res && res.success) {\r\n    return res.data;\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Get liquidity of the slp pool from REST API, please refer {@link getSlpLiquidityInfo}\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {Object}\r\n */\r\nexport const getSlpLiquidityInfo2 = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress\r\n) => {\r\n  const res = await fetchJson(\r\n    `${getHttpBase()}/slp_liquidity_info/${chainId}/${poolAddress}/${accountAddress}`\r\n  );\r\n  if (res && res.success) {\r\n    return res.data;\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Get balance of the slp pool from REST API, please refer {@link getSlpWalletBalance}\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {Object}\r\n */\r\nexport const getSlpWalletBalance2 = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress\r\n) => {\r\n  const res = await fetchJson(\r\n    `${getHttpBase()}/slp_wallet_balance/${chainId}/${poolAddress}/${accountAddress}`\r\n  );\r\n  if (res && res.success) {\r\n    return res.data;\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Get balance of the clp pool from REST API, please refer {@link getClpWalletBalance}\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {Object}\r\n */\r\nexport const getClpLiquidityInfo2 = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress\r\n) => {\r\n  const res = await fetchJson(\r\n    `${getHttpBase()}/clp_liquidity_info/${chainId}/${poolAddress}/${accountAddress}`\r\n  );\r\n  if (res && res.success) {\r\n    return res.data;\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Get balance of the clp pool from REST API, please refer {@link getSlpWalletBalance}\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {Object}\r\n */\r\nexport const getClpWalletBalance2 = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress\r\n) => {\r\n  const res = await fetchJson(\r\n    `${getHttpBase()}/clp_wallet_balance/${chainId}/${poolAddress}/${accountAddress}`\r\n  );\r\n  if (res && res.success) {\r\n    return res.data;\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Get balance of the deri pool from REST API, please refer {@link getDeriBalance}\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {Object}\r\n */\r\nexport const getDeriBalance2 = async (chainId, poolAddress, accountAddress) => {\r\n  const res = await fetchJson(\r\n    `${getHttpBase()}/deri_balance/${chainId}/${poolAddress}/${accountAddress}`\r\n  );\r\n  if (res && res.success) {\r\n    return res.data;\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Get the user trade history from REST API, please refer {@link getTradeHistory}\r\n * @async\r\n * @method\r\n * @param {string} chainId - Chain Id\r\n * @param {string} poolAddress - Pool Address\r\n * @param {string} accountAddress - Account Address\r\n * @returns {Object[]} response\r\n */\r\nexport const getTradeHistory2 = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress\r\n) => {\r\n  let tradeFromBlock, liquidateFromBlock, tradeHistory;\r\n  const res = await fetchJson(\r\n    `${getHttpBase()}/trade_history/${chainId}/${poolAddress}/${accountAddress}`\r\n  );\r\n  if (res && res.success) {\r\n    tradeFromBlock = parseInt(res.data.tradeHistoryBlock);\r\n    liquidateFromBlock = parseInt(res.data.liquidateHistoryBlock);\r\n    tradeHistory = res.data.tradeHistory;\r\n  }\r\n  tradeHistory = tradeHistory.filter((i) => i).map((i) => {\r\n    return {\r\n      direction: i.direction.trim(),\r\n      baseToken: i.baseToken.trim(),\r\n      price: deriToNatural(i.price).toString(),\r\n      notional: deriToNatural(i.notional).toString(),\r\n      volume: deriToNatural(i.volume).toString(),\r\n      transactionFee: deriToNatural(i.transactionFee).toString(),\r\n      transactionHash: i.transactionHash,\r\n      time: i.time.toString(),\r\n    };\r\n  });\r\n  if (tradeFromBlock !== 0 && liquidateFromBlock !== 0) {\r\n    // console.log(tradeFromBlock, liquidateFromBlock)\r\n    const [tradeHistoryOnline, liquidateHistoryOnline] = await Promise.all([\r\n      getTradeHistoryOnline(\r\n        chainId,\r\n        poolAddress,\r\n        accountAddress,\r\n        tradeFromBlock + 1\r\n      ),\r\n      getLiquidateHistoryOnline(\r\n        chainId,\r\n        poolAddress,\r\n        accountAddress,\r\n        liquidateFromBlock + 1\r\n      ),\r\n    ]);\r\n    const result = tradeHistoryOnline\r\n      .concat(liquidateHistoryOnline)\r\n      .concat(tradeHistory);\r\n    return result.sort((a, b) => parseInt(b.time) - parseInt(a.time));\r\n  } else {\r\n    const { initialBlock } = getPoolContractAddress(chainId, poolAddress);\r\n    tradeFromBlock = parseInt(initialBlock);\r\n    liquidateFromBlock = parseInt(initialBlock);\r\n    const [tradeHistoryOnline, liquidateHistoryOnline] = await Promise.all([\r\n      getTradeHistoryOnline(\r\n        chainId,\r\n        poolAddress,\r\n        accountAddress,\r\n        tradeFromBlock + 1\r\n      ),\r\n      getLiquidateHistoryOnline(\r\n        chainId,\r\n        poolAddress,\r\n        accountAddress,\r\n        liquidateFromBlock + 1\r\n      ),\r\n    ]);\r\n    const result = tradeHistoryOnline.concat(liquidateHistoryOnline);\r\n    return result.sort((a, b) => parseInt(b.time) - parseInt(a.time));\r\n  }\r\n};\r\n","import {\r\n  bTokenFactory,\r\n  lTokenFactory,\r\n  pTokenFactory,\r\n  perpetualPoolFactory,\r\n  miningVaultPoolFactory,\r\n  miningVaultRouterFactory,\r\n  wormholeFactory,\r\n  deriFactory,\r\n  databaseWormholeFactory,\r\n} from '../factory/contracts';\r\nimport { getUserInfoAll, getUserInfoAllForAirDrop } from './databaseApi';\r\nimport {\r\n  getPoolContractAddress,\r\n  getMiningVaultContractAddress,\r\n  getBTCUSDPrice,\r\n  bg,\r\n  naturalToDeri,\r\n  BigNumber,\r\n  format,\r\n  getDeriContractAddress,\r\n} from '../utils';\r\nimport {\r\n  getMiningVaultRouterContractAddress\r\n} from '../config'\r\nimport {\r\n  calculateMaxRemovableShares,\r\n  calculateMaxWithdrawMargin,\r\n  isOrderValid,\r\n} from '../calculation';\r\n\r\n/**\r\n * Unlock the account in the perpetual pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {string} response.[error]\r\n * @returns {Object} response.transaction - eth transaction receipt object\r\n */\r\nexport const unlock = async (chainId, poolAddress, accountAddress) => {\r\n  const { bTokenAddress } = getPoolContractAddress(chainId, poolAddress);\r\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\r\n  //bToken.setAccount(accountAddress);\r\n\r\n  let res;\r\n  try {\r\n    const tx = await bToken.unlock(accountAddress);\r\n    res = { success: true, transaction: tx };\r\n  } catch (err) {\r\n    res = { success: false, error: err };\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Deposit margin in the perpetual pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @param {string|number} amount\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {boolean} response.[error] - error message when request failed\r\n * @returns {Object} response.transaction - eth transaction receipt object\r\n */\r\nexport const depositMargin = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  amount\r\n) => {\r\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\r\n  return await pPool.depositMargin(accountAddress, naturalToDeri(amount));\r\n};\r\n\r\n/**\r\n * Withdraw margin in the perpetual pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @param {string} amount\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {boolean} response.[error] - error message when request failed\r\n * @returns {Object} response.transaction - eth transaction receipt object\r\n */\r\nexport const withdrawMargin = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  amount\r\n) => {\r\n  let res;\r\n  const { pTokenAddress } = getPoolContractAddress(chainId, poolAddress);\r\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\r\n  //pPool.setAccount(accountAddress);\r\n  const pToken = pTokenFactory(chainId, pTokenAddress, poolAddress);\r\n  //pToken.setAccount(accountAddress);\r\n\r\n  const price = await getBTCUSDPrice(chainId, poolAddress);\r\n  const { volume, margin, cost } = await pToken.getPositionInfo(accountAddress);\r\n  const { multiplier, minInitialMarginRatio } = await pPool.getParameters();\r\n\r\n  const maxWithdrawMargin = calculateMaxWithdrawMargin(\r\n    price,\r\n    volume,\r\n    margin,\r\n    cost,\r\n    multiplier,\r\n    minInitialMarginRatio\r\n  );\r\n  if (bg(amount).lte(maxWithdrawMargin)) {\r\n    try {\r\n      const tx = await pPool._transactPool(\r\n        'withdrawMargin(uint256,uint256,uint256,uint8,bytes32,bytes32)',\r\n        [naturalToDeri(amount)],\r\n        accountAddress\r\n      );\r\n      res = { success: true, transaction: tx };\r\n    } catch (err) {\r\n      res = { success: false, error: err };\r\n    }\r\n  } else {\r\n    res = { success: false, error: 'amount exceeds allowed' };\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Mint in the perpetual pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @param {string} amount\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {boolean} response.[error] - error message when request failed\r\n * @returns {Object} response.transaction - eth transaction receipt object\r\n */\r\nexport const mint = async (chainId, poolAddress, accountAddress, amount) => {\r\n  const { bTokenAddress } = getPoolContractAddress(chainId, poolAddress);\r\n  //const pPool = perpetualPoolFactory(chainId, poolAddress);\r\n  //pPool.setAccount(accountAddress);\r\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\r\n  //bToken.setAccount(accountAddress);\r\n  const decimals = await bToken.decimals();\r\n  const BONE = 10 ** decimals;\r\n  amount = format(new BigNumber(amount).multipliedBy(BONE));\r\n  let res;\r\n  try {\r\n    const tx = await bToken._transact('mint', [amount], accountAddress);\r\n    res = { success: true, transaction: tx };\r\n  } catch (error) {\r\n    res = { success: false, error };\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Add liquidity in the perpertual pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @param {string} amount\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {boolean} response.[error] - error message when request failed\r\n * @returns {Object} response.transaction - eth transaction receipt object\r\n */\r\nexport const addLiquidity = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  amount\r\n) => {\r\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\r\n  //pPool.setAccount(accountAddress);\r\n  let res;\r\n  try {\r\n    const tx = await pPool._transactPool(\r\n      'addLiquidity(uint256,uint256,uint256,uint8,bytes32,bytes32)',\r\n      [naturalToDeri(amount)],\r\n      accountAddress\r\n    );\r\n    res = { success: true, transaction: tx };\r\n  } catch (err) {\r\n    res = { success: false, error: err };\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Remove liquidity in the perpertual pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @param {string} shares\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {boolean} response.[error] - error message when request failed\r\n * @returns {Object} response.transaction - eth transaction receipt object\r\n */\r\nexport const removeLiquidity = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  shares\r\n) => {\r\n  const { lTokenAddress } = getPoolContractAddress(chainId, poolAddress);\r\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\r\n  //pPool.setAccount(accountAddress);\r\n  const lToken = lTokenFactory(chainId, lTokenAddress, poolAddress);\r\n  //lToken.setAccount(accountAddress);\r\n  const price = await getBTCUSDPrice(chainId, poolAddress);\r\n  const [lTokenBalance, lTokenTotalSupply] = await Promise.all([\r\n    lToken.balance(accountAddress),\r\n    lToken.totalSupply(),\r\n  ]);\r\n  const { multiplier, minPoolMarginRatio } = await pPool.getParameters();\r\n  const {\r\n    liquidity,\r\n    tradersNetVolume,\r\n    tradersNetCost,\r\n  } = await pPool.getStateValues();\r\n\r\n  const maxRemovableShares = calculateMaxRemovableShares(\r\n    lTokenBalance,\r\n    lTokenTotalSupply,\r\n    liquidity,\r\n    tradersNetVolume,\r\n    tradersNetCost,\r\n    multiplier,\r\n    minPoolMarginRatio,\r\n    price\r\n  );\r\n  let res;\r\n  if (bg(shares).lte(maxRemovableShares)) {\r\n    try {\r\n      const tx = await pPool._transactPool(\r\n        'removeLiquidity(uint256,uint256,uint256,uint8,bytes32,bytes32)',\r\n        [naturalToDeri(shares)],\r\n        accountAddress\r\n      );\r\n      res = { success: true, transaction: tx };\r\n    } catch (err) {\r\n      res = { success: false, error: err };\r\n    }\r\n  } else {\r\n    res = { success: false, error: 'shares exceeds allowed' };\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Trade with margin in the perpertual pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @param {string} newVolume\r\n * @param {string} amount\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {boolean} response.[error] - error message when request failed\r\n * @returns {Object} response.transaction - eth transaction receipt object\r\n */\r\nexport const tradeWithMargin = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  newVolume,\r\n  amount = '0'\r\n) => {\r\n  const price = await getBTCUSDPrice(chainId, poolAddress);\r\n  const { pTokenAddress } = getPoolContractAddress(chainId, poolAddress);\r\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\r\n  //pPool.setAccount(accountAddress);\r\n  const pToken = pTokenFactory(chainId, pTokenAddress, poolAddress);\r\n  //pToken.setAccount(accountAddress);\r\n  const {\r\n    multiplier,\r\n    minInitialMarginRatio,\r\n    minPoolMarginRatio,\r\n  } = await pPool.getParameters();\r\n  const { liquidity, tradersNetVolume } = await pPool.getStateValues();\r\n  const { volume, margin } = await pToken.getPositionInfo(accountAddress);\r\n  let res;\r\n  const orderValidation = isOrderValid(\r\n    price,\r\n    margin,\r\n    volume,\r\n    liquidity,\r\n    tradersNetVolume,\r\n    multiplier,\r\n    minPoolMarginRatio,\r\n    minInitialMarginRatio,\r\n    bg(newVolume),\r\n    bg(amount)\r\n  );\r\n  if (orderValidation.success) {\r\n    try {\r\n      const tx = await pPool._transactPool(\r\n        'tradeWithMargin(int256,uint256,uint256,uint256,uint8,bytes32,bytes32)',\r\n        [naturalToDeri(newVolume), naturalToDeri(amount)],\r\n        accountAddress\r\n      );\r\n      res = { success: true, transaction: tx };\r\n    } catch (err) {\r\n      res = { success: false, error: err };\r\n    }\r\n  } else {\r\n    res = { success: false, error: orderValidation.message };\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Close position in the perpertual pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {boolean} response.[error] - error message when request failed\r\n * @returns {Object} response.transaction - eth transaction receipt object\r\n */\r\nexport const closePosition = async (chainId, poolAddress, accountAddress) => {\r\n  const { pTokenAddress } = getPoolContractAddress(chainId, poolAddress);\r\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\r\n  //pPool.setAccount(accountAddress);\r\n  const pToken = pTokenFactory(chainId, pTokenAddress, poolAddress);\r\n  //pToken.setAccount(accountAddress);\r\n  let { volume } = await pToken.getPositionInfo(accountAddress);\r\n  volume = volume.negated();\r\n  let res;\r\n  if (!volume.eq(0)) {\r\n    try {\r\n      const tx = await pPool._transactPool(\r\n        'tradeWithMargin(int256,uint256,uint256,uint256,uint8,bytes32,bytes32)',\r\n        [naturalToDeri(volume), '0'],\r\n        accountAddress\r\n      );\r\n      res = { success: true, transaction: tx };\r\n    } catch (err) {\r\n      res = { success: false, error: err };\r\n    }\r\n  } else {\r\n    res = { success: false, error: 'no position to close' };\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Mint DToken in the perpertual pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {boolean} response.[error] - error message when request failed\r\n * @returns {Object} response.transaction - eth transaction receipt object\r\n */\r\nexport const mintDToken = async (chainId, accountAddress) => {\r\n  let res;\r\n  const userInfo = await getUserInfoAll(accountAddress);\r\n  const amount = naturalToDeri(userInfo.amount);\r\n  const { deadline } = userInfo;\r\n  const { nonce } = userInfo;\r\n  const { v } = userInfo;\r\n  const { r } = userInfo;\r\n  const { s } = userInfo;\r\n  if (userInfo.valid) {\r\n    const miningVaultAddress = getMiningVaultContractAddress(chainId);\r\n    if (miningVaultAddress) {\r\n      const miningVault = miningVaultPoolFactory(chainId, miningVaultAddress);\r\n      //miningVault.setAccount(accountAddress);\r\n      try {\r\n        const tx = await miningVault.mintDToken(\r\n          accountAddress,\r\n          amount,\r\n          deadline,\r\n          nonce,\r\n          v,\r\n          r,\r\n          s\r\n        );\r\n        res = { success: true, transaction: tx };\r\n      } catch (err) {\r\n        res = { success: false, error: err };\r\n      }\r\n    } else {\r\n      res = {\r\n        success: false,\r\n        error: `cannot find the mining vault address in chain ${chainId}`,\r\n      };\r\n    }\r\n  } else {\r\n    res = {\r\n      success: false,\r\n      error: 'userinfo is not valid',\r\n    };\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * freeze Deri in current wormhole pool to the specified chain\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} accountAddress\r\n * @param {string} toChainId\r\n * @param {string} amount\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {boolean} response.[error] - error message when request failed\r\n * @returns {Object} response.transaction - eth transaction receipt object\r\n */\r\nexport const freeze = async (chainId, accountAddress, toChainId, amount) => {\r\n  const { wormholeAddress } = getDeriContractAddress(chainId);\r\n  const wormhole = wormholeFactory(chainId, wormholeAddress);\r\n  //wormhole.setAccount(accountAddress);\r\n  let res;\r\n  try {\r\n    const tx = await wormhole.freeze(accountAddress, amount, toChainId);\r\n    res = { success: true, transaction: tx };\r\n  } catch (error) {\r\n    res = { success: false, error };\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Mint Deri in wormhole pool\r\n * @async\r\n * @method\r\n * @param {string} toChainId\r\n * @param {string} accountAddress\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {boolean} response.[error] - error message when request failed\r\n * @returns {Object} response.transaction - eth transaction receipt object\r\n */\r\nexport const mintDeri = async (toChainId, accountAddress) => {\r\n  let res;\r\n  const databaseWormhole = databaseWormholeFactory(true);\r\n  // const userInfo = await getUserInfoAll(accountAddress);\r\n  const userInfo = await databaseWormhole.signature(accountAddress);\r\n  // console.log(userInfo)\r\n  const { amount } = userInfo;\r\n  const { fromChainId } = userInfo;\r\n  const { fromWormhole } = userInfo;\r\n  const fromNonce = userInfo.nonce;\r\n  const { v } = userInfo;\r\n  const { r } = userInfo;\r\n  const { s } = userInfo;\r\n  if (userInfo.valid) {\r\n    const { wormholeAddress } = getDeriContractAddress(toChainId);\r\n    if (wormholeAddress) {\r\n      const wormhole = wormholeFactory(toChainId, wormholeAddress);\r\n      //wormhole.setAccount(accountAddress);\r\n      try {\r\n        const tx = await wormhole.mintDeri(\r\n          accountAddress,\r\n          amount,\r\n          fromChainId,\r\n          fromWormhole,\r\n          fromNonce,\r\n          v,\r\n          r,\r\n          s\r\n        );\r\n        res = { success: true, transaction: tx };\r\n      } catch (err) {\r\n        res = { success: false, error: err };\r\n      }\r\n    } else {\r\n      res = {\r\n        success: false,\r\n        error: `cannot find the wormhole address in chain ${fromChainId}`,\r\n      };\r\n    }\r\n  } else {\r\n    res = {\r\n      success: false,\r\n      error: 'userinfo is not valid',\r\n    };\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Unlock the account in the deri pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} accountAddress\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {string} response.[error]\r\n * @returns {Object} response.transaction - eth transaction receipt object\r\n */\r\nexport const unlockDeri = async (chainId, accountAddress) => {\r\n  const { wormholeAddress, deriAddress } = getDeriContractAddress(chainId);\r\n  const deri = deriFactory(chainId, deriAddress, wormholeAddress);\r\n  //deri.setAccount(accountAddress).setPool(wormholeAddress);\r\n  let res;\r\n  try {\r\n    const tx = await deri.unlock(accountAddress);\r\n    res = { success: true, transaction: tx };\r\n  } catch (error) {\r\n    res = { success: false, error };\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Mint Airdrop in the perpertual pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {boolean} response.[error] - error message when request failed\r\n * @returns {Object} response.transaction - eth transaction receipt object\r\n */\r\nexport const mintAirdrop = async (chainId, accountAddress) => {\r\n  let res;\r\n  const userInfo = await getUserInfoAllForAirDrop(accountAddress);\r\n  const amount = naturalToDeri(userInfo.amount).toString();\r\n  const { deadline, nonce, v1, r1, s1, v2, r2, s2 } = userInfo;\r\n  if (userInfo.valid) {\r\n    const miningVaultAddress = getMiningVaultRouterContractAddress(chainId);\r\n    // console.log(\"miningVaultAddress\", miningVaultAddress)\r\n    // console.log(\"userInfo\", userInfo)\r\n    if (miningVaultAddress) {\r\n      const miningVaultRouter = miningVaultRouterFactory(\r\n        chainId,\r\n        miningVaultAddress\r\n      );\r\n      try {\r\n        const tx = await miningVaultRouter.mint(\r\n          accountAddress,\r\n          amount,\r\n          deadline,\r\n          nonce,\r\n          v1,\r\n          r1,\r\n          s1,\r\n          v2,\r\n          r2,\r\n          s2\r\n        );\r\n        res = { success: true, transaction: tx };\r\n      } catch (err) {\r\n        res = { success: false, error: err };\r\n      }\r\n    } else {\r\n      res = {\r\n        success: false,\r\n        error: `cannot find the mining vault router address in chain ${chainId}`,\r\n      };\r\n    }\r\n  } else {\r\n    res = {\r\n      success: false,\r\n      error: 'userinfo is not valid',\r\n    };\r\n  }\r\n  return res;\r\n};\r\n","import {\r\n  addLiquidity,\r\n  removeLiquidity,\r\n  depositMargin,\r\n  withdrawMargin,\r\n  tradeWithMargin,\r\n  closePosition,\r\n} from './contractTransactionApi';\r\nimport {\r\n  addSlpLiquidity,\r\n  removeSlpLiquidity,\r\n} from './slpPoolApi'\r\nimport {\r\n  addClpLiquidity,\r\n  removeClpLiquidity,\r\n} from './clpPoolApi'\r\nimport {\r\n  addClp2Liquidity,\r\n  removeClp2Liquidity,\r\n} from './clp2PoolApi'\r\nimport { wsInstance } from './apiGlobals'\r\nimport { getRestServerConfig, DeriEnv } from '../config'\r\n\r\nconst wsOnPromise = (ws, event) => {\r\n  return new Promise((resolve) => {\r\n    ws.on(event, function(data){\r\n      resolve(JSON.parse(data))\r\n    })\r\n  })\r\n}\r\nconst sendTradeTxToWorkerQuene = async(methodCall) => {\r\n  const ws = wsInstance.getOrSet(getRestServerConfig(DeriEnv.get()))\r\n  await ws.send(methodCall)\r\n  const res = await wsOnPromise(ws, 'trade_tx_receipt')\r\n  //console.log('res', res)\r\n  return res\r\n}\r\n\r\nexport const tradeWithMargin2 = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  newVolume,\r\n  amount = '0'\r\n) => {\r\n  const res = await tradeWithMargin(chainId, poolAddress, accountAddress, newVolume, amount)\r\n  if (res.success) {\r\n    const res2 = await sendTradeTxToWorkerQuene(`trade_with_margin(${chainId},${poolAddress},${accountAddress})`)\r\n    return {...res2, ...res}\r\n  } else {\r\n    return res\r\n  }\r\n};\r\n\r\nexport const closePosition2 = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  newVolume,\r\n  amount = '0'\r\n) => {\r\n  const res = await closePosition(chainId, poolAddress, accountAddress, newVolume, amount)\r\n  if (res.success) {\r\n    const res2 = await sendTradeTxToWorkerQuene(`close_position(${chainId},${poolAddress},${accountAddress})`)\r\n    return {...res2, ...res}\r\n  } else {\r\n    return res\r\n  }\r\n};\r\n\r\nexport const depositMargin2 = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  amount = '0'\r\n) => {\r\n  const res = await depositMargin(chainId, poolAddress, accountAddress, amount)\r\n  if (res.success) {\r\n    const res2 = await sendTradeTxToWorkerQuene(`deposit_margin(${chainId},${poolAddress},${accountAddress})`)\r\n    return {...res2, ...res}\r\n  } else {\r\n    return res\r\n  }\r\n};\r\n\r\nexport const withdrawMargin2 = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  amount = '0'\r\n) => {\r\n  const res = await withdrawMargin(chainId, poolAddress, accountAddress, amount)\r\n  if (res.success) {\r\n    const res2 = await sendTradeTxToWorkerQuene(`withdraw_margin(${chainId},${poolAddress},${accountAddress})`)\r\n    return {...res2, ...res}\r\n  } else {\r\n    return res\r\n  }\r\n};\r\n\r\nexport const addLiquidity2 = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  amount = '0'\r\n) => {\r\n  const res = await addLiquidity(chainId, poolAddress, accountAddress, amount)\r\n  if (res.success) {\r\n    const res2 = await sendTradeTxToWorkerQuene(`add_liquidity(${chainId},${poolAddress},${accountAddress})`)\r\n    return {...res2, ...res}\r\n  } else {\r\n    return res\r\n  }\r\n};\r\n\r\nexport const removeLiquidity2 = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  shares = '0'\r\n) => {\r\n  const res = await removeLiquidity(chainId, poolAddress, accountAddress, shares)\r\n  if (res.success) {\r\n    const res2 = await sendTradeTxToWorkerQuene(`remove_liquidity(${chainId},${poolAddress},${accountAddress})`)\r\n    return {...res2, ...res}\r\n  } else {\r\n    return res\r\n  }\r\n};\r\n\r\nexport const addSlpLiquidity2 = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  amount = '0'\r\n) => {\r\n  const res = await addSlpLiquidity(chainId, poolAddress, accountAddress, amount)\r\n  if (res.success) {\r\n    const res2 = await sendTradeTxToWorkerQuene(`add_slp_liquidity(${chainId},${poolAddress},${accountAddress})`)\r\n    return {...res2, ...res}\r\n  } else {\r\n    return res\r\n  }\r\n};\r\n\r\nexport const removeSlpLiquidity2 = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  shares = '0'\r\n) => {\r\n  const res = await removeSlpLiquidity(chainId, poolAddress, accountAddress, shares)\r\n  if (res.success) {\r\n    const res2 = await sendTradeTxToWorkerQuene(`remove_slp_liquidity(${chainId},${poolAddress},${accountAddress})`)\r\n    return {...res2, ...res}\r\n  } else {\r\n    return res\r\n  }\r\n};\r\nexport const addClpLiquidity2 = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  amount = '0'\r\n) => {\r\n  const res = await addClpLiquidity(chainId, poolAddress, accountAddress, amount)\r\n  if (res.success) {\r\n    const res2 = await sendTradeTxToWorkerQuene(`add_clp_liquidity(${chainId},${poolAddress},${accountAddress})`)\r\n    return {...res2, ...res}\r\n  } else {\r\n    return res\r\n  }\r\n};\r\n\r\nexport const removeClpLiquidity2 = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  shares = '0'\r\n) => {\r\n  const res = await removeClpLiquidity(chainId, poolAddress, accountAddress, shares)\r\n  if (res.success) {\r\n    const res2 = await sendTradeTxToWorkerQuene(`remove_clp_liquidity(${chainId},${poolAddress},${accountAddress})`)\r\n    return {...res2, ...res}\r\n  } else {\r\n    return res\r\n  }\r\n};\r\n\r\nexport const addClp2Liquidity2 = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  amount = '0'\r\n) => {\r\n  const res = await addClp2Liquidity(chainId, poolAddress, accountAddress, amount)\r\n  if (res.success) {\r\n    const res2 = await sendTradeTxToWorkerQuene(`add_clp_liquidity(${chainId},${poolAddress},${accountAddress})`)\r\n    return {...res2, ...res}\r\n  } else {\r\n    return res\r\n  }\r\n};\r\n\r\nexport const removeClp2Liquidity2 = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  shares = '0'\r\n) => {\r\n  const res = await removeClp2Liquidity(chainId, poolAddress, accountAddress, shares)\r\n  if (res.success) {\r\n    const res2 = await sendTradeTxToWorkerQuene(`remove_clp_liquidity(${chainId},${poolAddress},${accountAddress})`)\r\n    return {...res2, ...res}\r\n  } else {\r\n    return res\r\n  }\r\n};","import { perpetualPoolFactory } from '../factory/contracts';\r\nimport { getBTCUSDPrice } from '../utils';\r\nimport { io } from 'socket.io-client';\r\n\r\n/** @module apiCache */\r\n/**\r\n * fundingRateCache Object\r\n * @name fundingRateCache\r\n * @property {function} get - Get the funding rate from cache\r\n * @property {function} set - set the funding rate cache\r\n */\r\nexport const fundingRateCache = (function () {\r\n  let resourceMap = {};\r\n  return {\r\n    get(chainId, contractAddress) {\r\n      const key = `${chainId}.${contractAddress}`;\r\n      if (Object.keys(resourceMap).includes(key)) {\r\n        return resourceMap[key];\r\n      }\r\n      console.log(`Cache key is not in resouceMap: ${key}`);\r\n      return undefined;\r\n    },\r\n    set(chainId, contractAddress, resource) {\r\n      const key = `${chainId}.${contractAddress}`;\r\n      resourceMap[key] = resource;\r\n    },\r\n  };\r\n})();\r\n\r\nexport const accountAddressCache = (function () {\r\n  let _accountAddress = '';\r\n  return {\r\n    get() {\r\n      if (_accountAddress === '') {\r\n        console.log(\"please init 'accountAddress' first\");\r\n      }\r\n      return _accountAddress;\r\n    },\r\n    set(value) {\r\n      if (typeof value === 'string' && value !== '') {\r\n        _accountAddress = value;\r\n      }\r\n    },\r\n  };\r\n})();\r\n\r\n/**\r\n * priceCache Object\r\n * @name priceCache\r\n * @property {function} get - Get the price from cache\r\n * @property {function} update - Set the price to automatic update during a time interval\r\n * @property {function} clear - Clear the the automatic update of the price\r\n */\r\nexport const priceCache = (function () {\r\n  let _price = '';\r\n  let _interval = null;\r\n  return {\r\n    get() {\r\n      if (_price === '') {\r\n        console.log(\"please init 'price' first\");\r\n      }\r\n      return _price;\r\n    },\r\n    async _update(chainId, poolAddress) {\r\n      try {\r\n        const res = await getBTCUSDPrice(chainId, poolAddress);\r\n        if (res !== '') {\r\n          _price = res;\r\n        }\r\n      } catch (err) {\r\n        console.log(`priceCache.update: ${err}`)\r\n      }\r\n    },\r\n    update(chainId, poolAddress) {\r\n      const self = this;\r\n      _interval = setInterval(() => {\r\n        // console.log('tick')\r\n        self._update(chainId, poolAddress);\r\n      }, 3000);\r\n    },\r\n    clear() {\r\n      if (_interval) {\r\n        clearInterval(_interval);\r\n      }\r\n      _price = '';\r\n    },\r\n  };\r\n})();\r\n\r\n/**\r\n * PerpetualPoolParametersCache Object\r\n * @name PerpetualPoolParametersCache\r\n * @property {function} get - Get the perpetualPoolParameters from cache\r\n * @property {function} update - Set the perpetualPoolParameters\r\n */\r\n\r\nexport const PerpetualPoolParametersCache = (function () {\r\n  let _parameters = {};\r\n  return {\r\n    get() {\r\n      if (!_parameters.multiplier) {\r\n        console.log(\"please init 'perpetual pool parameters' first\");\r\n      }\r\n      return _parameters;\r\n    },\r\n    async update(chainId, poolAddress) {\r\n      const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\r\n      const res = await perpetualPool.getParameters();\r\n      if (res.multiplier) {\r\n        _parameters = res;\r\n      }\r\n      return res;\r\n    },\r\n  };\r\n})();\r\n\r\n// websocket instance\r\nexport const wsInstance = (function(){\r\n  let _ws = null;\r\n  return {\r\n    get() {\r\n      if (_ws) {\r\n        return _ws\r\n      } else {\r\n        console.log('wsInstance.get() error: ws instance is not init')\r\n      }\r\n    },\r\n    set(url) {\r\n      try {\r\n        const ws = io(url, {\r\n          transports: ['websocket'],\r\n          path: '/ws',\r\n        });\r\n        ws.on('connect', () => {\r\n          console.log('hello from ws:', ws.id);\r\n        })\r\n        if (ws) {\r\n          _ws = ws\r\n        } else {\r\n          console.log('wsInstance.get() error: ws instance is not init')\r\n        }\r\n      } catch (err) {\r\n        console.log('wsInstance.set():', err)\r\n      }\r\n    },\r\n    getOrSet(url) {\r\n      if (!_ws) {\r\n        this.set(url)\r\n      }\r\n      return _ws\r\n    }\r\n  }\r\n})();\r\n","\r\n\r\nimport BigNumber from 'bignumber.js'\r\nconst versionKey = 'deri-current-version'\r\n\r\nexport function bg(value, base = 0) {\r\n  if (base == 0) {\r\n    return BigNumber(value);\r\n  } else if (base > 0) {\r\n    return BigNumber(value).times(BigNumber(\"1\" + \"0\".repeat(base)));\r\n  } else {\r\n    return BigNumber(value).div(BigNumber(\"1\" + \"0\".repeat(-base)));\r\n  }\r\n}\r\n\r\nexport function deriNatural(value) {\r\n  return bg(value, -18);\r\n}\r\n\r\nexport function formatAddress(address){\r\n  return address && `${address.substr(0,6)}...${address.substr(-4)}`\r\n}\r\n\r\nexport function formatBalance(balance){\r\n  return balance && (+balance).toFixed(4)\r\n}\r\n\r\nexport function eqInNumber(str1,str2){\r\n  return (+str1) === (+str2)\r\n}\r\n\r\nexport function isLP(address){\r\n  return address === '0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd' || address === '0x73feaa1eE314F8c655E354234017bE2193C9E24E'\r\n}\r\nexport function isSushiLP(address){\r\n  return address === '0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd'\r\n}\r\nexport function isCakeLP(address){\r\n  return address === '0x73feaa1eE314F8c655E354234017bE2193C9E24E'\r\n}\r\n\r\nexport function sessionStorageKey(version){\r\n  return `${version}-current-trading-pool`\r\n}\r\n\r\n\r\nexport function storeVersion(version){\r\n  sessionStorage.setItem(versionKey,version)\r\n}\r\n\r\nexport function restoreVersion(){\r\n  return sessionStorage.getItem(versionKey)\r\n}\r\n\r\nexport function storeConfig(version,config){\r\n  if(config){\r\n    const key = sessionStorageKey(version);\r\n    sessionStorage.setItem(key,JSON.stringify(config))\r\n  }\r\n}\r\n\r\nexport function getConfigFromStore(version){\r\n  return JSON.parse(sessionStorage.getItem(sessionStorageKey(version)))\r\n}\r\n\r\n","import {isBrowser,isMobile} from 'react-device-detect'\r\nimport LoadableComponent from './utils/LoadableComponent';\r\n\r\nconst DesktopApp = LoadableComponent(() => import('./desktop/index'))\r\nconst MobileApp = LoadableComponent(() => import('./mobile/index'))\r\n\r\nfunction App() {\r\n  \r\n  if(isBrowser){\r\n    return <DesktopApp/>\r\n  }\r\n  if(isMobile){\r\n    return <MobileApp/>\r\n  }\r\n}\r\n\r\nexport default App;\r\n","\r\nimport {getUserWalletBalance ,DeriEnv,connectWallet, isUnlocked, unlock } from \"../lib/web3js/indexV2\";\r\nimport config from '../config.json'\r\nimport { formatBalance, eqInNumber } from \"../utils/utils\";\r\nimport { observable, computed, action, makeAutoObservable } from \"mobx\";\r\n\r\n\r\nclass Wallet {\r\n  \r\n  detail = {}\r\n  \r\n  constructor(){\r\n    makeAutoObservable(this,{\r\n      detail : observable,\r\n      setDetail : action,\r\n      supportV2 : computed,\r\n      supportChain : computed\r\n    })\r\n  }\r\n\r\n  isConnected = () => !!this.detail.account;\r\n\r\n\r\n  async isApproved(pool,bTokenId){\r\n    if(this.detail.chainId){\r\n      const isApproved = await isUnlocked(this.detail.chainId,pool,this.detail.account,bTokenId)\r\n      this.detail.isApproved = isApproved;\r\n      this.setDetail(this.detail)\r\n      return isApproved;\r\n    }\r\n  }\r\n\r\n  approve = async (pool,bTokenId) => {\r\n    if(this.detail.chainId){\r\n      const approved = await unlock(this.detail.chainId,pool,this.detail.account,bTokenId);\r\n      return approved\r\n    }\r\n  }\r\n\r\n  connect =  async () => {\r\n    const res = await connectWallet();\r\n    return new Promise(async (resolve,reject) => {\r\n      if(res.success){\r\n        const {chainId,account} = res\r\n        const wallet = await this.loadWalletBalance(chainId,account);        \r\n        resolve(wallet)\r\n      } else {\r\n        reject(null)\r\n      }\r\n    })\r\n  }\r\n\r\n  loadWalletBalance = async (chainId,account) => {\r\n    const balance = await getUserWalletBalance(chainId,account)\r\n    const detail = {chainId,account,balance,formatBalance : formatBalance(balance)}\r\n    const env = DeriEnv.get();\r\n    const {chainInfo} = config[env]\r\n    \r\n    if(chainInfo[chainId]){\r\n      Object.assign(detail,{...chainInfo[chainId],supported : true})\r\n    }\r\n    this.setDetail(detail)\r\n    return detail;\r\n  }\r\n\r\n  get = () => {\r\n    return this.detail;\r\n  }\r\n\r\n  setDetail(detail){\r\n    this.detail = detail;\r\n  }\r\n\r\n  get supportV2() {\r\n    return eqInNumber(this.detail.chainId,56) || eqInNumber(this.detail.chainId,97)\r\n  }\r\n\r\n  get supportChain(){\r\n    return this.detail.supported\r\n  }\r\n\r\n\r\n}\r\n\r\nexport default Wallet;","import { makeAutoObservable, observable, action} from \"mobx\";\r\nimport WebSocket from \"socket.io-client\";\r\n\r\nclass Oracle {\r\n  symbol = 'BTCUSD'\r\n  timeType = 'min'\r\n  index = 0.00\r\n  kData = []\r\n  ws = null\r\n  paused = false;\r\n  listeners = {}\r\n  already = false\r\n\r\n  constructor(){\r\n    makeAutoObservable(this,{\r\n      index : observable,\r\n      kData : observable,\r\n      setIndex : action,\r\n    })\r\n    this.initWebSocket()\r\n  }\r\n\r\n\r\n  initWebSocket(){\r\n    if(this.ws === null) {\r\n      this.ws = new WebSocket('wss://oracle4.deri.finance', {        \r\n        transports: ['websocket'],\r\n        withCredentials: true\r\n      })\r\n      this.ws.on('connect',() => {\r\n        if(this.already){\r\n          this.ws.emit('get_kline_update', {'symbol': this.symbol, 'time_type': this.timeType})\r\n          console.log('ws is reconnected already')\r\n        }\r\n        console.log('ws is already connected');\r\n      });\r\n    }    \r\n  }\r\n\r\n\r\n  load(symbol,timeType = 'min'){\r\n    // symbol = symbol+'_V2'\r\n    this.ws.on('kline_update',data => {\r\n      const obj = {}\r\n      let time = data.time\r\n      if (data.symbol.toUpperCase() === this.symbol.toUpperCase()) {\r\n        obj.time = time \r\n        obj.low = Number(data.low)\r\n        obj.high = Number(data.high)\r\n        obj.open = Number(data.open)\r\n        obj.close = Number(data.close)\r\n        obj.volume = Number(data.volume)\r\n        obj.time_type = data.time_type\r\n        obj.symbol = data.symbol\r\n        if(!this.paused) {\r\n          this.setIndex(obj.close)\r\n          for(const key of Object.keys(this.listeners)){\r\n            if(typeof this.listeners[key] === 'function'){\r\n              this.listeners[key](obj)\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    if(symbol !== this.symbol){\r\n      this.unsubscribeBars(this.symbol);\r\n    }\r\n    this.setSymbol(symbol)\r\n    this.setTimeType(timeType);\r\n    this.ws.emit('get_kline_update', {'symbol': this.symbol, 'time_type': this.timeType})\r\n    this.already = true\r\n  }\r\n\r\n  addListener(id,listener){\r\n    if(!this.listeners[id]) {\r\n      this.listeners[id] = listener\r\n    }    \r\n  }\r\n\r\n\r\n\r\n  unsubscribeBars(symbol){\r\n    this.ws.emit('un_get_kline_update', {\r\n      symbol : symbol, 'time_type' : 'min'\r\n    })\r\n  }\r\n\r\n\r\n  //暂不用\r\n  loadHistory(symbol,timeType,callback){\r\n    this.ws.on('kline_history', data => {\r\n      const history = data.map(el => {\r\n        return {\r\n          time: el.time,\r\n          low: Number(el.low),\r\n          high: Number(el.high),\r\n          open: Number(el.open),\r\n          close: Number(el.close),\r\n          volume: Number(el.volume)\r\n        }\r\n      })\r\n      if(callback){\r\n        console.log('history ->',history[history.length-1].time)\r\n        callback(history)\r\n      }\r\n    })\r\n    this.ws.emit('get_kline', {'symbol': symbol, 'time_type': timeType, 'bars': 1000})\r\n    // this.emit(symbol);\r\n  }\r\n\r\n  // start(symbol){\r\n  //   this.initWebSocket();\r\n  //   this.loadIndex(symbol);\r\n  //   this.ws.on('kline_update',data => {\r\n  //     const obj = {}\r\n  //     let time = data.time\r\n  //     if (data.symbol === this.symbol) {\r\n  //       obj.time = time \r\n  //       obj.low = Number(data.low)\r\n  //       obj.high = Number(data.high)\r\n  //       obj.open = Number(data.open)\r\n  //       obj.close = Number(data.close)\r\n  //       obj.volume = Number(data.volume)\r\n  //       this.setIndex(obj.close)\r\n  //     }\r\n  //   })\r\n  // }\r\n\r\n  resume(){\r\n    this.setPause(false)\r\n  }\r\n\r\n  pause(){\r\n    this.setPause(true)\r\n  }\r\n\r\n  setIndex(index){\r\n    if(!this.paused) {\r\n      this.index = index;\r\n    }\r\n  }\r\n\r\n  setSymbol(symbol){\r\n    this.symbol = symbol\r\n  }\r\n\r\n  setTimeType(timeType){\r\n    this.timeType = timeType;\r\n  }\r\n  setPause(paused){\r\n    this.paused = paused\r\n  }\r\n}\r\n\r\nexport default Oracle","import { getPositionInfo } from \"../lib/web3js/indexV2\"\r\n\r\nexport default class Position {\r\n\r\n  callback = () => {}\r\n   wallet = null;\r\n   spec = null\r\n \r\n   mockPositionInfo = {\r\n    averageEntryPrice: \"\",\r\n    liquidationPrice: \"\",\r\n    margin: \"20000\",\r\n    marginHeld: \"10068.26538\",\r\n    marginHeldBySymbol : \"293.16152\",\r\n    unrealizedPnl: \"3.1311\",\r\n    volume: \"800\",\r\n   }\r\n\r\n   async load(wallet,spec,callback){\r\n     if(wallet && wallet.isConnected() && wallet.supportChain && spec && spec.pool){\r\n      const position = await getPositionInfo(wallet.detail.chainId,spec.pool,wallet.detail.account,spec.symbolId)\r\n      if(position){\r\n        if(callback){\r\n          callback(position)\r\n        }\r\n      }\r\n      this.start(wallet,spec,callback)\r\n      return position;\r\n     }\r\n   }\r\n\r\n   start(wallet,spec,callback){\r\n     if(!this.interval){\r\n      this.interval = window.setInterval(() => this.load(wallet,spec,callback),3000)      \r\n      if(wallet){\r\n        this.wallet= wallet; \r\n      }\r\n      if(spec){\r\n        this.spec = spec\r\n      }\r\n      if(callback){\r\n        this.callback = callback;\r\n      }\r\n     }\r\n   }\r\n\r\n   pause(){\r\n    clearInterval(this.interval);\r\n    this.interval = null;\r\n   }\r\n\r\n   resume(wallet,spec,callback){\r\n     this.start(wallet,spec,callback || this.callback)\r\n   }\r\n\r\n   \r\n\r\n\r\n \r\n}","import { getSpecification } from \"../lib/web3js/indexV2\";\r\n\r\nexport default class Contract {\r\n  info = {\r\n    bSymbol:'BUSD',\r\n    symbol:'BTCUSD',\r\n    multiplier:'0.0001',\r\n    fundingRateCoefficient:'0.0000025',\r\n    minInitialMarginRatio:0.1,\r\n    minMaintenanceMarginRatio:0.05,\r\n    feeRatio:0.0005,\r\n  }\r\n\r\n  async load(wallet,config){\r\n    if(wallet && wallet.supportChain && config && config.pool !== this.info.pool){\r\n      const spec = await getSpecification(wallet.detail.chainId,config.pool,config.bTokenId,config.symbolId);\r\n      this.setInfo(spec)\r\n    }\r\n    return this.info\r\n  }\r\n\r\n  setInfo(info){\r\n    this.info = info\r\n  }\r\n}","import { getTradeHistory } from \"../lib/web3js/indexV2\";\r\n\r\n\r\nexport default class History {\r\n\r\n   async load(wallet,config){\r\n      if(wallet && wallet.detail.chainId && config && config.pool){\r\n         const all = await getTradeHistory(wallet.detail.chainId,config.pool,wallet.detail.account,config.symbolId);    \r\n         return all;\r\n      } else {\r\n         return []\r\n      }\r\n   }\r\n}","import { observable, action, computed, makeObservable } from \"mobx\";\r\nimport Oracle from \"./Oracle\";\r\nimport Position from \"./Position\";\r\nimport Contract from \"./Contract\";\r\nimport History from './History'\r\nimport Config from \"./Config\";\r\nimport { eqInNumber, storeConfig, getConfigFromStore } from \"../utils/utils\";\r\nimport { getFundingRate } from \"../lib/web3js/indexV2\";\r\nimport { bg } from \"../lib/web3js/indexV2\";\r\n\r\n/**\r\n * 交易模型\r\n * 关联对象\r\n * 1. chain\r\n * 2. Oracle\r\n * 3. position\r\n * 4. contract\r\n * 5. history\r\n * 计算\r\n * 1. dynamic balance\r\n * 2. available blance\r\n * 响应事件\r\n * 1. chain change\r\n * 2. chain’s symbol changed\r\n * 3. index update\r\n * 4. volum change\r\n * 5. margin change\r\n * 输出\r\n * 1. dynamic balance\r\n * 2. margin\r\n * 3. available balance\r\n * 4. volume\r\n * 5. specs\r\n * 6. spec\r\n * 7. position\r\n * 8. contract\r\n * 9. fundingRate\r\n */\r\n\r\nexport default class Trading {\r\n  version = null;\r\n  wallet = null;\r\n  configs = [] \r\n  config = null;\r\n  index = ''\r\n  volume = ''\r\n  paused = false\r\n  slideIncrementMargin = 0\r\n  position = {}\r\n  contract = {}\r\n  fundingRate = {}\r\n  history = []\r\n  userSelectedDirection = 'long'\r\n\r\n  constructor(){\r\n    makeObservable(this,{\r\n      index : observable,\r\n      volume : observable,\r\n      slideIncrementMargin : observable,\r\n      fundingRate : observable,\r\n      position : observable,\r\n      history : observable,\r\n      contract : observable,\r\n      userSelectedDirection : observable,\r\n      setWallet :action,\r\n      setConfigs : action,\r\n      setConfig : action,\r\n      setIndex : action,\r\n      setContract : action,\r\n      setPosition : action,\r\n      setVolume : action,\r\n      setUserSelectedDirection : action,\r\n      setFundingRate : action,\r\n      setHistory : action,\r\n      setSlideMargin : action,\r\n      amount : computed,\r\n      fundingRateTip : computed,\r\n      direction : computed,\r\n      volumeDisplay : computed,\r\n      isNegative : computed,\r\n      isPositive : computed\r\n    })\r\n    this.configInfo = new Config();\r\n    this.oracle = new Oracle();\r\n    this.positionInfo = new Position()\r\n    this.contractInfo = new Contract();\r\n    this.historyInfo = new History()\r\n  }\r\n\r\n  /**\r\n   * 初始化\r\n   */\r\n  async init(wallet,version){    \r\n    if(version){\r\n      this.version = version\r\n    }\r\n    const all = await this.configInfo.load(version);\r\n    //如果连上钱包，有可能当前链不支持\r\n    if(wallet && wallet.isConnected()){\r\n      this.setWallet(wallet);\r\n      this.setConfigs(all.filter(c => eqInNumber(wallet.detail.chainId,c.chainId)))\r\n      let defaultConfig = this.getDefaultConfig(this.configs,wallet);\r\n      //如果还是为空，则默认用所有config的第一条\r\n      if(!defaultConfig){\r\n        defaultConfig = all.length > 0 ? all[0] : {}\r\n      }\r\n      this.setConfig(defaultConfig);\r\n    } \r\n    //如果没有钱包或者链接的链不一致，设置默认config，BTCUSD\r\n    if(!wallet.isConnected() && this.configs.length === 0 && all.length > 0){\r\n      let defaultConfig = all.find(c => c.symbol === 'BTCUSD')\r\n      defaultConfig = defaultConfig ? defaultConfig : all[0]\r\n      this.setConfig(defaultConfig)\r\n    }\r\n    this.loadByConfig(this.wallet,this.config,true)\r\n    this.setVolume('')\r\n  }\r\n\r\n  async switch(spec){\r\n    const cur = this.configs.find(config => config.pool === spec.pool && config.symbolId === spec.symbolId)\r\n    //v1 只需要比较池子地址，v2 需要比较symbolId\r\n    let changed = false\r\n    if(this.version){\r\n      changed = this.version.isV1 ? spec.pool !== this.config.pool : spec.symbolId !== this.config.symbolId\r\n    }\r\n    if(cur){\r\n      this.pause();\r\n      this.setConfig(cur)\r\n      this.loadByConfig(this.wallet,cur,changed);  \r\n      if(changed){\r\n        this.store(cur)\r\n      }    \r\n      this.resume()\r\n      this.setVolume('')\r\n    }\r\n  }\r\n\r\n  async loadByConfig(wallet,config,symbolChanged){\r\n     //position\r\n     this.positionInfo.load(wallet,config,position => {       \r\n        this.setPosition(position);\r\n     })\r\n\r\n     //切换指数\r\n    if(symbolChanged && config){\r\n      this.oracle.unsubscribeBars();\r\n      this.oracle.addListener('trading',data => {\r\n        this.setIndex(data.close)\r\n      })\r\n      const symbol = this.version.isV2 ? `${config.symbol}_V2` : config.symbol\r\n      this.oracle.load(symbol)\r\n    }\r\n     //contract\r\n     const contract = await this.contractInfo.load(wallet,config)    \r\n\r\n     //funding rate\r\n     const fundingRate = await this.loadFundingRate(wallet,config)\r\n     \r\n     //history\r\n     const history = await this.historyInfo.load(wallet,config);\r\n\r\n     if(contract){\r\n      this.setContract(contract)\r\n     }\r\n\r\n     if(fundingRate){\r\n      this.setFundingRate(fundingRate)\r\n     }\r\n\r\n     if(history){\r\n      this.setHistory(history);\r\n     }\r\n  }\r\n\r\n\r\n    //优先使用session storage 的，如果缓存跟用户当前链一直，则命中缓存，否则取当前配置第一条\r\n    getDefaultConfig(configs = [],wallet){\r\n      let defaultConfig = null;\r\n      if(configs.length > 0){    \r\n        const fromStore = this.getFromStore();\r\n        if(fromStore && eqInNumber(wallet.detail.chainId,fromStore.chainId)){\r\n          defaultConfig = fromStore;\r\n        }\r\n        if(defaultConfig){\r\n          //虽然从缓存获得config ，需要判断池子地址是否一致，否则用可用config的第一条\r\n          const pos = configs.findIndex(c => c.pool === defaultConfig.pool);\r\n          if(pos === -1){\r\n            defaultConfig = configs[0];\r\n          }\r\n        } else {\r\n          defaultConfig = configs[0]\r\n        }   \r\n      }\r\n      return defaultConfig;    \r\n    }\r\n\r\n \r\n\r\n  //存起来\r\n  store(config){\r\n    storeConfig(this.version.current,config)\r\n  }\r\n\r\n  getFromStore(){\r\n    return getConfigFromStore(this.version.current)\r\n  }\r\n\r\n  async refresh(){\r\n    this.pause()\r\n    const position = await this.positionInfo.load(this.wallet,this.config);\r\n    this.wallet.loadWalletBalance(this.wallet.detail.chainId,this.wallet.detail.account)\r\n    const fundingRate = await this.loadFundingRate(this.wallet,this.config)   \r\n    const history = await this.historyInfo.load(this.wallet,this.config)\r\n\r\n    if(fundingRate){\r\n      this.setFundingRate(fundingRate)      \r\n    }\r\n    if(position){\r\n      this.setPosition(position)\r\n    }\r\n    if(history){\r\n      this.setHistory(history)\r\n    }\r\n    this.setVolume('')\r\n    this.resume();\r\n  }\r\n\r\n  /**\r\n   * 暂停实时读取index和定时读取position\r\n   */\r\n  pause(){\r\n    this.setPaused(true)\r\n    this.oracle.pause();\r\n    this.positionInfo.pause();\r\n  }\r\n\r\n  /**\r\n   * 恢复读取\r\n   */\r\n  resume(){\r\n    this.setPaused(false)\r\n    this.oracle.resume();\r\n    this.positionInfo.resume(this.wallet,this.config);\r\n  }\r\n\r\n  setWallet(wallet){\r\n    this.wallet = wallet;\r\n  }\r\n\r\n  setConfigs(configs){\r\n    this.configs = configs\r\n  }\r\n\r\n  setConfig(config){\r\n    this.config = config\r\n  }\r\n\r\n  setIndex(index){\r\n    this.index = index;\r\n  }\r\n\r\n  setPosition(position){\r\n    if(position){\r\n      this.position = position\r\n    }\r\n  }\r\n\r\n  setContract(contract){\r\n    this.contract = contract\r\n  }\r\n\r\n  setHistory(history){\r\n    this.history = history\r\n  }\r\n\r\n  setFundingRate(fundingRate){\r\n    this.fundingRate = fundingRate;\r\n  }\r\n\r\n  setVolume(volume){\r\n    this.volume = volume;\r\n  }\r\n\r\n  setPaused(paused){\r\n    this.paused = paused\r\n  }\r\n\r\n  setUserSelectedDirection(direction){\r\n    this.userSelectedDirection = direction\r\n  }\r\n\r\n  setSlideMargin(slideIncrementMargin){\r\n    if(slideIncrementMargin !== ''){\r\n      this.slideIncrementMargin =  slideIncrementMargin\r\n      const position = this.position;\r\n      const price = position.price || this.index\r\n      const increment = slideIncrementMargin - position.marginHeld\r\n      const volume = increment / (price * this.contract.multiplier * this.contract.minInitialMarginRatio);\r\n      this.setVolume(volume.toFixed(0))\r\n    }\r\n  }\r\n\r\n\r\n  get volumeDisplay(){\r\n    if(Math.abs(this.volume) === 0 || this.volume === '' || this.volume === '-' || this.volume === 'e' || isNaN(this.volume)) {\r\n      return '';\r\n    } else {\r\n      return Math.abs(this.volume)\r\n    }\r\n  }\r\n  \r\n\r\n  get amount(){\r\n    const position = this.position\r\n    const contract = this.contract;\r\n    const volume = this.volume === '' || isNaN(this.volume) ? 0 : Math.abs(this.volume)\r\n    let {margin, marginHeldBySymbol:currentSymbolMarginHeld ,marginHeld,unrealizedPnl} = position\r\n    const price = position.price || this.index\r\n    //v2\r\n    let otherMarginHeld = bg(marginHeld).minus(currentSymbolMarginHeld)\r\n    otherMarginHeld = otherMarginHeld.isNaN() ? bg(0) : otherMarginHeld;\r\n    const contractValue = volume * price * contract.multiplier;\r\n    const incrementMarginHeld = contractValue * contract.minInitialMarginRatio\r\n    let totalMarginHeld = bg(marginHeld) ;\r\n\r\n    //如果当前仓位为正仓用户做空或者当前仓位为负仓用户做多，总仓位相减,取绝对值\r\n    if((this.isPositive && this.userSelectedDirection === 'short') || (this.isNegative && this.userSelectedDirection === 'long')){\r\n      totalMarginHeld = totalMarginHeld.minus(incrementMarginHeld);\r\n      if(totalMarginHeld.lt(otherMarginHeld)){\r\n        totalMarginHeld =  otherMarginHeld.plus(otherMarginHeld.minus(totalMarginHeld).abs())        \r\n      } \r\n      currentSymbolMarginHeld = bg(currentSymbolMarginHeld).minus(incrementMarginHeld).abs().toFixed(2)\r\n    } else {\r\n      totalMarginHeld = bg(marginHeld).plus(incrementMarginHeld)\r\n      if(currentSymbolMarginHeld){\r\n        currentSymbolMarginHeld = bg(currentSymbolMarginHeld).plus(incrementMarginHeld).toFixed(2);\r\n      }\r\n    }\r\n\r\n    const dynBalance = margin && bg(margin).plus(unrealizedPnl).toFixed(2);    \r\n    //总保证金和当前symbol保证金不能超过余额\r\n    totalMarginHeld = totalMarginHeld.gt(dynBalance) ? dynBalance : totalMarginHeld.toFixed(2)\r\n    if(currentSymbolMarginHeld){\r\n      currentSymbolMarginHeld = (+currentSymbolMarginHeld) > (+dynBalance) ? dynBalance : (+currentSymbolMarginHeld).toFixed(2);\r\n    }\r\n    let available = bg(dynBalance).minus(totalMarginHeld).toFixed(2)\r\n    const exchanged = bg(volume).multipliedBy(contract.multiplier).toFixed(4)\r\n    const totalVolume = this.userSelectedDirection === 'short' ? (-this.volumeDisplay + (+position.volume)) : ((+this.volumeDisplay) +  (+position.volume))    \r\n    const totalContractValue = totalVolume * price * contract.multiplier\r\n    const leverage = Math.abs(totalContractValue / (+dynBalance)).toFixed(1);\r\n    available = (+available) < 0 ? 0 : available\r\n    return {\r\n      volume : this.volume,\r\n      dynBalance : dynBalance,\r\n      margin : totalMarginHeld,\r\n      available : available,\r\n      exchanged : exchanged,\r\n      currentSymbolMarginHeld : currentSymbolMarginHeld,\r\n      leverage : leverage\r\n    }\r\n  }\r\n\r\n  get direction(){    \r\n    // 正仓\r\n    if(this.margin !== ''){\r\n      if((+this.position.volume) > 0) {\r\n        if(Math.abs(this.volume) > Math.abs(this.position.volume)) {\r\n          return 'long'\r\n        } else {\r\n          return 'short'\r\n        }\r\n      } else if((+this.position.volume) < 0){\r\n        //负仓\r\n        if((+this.volume) > Math.abs(+this.position.volume)){\r\n          return 'short'\r\n        } else {\r\n          return 'long'\r\n        }\r\n      }\r\n    }\r\n    return 0\r\n  }\r\n\r\n  //正仓\r\n  get isPositive(){\r\n    return bg(this.position.volume).gt(0);\r\n  }\r\n\r\n  //负仓\r\n  get isNegative(){\r\n    return bg(this.position.volume).isNegative();\r\n  }\r\n\r\n  //资金费率\r\n  async loadFundingRate(wallet,config){\r\n    if(config){\r\n      const chainId = wallet && wallet.isConnected() && wallet.supportChain ? wallet.detail.chainId : config.chainId\r\n      if(config){    \r\n        const res = await getFundingRate(chainId,config.pool,config.symbolId)\r\n        return res;\r\n      }\r\n    }\r\n  }\r\n\r\n  get fundingRateTip(){\r\n  \r\n    if(this.version && this.version.isV2){\r\n      if(this.fundingRate && this.fundingRate.fundingRatePerBlock && this.config){\r\n        return `Funding  Rate (per block) = ${this.fundingRate.fundingRatePerBlock}` +\r\n        `\\n1 Long contract pays 1 short contract (${this.fundingRate.fundingRatePerBlock} * IndexPrice * ${this.contract.multiplier} ) ${this.config.bTokenSymbol} per block`        \r\n      }\r\n    }else{\r\n      if(this.fundingRate && this.fundingRate.fundingRatePerBlock && this.config){\r\n        return `Funding  Rate (per block) = ${this.fundingRate.fundingRatePerBlock}` +\r\n        `\\n(1 Long contract pays 1 short contract ${this.fundingRate.fundingRatePerBlock} ${this.config.bTokenSymbol} per block)`        \r\n      }\r\n    }\r\n    \r\n    return ''\r\n  }\r\n\r\n\r\n\r\n}","import { makeAutoObservable, observable, action, computed } from \"mobx\";\r\nimport { storeVersion, restoreVersion } from \"../utils/utils\";\r\n\r\nexport default class Version {\r\n  current = null;\r\n\r\n  constructor(){\r\n    makeAutoObservable(this,{\r\n      current : observable,\r\n      setCurrent : action,\r\n      isV1 : computed,\r\n      isV2 : computed\r\n    })\r\n    const versionFromSession = restoreVersion();\r\n    this.current = versionFromSession ? versionFromSession : null\r\n  }\r\n\r\n\r\n  setCurrent(version,notSave){\r\n    this.current = version;\r\n    if(!notSave){\r\n      storeVersion(version)\r\n    }\r\n  }\r\n\r\n  switch(){\r\n    if(this.current === 'v1'){\r\n      this.setCurrent('v2')\r\n    } else {\r\n      this.setCurrent('v1')\r\n    }\r\n  }\r\n\r\n  get isV1() {\r\n    return this.current === 'v1'\r\n  }\r\n\r\n  get isV2(){\r\n    return this.current === 'v2'\r\n  }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {HashRouter} from 'react-router-dom'\r\nimport App from './App';\r\nimport './assets/deri.less';\r\nimport { Provider } from 'mobx-react';\r\nimport Wallet from './model/Wallet';\r\n//note dont remove zhe line\r\n// import NumberPolyfill from './lib/polyfill/numberPolyfill'\r\nimport Trading from './model/Trading';\r\nimport { DeriEnv } from './lib/web3js/indexV2';\r\nimport Version from './model/Version';\r\n\r\nconst wallet = new Wallet();\r\nconst trading = new Trading()\r\nconst version = new Version();\r\n\r\nif(process.env.NODE_ENV === 'production') {\r\n  DeriEnv.set('prod')\r\n} \r\nDeriEnv.set('prod')\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <HashRouter>\r\n      <Provider wallet={wallet}  trading={trading} version={version}>\r\n        <App />\r\n      </Provider>\r\n    </HashRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n","export const getDBProviderUrlsConfig = () => [\r\n  'https://data-seed-prebsc-1-s1.binance.org:8545/',\r\n  'https://data-seed-prebsc-2-s1.binance.org:8545/',\r\n  'https://data-seed-prebsc-1-s2.binance.org:8545/',\r\n  'https://data-seed-prebsc-2-s2.binance.org:8545/',\r\n  'https://data-seed-prebsc-1-s3.binance.org:8545/',\r\n  'https://data-seed-prebsc-2-s3.binance.org:8545/',\r\n];\r\n\r\nexport const getDBAddressConfig = (env = 'dev', useProductionDB) => {\r\n  if ((env === 'prod' || env === 'production') && useProductionDB) {\r\n    // for production\r\n    return '0x824B6238EdCbaCCAF83C3F60C0cEB38bEb7C9e89';\r\n  }\r\n  // for test\r\n  return '0x7C1267188379f57d92e640E519151229E1eA5565';\r\n};\r\n\r\nexport const getDBWormholeAddressConfig = (env = 'dev', useProductionDB) => {\r\n  if ((env === 'prod' || env === 'production') && useProductionDB) {\r\n    // for production\r\n    return '0xd8137F05c1F432A80525053c473d0e286c4F46f0';\r\n  }\r\n  // for test\r\n  return '0x3c9118C7f9f4ef0Ab5333cD710922dBCCC2d870d';\r\n};\r\n\r\nexport const getDBAirdropAddressConfig = (env = 'dev', useProductionDB) => {\r\n  if ((env === 'prod' || env === 'production') && useProductionDB) {\r\n    // for production\r\n    return '0x35b2650eFb799DF4696b292D11b4770a0fFaa7c7';\r\n  }\r\n  // for test\r\n  return '0x7C1267188379f57d92e640E519151229E1eA5565';\r\n};\r\n","import {\r\n  bTokenFactory,\r\n  lTokenFactory,\r\n  pTokenFactory,\r\n  perpetualPoolFactory,\r\n  deriFactory,\r\n  databaseWormholeFactory,\r\n} from '../factory/contracts';\r\nimport { getPoolInfoApy } from './databaseApi';\r\nimport {\r\n  fundingRateCache,\r\n  PerpetualPoolParametersCache,\r\n  priceCache,\r\n} from './apiGlobals';\r\nimport {\r\n  hasInvalidArgsValue,\r\n  naturalWithPercentage,\r\n  deriToNatural,\r\n  getPoolContractAddress,\r\n  getBTCUSDPrice,\r\n  bg,\r\n  BigNumber,\r\n  getDeriContractAddress,\r\n} from '../utils';\r\nimport {\r\n  calculateFundingRate,\r\n  calculateLiquidityUsed,\r\n  calculateShareValue,\r\n  calculateMaxRemovableShares,\r\n  calculateEntryPrice,\r\n  calculateMarginHeld,\r\n  calculatePnl,\r\n  calculateLiquidationPrice,\r\n  processFundingRate,\r\n} from '../calculation';\r\n\r\n/**\r\n * Get the contract information\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {Object} response\r\n * @returns {string} response.addresses\r\n * @returns {string} response.symbol\r\n * @returns {string} response.bSymbol\r\n * @returns {string} response.multiplier\r\n * @returns {string} response.feeRatio\r\n * @returns {string} response.minPoo\r\n * @returns {string} response.minPoolMarginRatio\r\n * @returns {string} response.minInitialMarginRatio\r\n * @returns {string} response.minMaintenanceMarginRatio\r\n * @returns {string} response.minAddLiquidity\r\n * @returns {string} response.redemptionFeeRatio\r\n * @returns {string} response.fundingRateCoefficient\r\n * @returns {string} response.minLiquidationReward\r\n * @returns {string} response.maxLiquidationReward\r\n * @returns {string} response.liquidationCutRatio\r\n * @returns {string} response.priceDelayAllowance\r\n */\r\nexport const getSpecification = async (\r\n  chainId,\r\n  poolAddress,\r\n  //accountAddress,\r\n) => {\r\n  const { bTokenAddress } = getPoolContractAddress(chainId, poolAddress);\r\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\r\n  //pPool.setAccount(accountAddress);\r\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\r\n  //bToken.setAccount(accountAddress);\r\n  const {\r\n    multiplier,\r\n    feeRatio,\r\n    minPoolMarginRatio,\r\n    minInitialMarginRatio,\r\n    minMaintenanceMarginRatio,\r\n    minAddLiquidity,\r\n    redemptionFeeRatio,\r\n    fundingRateCoefficient,\r\n    minLiquidationReward,\r\n    maxLiquidationReward,\r\n    liquidationCutRatio,\r\n    priceDelayAllowance,\r\n  } = await pPool.getParameters();\r\n  let symbol = await pPool.symbol();\r\n  const bSymbolRaw = await bToken.symbol();\r\n\r\n  // fix symbol BTCUSD issue, will remove later\r\n  // if (poolAddress === '0xA2D7316Bc60AA9463DfB78379d25E77371990507') {\r\n  //   symbol = 'iMEME'\r\n  // }\r\n\r\n  return {\r\n    addresses: poolAddress,\r\n    symbol,\r\n    bSymbol: bSymbolRaw,\r\n    multiplier: multiplier.toString(),\r\n    feeRatio: feeRatio.toString(),\r\n    minPoolMarginRatio: minPoolMarginRatio.toString(),\r\n    minInitialMarginRatio: minInitialMarginRatio.toString(),\r\n    minMaintenanceMarginRatio: minMaintenanceMarginRatio.toString(),\r\n    minAddLiquidity: minAddLiquidity.toString(),\r\n    redemptionFeeRatio: redemptionFeeRatio.toString(),\r\n    fundingRateCoefficient: fundingRateCoefficient.toString(),\r\n    minLiquidationReward: minLiquidationReward.toString(),\r\n    maxLiquidationReward: maxLiquidationReward.toString(),\r\n    liquidationCutRatio: liquidationCutRatio.toString(),\r\n    priceDelayAllowance: priceDelayAllowance.toString(),\r\n  };\r\n};\r\n\r\n/**\r\n * Get position Information of the user\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {Object} response\r\n * @returns {string} response.volume\r\n * @returns {string} response.averageEntryPrice\r\n * @returns {string} response.margin\r\n * @returns {string} response.marginHeld\r\n * @returns {string} response.unrealizedPnl\r\n * @returns {string} response.liquidationPrice\r\n */\r\nexport const getPositionInfo = async (chainId, poolAddress, accountAddress) => {\r\n  let price = ''\r\n  try {\r\n    price = await getBTCUSDPrice(chainId, poolAddress);\r\n  } catch (err) {\r\n    console.log(err)\r\n  }\r\n  const { pTokenAddress } = getPoolContractAddress(chainId, poolAddress);\r\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\r\n  //pPool.setAccount(accountAddress);\r\n  const pToken = pTokenFactory(chainId, pTokenAddress, poolAddress);\r\n  //pToken.setAccount(accountAddress);\r\n  const {\r\n    multiplier,\r\n    minInitialMarginRatio,\r\n    minMaintenanceMarginRatio,\r\n  } = await pPool.getParameters();\r\n  //console.log('getPositionInfo', chainId, poolAddress, accountAddress, price);\r\n  const { volume, margin, cost } = await pToken.getPositionInfo(accountAddress);\r\n  if (price === '') {\r\n    return {\r\n      price,\r\n      volume: volume.toString(),\r\n      averageEntryPrice: calculateEntryPrice(\r\n        volume,\r\n        cost,\r\n        multiplier\r\n      ).toString(),\r\n      margin: margin.toString(),\r\n      marginHeld: '',\r\n      unrealizedPnl: '',\r\n      liquidationPrice: calculateLiquidationPrice(\r\n        volume,\r\n        margin,\r\n        cost,\r\n        multiplier,\r\n        minMaintenanceMarginRatio\r\n      ).toString(),\r\n    };\r\n  } else {\r\n    return {\r\n      price,\r\n      volume: volume.toString(),\r\n      averageEntryPrice: calculateEntryPrice(\r\n        volume,\r\n        cost,\r\n        multiplier\r\n      ).toString(),\r\n      margin: margin.toString(),\r\n      marginHeld: calculateMarginHeld(\r\n        price,\r\n        volume,\r\n        multiplier,\r\n        minInitialMarginRatio\r\n      ).toString(),\r\n      unrealizedPnl: calculatePnl(price, volume, multiplier, cost).toString(),\r\n      liquidationPrice: calculateLiquidationPrice(\r\n        volume,\r\n        margin,\r\n        cost,\r\n        multiplier,\r\n        minMaintenanceMarginRatio\r\n      ).toString(),\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Get liquidity Info of the user\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {Object} response\r\n * @returns {string} response.totalSupply\r\n * @returns {string} response.poolLiquidity\r\n * @returns {string} response.shares\r\n * @returns {string} response.shareValue\r\n * @returns {string} response.maxRemovableShares\r\n */\r\nexport const getLiquidityInfo = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress\r\n) => {\r\n  const { lTokenAddress } = getPoolContractAddress(chainId, poolAddress);\r\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\r\n  //pPool.setAccount(accountAddress);\r\n  const lToken = lTokenFactory(chainId, lTokenAddress, poolAddress);\r\n  //lToken.setAccount(accountAddress);\r\n\r\n  const [lTokenBalance, lTokenTotalSupply] = await Promise.all([\r\n    lToken.balance(accountAddress),\r\n    lToken.totalSupply(),\r\n  ]);\r\n  const price = await getBTCUSDPrice(chainId, poolAddress);\r\n  const {\r\n    liquidity,\r\n    tradersNetCost,\r\n    tradersNetVolume,\r\n  } = await pPool.getStateValues();\r\n  const { multiplier, minPoolMarginRatio } = await pPool.getParameters();\r\n  const poolDynamicEquity = liquidity.plus(\r\n    tradersNetCost.minus(tradersNetVolume.times(price).times(multiplier))\r\n  );\r\n\r\n  return {\r\n    totalSupply: lTokenTotalSupply.toString(),\r\n    poolLiquidity: liquidity.toString(),\r\n    shares: lTokenBalance.toString(),\r\n    shareValue: calculateShareValue(\r\n      lTokenTotalSupply,\r\n      poolDynamicEquity\r\n    ).toString(),\r\n    maxRemovableShares: calculateMaxRemovableShares(\r\n      lTokenBalance,\r\n      lTokenTotalSupply,\r\n      liquidity,\r\n      tradersNetVolume,\r\n      tradersNetCost,\r\n      multiplier,\r\n      minPoolMarginRatio,\r\n      price\r\n    ).toString(),\r\n  };\r\n};\r\n\r\n/**\r\n * Get user balance in the perpetual pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {string} user balance\r\n */\r\nexport const getWalletBalance = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress\r\n) => {\r\n  const { bTokenAddress } = getPoolContractAddress(chainId, poolAddress);\r\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\r\n  //bToken.setAccount(accountAddress);\r\n  const balance = await bToken.balance(accountAddress);\r\n  return balance.toString();\r\n};\r\n\r\n/**\r\n * Check account is unlocked in the perpetual pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {bool}\r\n */\r\nexport const isUnlocked = async (chainId, poolAddress, accountAddress) => {\r\n  const { bTokenAddress } = getPoolContractAddress(chainId, poolAddress);\r\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\r\n  //bToken.setAccount(accountAddress);\r\n  return await bToken.isUnlocked(accountAddress);\r\n};\r\n\r\n/**\r\n * Get estimate margin in the perpetual pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @param {string} volume\r\n * @param {string} leverage\r\n * @returns {string}\r\n */\r\nexport const getEstimatedMargin = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  volume,\r\n  leverage\r\n) => {\r\n  const price = await getBTCUSDPrice(chainId, poolAddress);\r\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\r\n  //pPool.setAccount(accountAddress);\r\n  const { multiplier } = await pPool.getParameters();\r\n  return bg(volume)\r\n    .abs()\r\n    .times(price)\r\n    .times(multiplier)\r\n    .div(bg(leverage))\r\n    .toString();\r\n};\r\n\r\n/**\r\n * Get estimate Fee in the perpetual pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} volume\r\n * @returns {string}\r\n */\r\nexport const getEstimatedFee = async (chainId, poolAddress, volume) => {\r\n  // const price = await getBTCUSDPrice(chainId, poolAddress);\r\n  let price = priceCache.get();\r\n  let parameters = PerpetualPoolParametersCache.get();\r\n  if (price === '') {\r\n    await priceCache.update(chainId, poolAddress);\r\n    price = priceCache.get();\r\n  }\r\n  // const pPool = perpetualPoolFactory(chainId, poolAddress, accountAddress);\r\n  // const { multiplier, feeRatio } = await pPool.getParameters();\r\n  if (!parameters.multiplier) {\r\n    parameters = await PerpetualPoolParametersCache.update(\r\n      chainId,\r\n      poolAddress\r\n    );\r\n  }\r\n  //console.log('price', price);\r\n  const { multiplier, feeRatio } = parameters;\r\n  return bg(volume)\r\n    .abs()\r\n    .times(price)\r\n    .times(multiplier)\r\n    .times(feeRatio)\r\n    .toString();\r\n};\r\n\r\n/**\r\n * Get funding rate of the perpetual pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @returns {Object} response\r\n * @returns {string} response.fundingRate0\r\n * @returns {string} response.fundingRatePerBlock\r\n * @returns {string} response.liquidity\r\n * @returns {string} response.volume\r\n * @returns {string} response.tradersNetVolume\r\n */\r\nexport const getFundingRate = async (chainId, poolAddress) => {\r\n  const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\r\n\r\n  const res = await perpetualPool\r\n    .getFundingRate()\r\n    .catch((err) => console.log('getFundingRate', err));\r\n  fundingRateCache.set(chainId, poolAddress, res);\r\n  const poolInfo = await getPoolInfoApy(chainId, poolAddress);\r\n\r\n  if (res) {\r\n    // console.log(hexToNatural(res[0]));\r\n    const {\r\n      fundingRate,\r\n      fundingRatePerBlock,\r\n      liquidity,\r\n      tradersNetVolume,\r\n    } = res;\r\n    const volume = poolInfo.volume24h;\r\n    // fundingRate = processFundingRate(chainId, fundingRate);\r\n\r\n    return {\r\n      fundingRate0: naturalWithPercentage(fundingRate),\r\n      fundingRatePerBlock: BigNumber(fundingRatePerBlock).toExponential(10),\r\n      liquidity: liquidity.toString(),\r\n      volume: deriToNatural(volume).toString(),\r\n      tradersNetVolume: tradersNetVolume.toString(),\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Get estimate funding rate\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} newNetVolume\r\n * @returns {Object} response\r\n * @returns {string} response.fundingRate1\r\n */\r\nexport const getEstimatedFundingRate = async (\r\n  chainId,\r\n  poolAddress,\r\n  newNetVolume\r\n) => {\r\n  let fundingRate1;\r\n  let res;\r\n  res = fundingRateCache.get(chainId, poolAddress);\r\n  if (!res) {\r\n    const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\r\n    res = await perpetualPool.getFundingRate();\r\n  }\r\n  if (res) {\r\n    const parameters = [\r\n      bg(res.tradersNetVolume).plus(bg(newNetVolume)).toString(),\r\n      res.price,\r\n      res.multiplier,\r\n      res.liquidity,\r\n      res.fundingRateCoefficient,\r\n    ];\r\n    if (hasInvalidArgsValue(...parameters)) {\r\n      return {\r\n        fundingRate1: '0',\r\n      };\r\n    }\r\n    // console.log(parameters)\r\n    fundingRate1 = calculateFundingRate(...parameters);\r\n    fundingRate1 = processFundingRate(chainId, fundingRate1);\r\n    return {\r\n      fundingRate1: naturalWithPercentage(fundingRate1),\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Get liquidity used\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @returns {Object} response\r\n * @returns {string} response.liquidityUsed0\r\n */\r\nexport const getLiquidityUsed = async (chainId, poolAddress) => {\r\n  let res;\r\n  res = fundingRateCache.get(chainId, poolAddress);\r\n  if (!res) {\r\n    const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\r\n    res = await perpetualPool.getFundingRate();\r\n  }\r\n  if (res) {\r\n    const { liquidityUsed } = res;\r\n    return {\r\n      liquidityUsed0: naturalWithPercentage(liquidityUsed),\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Get estimate liquidity used\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} newNetVolume\r\n * @returns {Object} response\r\n * @returns {string} response.fundingRate1\r\n */\r\nexport const getEstimatedLiquidityUsed = async (\r\n  chainId,\r\n  poolAddress,\r\n  newNetVolume\r\n) => {\r\n  let res;\r\n  res = fundingRateCache.get(chainId, poolAddress);\r\n  if (!res) {\r\n    const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\r\n    res = await perpetualPool\r\n      .getFundingRate()\r\n      .catch((err) => console.log('getLiquidityUsed', err));\r\n  }\r\n  if (res) {\r\n    const parameters = [\r\n      bg(res.tradersNetVolume).plus(bg(newNetVolume)).toString(),\r\n      res.price,\r\n      res.multiplier,\r\n      res.liquidity,\r\n      res.poolMarginRatio,\r\n    ];\r\n    if (hasInvalidArgsValue(...parameters)) {\r\n      return {\r\n        liquidityUsed1: '0',\r\n      };\r\n    }\r\n    const liquidityUsed1 = calculateLiquidityUsed(...parameters);\r\n    return {\r\n      liquidityUsed1: naturalWithPercentage(liquidityUsed1),\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Get user signature of the wormhole pool\r\n * @async\r\n * @method\r\n * @param {string} accountAddress\r\n * @returns {Object}\r\n */\r\nexport const getUserWormholeSignature = async (accountAddress) => {\r\n  const databaseWormhole = databaseWormholeFactory(true);\r\n  return await databaseWormhole.signature(accountAddress);\r\n};\r\n\r\n/**\r\n * Check account is unlocked in the deri pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} accountAddress\r\n * @returns {bool}\r\n */\r\nexport const isDeriUnlocked = async (chainId, accountAddress) => {\r\n  const { wormholeAddress, deriAddress } = getDeriContractAddress(chainId);\r\n  const deri = deriFactory(chainId, deriAddress, wormholeAddress);\r\n  //deri.setAccount(accountAddress).setPool(wormholeAddress);\r\n  let res;\r\n  try {\r\n    const tx = await deri.isUnlocked(accountAddress);\r\n    res = { success: true, transaction: tx };\r\n  } catch (error) {\r\n    res = { success: false, error };\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Get deri balance in the deri pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} accountAddress\r\n * @returns {string}\r\n */\r\nexport const getDeriBalance = async (chainId, accountAddress) => {\r\n  const { deriAddress, wormholeAddress } = getDeriContractAddress(chainId);\r\n  const deri = deriFactory(chainId, deriAddress, wormholeAddress);\r\n  return (await deri.balance(accountAddress)).toString();\r\n};\r\n","import { bTokenFactory, slpPoolFactory } from '../factory/contracts';\r\nimport { getSlpContractAddress } from '../utils';\r\n\r\n/**\r\n * Get liquidity info of SLP pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {Object} response\r\n * @returns {string} response.liquidity\r\n * @returns {string} response.bTokenBalance\r\n * @returns {string} response.shares\r\n */\r\nexport const getSlpLiquidityInfo = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress\r\n) => {\r\n  const { bTokenAddress } = getSlpContractAddress(chainId, poolAddress);\r\n  // console.log('pool', poolAddress, bTokenAddress)\r\n  if (bTokenAddress) {\r\n    const slpPool = slpPoolFactory(chainId, poolAddress);\r\n    //slpPool.setAccount(accountAddress);\r\n    const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\r\n    //bToken.setAccount(accountAddress);\r\n    const [liquidity, bTokenBalance, shares] = await Promise.all([\r\n      bToken.balance(poolAddress),\r\n      bToken.balance(accountAddress),\r\n      slpPool.getLiquidity(accountAddress),\r\n    ]);\r\n\r\n    return {\r\n      poolLiquidity: liquidity.toString(),\r\n      bTokenBalance: bTokenBalance.toString(),\r\n      shares: shares.toString(),\r\n      shareValue: '1',\r\n    };\r\n  }\r\n  console.log('no SlpPool address, please check');\r\n  return {};\r\n};\r\n\r\n/**\r\n * Add liquidity to SLP pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @param {number} amount\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {string} response.[error]\r\n * @returns {Object} response.transaction - eth transaction receipt object\r\n */\r\nexport const addSlpLiquidity = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  amount\r\n) => {\r\n  let res;\r\n  const { bTokenAddress } = getSlpContractAddress(chainId, poolAddress);\r\n  // console.log('pool', poolAddress, bTokenAddress)\r\n  if (bTokenAddress) {\r\n    const slpPool = slpPoolFactory(chainId, poolAddress);\r\n    //slpPool.setAccount(accountAddress);\r\n    //const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\r\n    //bToken.setAccount(accountAddress);\r\n    try {\r\n      const tx = await slpPool.addLiquidity(accountAddress, amount);\r\n      res = { success: true, transaction: tx };\r\n    } catch (err) {\r\n      res = { success: false, error: err };\r\n    }\r\n  } else {\r\n    res = { success: false, error: 'unable to get bToken address of slp pool' };\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Remove liquidity to SLP pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @param {number} amount\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {string} response.[error]\r\n * @returns {Object} response.transaction - eth transaction receipt object\r\n */\r\nexport const removeSlpLiquidity = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  amount\r\n) => {\r\n  let res;\r\n  const { bTokenAddress } = getSlpContractAddress(chainId, poolAddress);\r\n  // console.log('pool', poolAddress, bTokenAddress)\r\n  if (bTokenAddress) {\r\n    const slpPool = slpPoolFactory(chainId, poolAddress);\r\n    //slpPool.setAccount(accountAddress);\r\n    //const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\r\n    //bToken.setAccount(accountAddress);\r\n    try {\r\n      const tx = await slpPool.removeLiquidity(accountAddress, amount);\r\n      res = { success: true, transaction: tx };\r\n    } catch (err) {\r\n      res = { success: false, error: err };\r\n    }\r\n  } else {\r\n    res = { success: false, error: 'unable to get bToken address of slp pool' };\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Check account is unlocked in the Slp pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {bool}\r\n */\r\nexport const isSlpUnlocked = async (chainId, poolAddress, accountAddress) => {\r\n  const { bTokenAddress } = getSlpContractAddress(chainId, poolAddress);\r\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\r\n  //bToken.setAccount(accountAddress);\r\n  return await bToken.isUnlocked(accountAddress);\r\n};\r\n\r\n/**\r\n * Unlock the account in the Slp pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {string} response.[error]\r\n * @returns {Object} response.transaction - eth transaction receipt object\r\n */\r\nexport const unlockSlp = async (chainId, poolAddress, accountAddress) => {\r\n  const { bTokenAddress } = getSlpContractAddress(chainId, poolAddress);\r\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\r\n  //bToken.setAccount(accountAddress);\r\n\r\n  let res;\r\n  try {\r\n    const tx = await bToken.unlock(accountAddress);\r\n    res = { success: true, transaction: tx };\r\n  } catch (err) {\r\n    res = { success: false, error: err };\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Get account balance in Slp pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} accountAddress\r\n * @returns {string} Account balance\r\n */\r\nexport const getSlpWalletBalance = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress\r\n) => {\r\n  const { bTokenAddress } = getSlpContractAddress(chainId, poolAddress);\r\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\r\n  //bToken.setAccount(accountAddress);\r\n  const balance = await bToken.balance(accountAddress);\r\n  return balance.toString();\r\n};\r\n","import { bTokenFactory, clp2PoolFactory } from '../factory/contracts';\r\nimport { getClp2ContractAddress } from '../utils';\r\n\r\nexport const getClp2LiquidityInfo = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress\r\n) => {\r\n  const { bTokenAddress } = getClp2ContractAddress(chainId, poolAddress);\r\n  if (bTokenAddress) {\r\n    const clp2Pool = clp2PoolFactory(chainId, poolAddress);\r\n    const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\r\n    const [liquidity, bTokenBalance, shares] = await Promise.all([\r\n      bToken.balance(poolAddress),\r\n      bToken.balance(accountAddress),\r\n      clp2Pool.getLiquidity(accountAddress),\r\n    ]);\r\n\r\n    return {\r\n      poolLiquidity: liquidity.toString(),\r\n      bTokenBalance: bTokenBalance.toString(),\r\n      shares: shares.toString(),\r\n      shareValue: '1',\r\n    };\r\n  }\r\n  console.log('no Clp2Pool address, please check');\r\n  return {};\r\n};\r\n\r\nexport const addClp2Liquidity = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  amount\r\n) => {\r\n  let res;\r\n  const { bTokenAddress } = getClp2ContractAddress(chainId, poolAddress);\r\n  if (bTokenAddress) {\r\n    const clp2Pool = clp2PoolFactory(chainId, poolAddress);\r\n    //const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\r\n    try {\r\n      const tx = await clp2Pool.addLiquidity(accountAddress, amount);\r\n      res = { success: true, transaction: tx };\r\n    } catch (err) {\r\n      res = { success: false, error: err };\r\n    }\r\n  } else {\r\n    res = { success: false, error: 'unable to get bToken address of clp2 pool' };\r\n  }\r\n  return res;\r\n};\r\n\r\nexport const removeClp2Liquidity = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  amount\r\n) => {\r\n  let res;\r\n  const { bTokenAddress } = getClp2ContractAddress(chainId, poolAddress);\r\n  if (bTokenAddress) {\r\n    const clp2Pool = clp2PoolFactory(chainId, poolAddress);\r\n    //const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\r\n    try {\r\n      const tx = await clp2Pool.removeLiquidity(accountAddress, amount);\r\n      res = { success: true, transaction: tx };\r\n    } catch (err) {\r\n      res = { success: false, error: err };\r\n    }\r\n  } else {\r\n    res = { success: false, error: 'unable to get bToken address of clp2 pool' };\r\n  }\r\n  return res;\r\n};\r\n\r\nexport const isClp2Unlocked = async (chainId, poolAddress, accountAddress) => {\r\n  const { bTokenAddress } = getClp2ContractAddress(chainId, poolAddress);\r\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\r\n  return await bToken.isUnlocked(accountAddress);\r\n};\r\n\r\nexport const unlockClp2 = async (chainId, poolAddress, accountAddress) => {\r\n  const { bTokenAddress } = getClp2ContractAddress(chainId, poolAddress);\r\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\r\n\r\n  let res;\r\n  try {\r\n    const tx = await bToken.unlock(accountAddress);\r\n    res = { success: true, transaction: tx };\r\n  } catch (err) {\r\n    res = { success: false, error: err };\r\n  }\r\n  return res;\r\n};\r\n\r\nexport const getClp2WalletBalance = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress\r\n) => {\r\n  const { bTokenAddress } = getClp2ContractAddress(chainId, poolAddress);\r\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\r\n  const balance = await bToken.balance(accountAddress);\r\n  return balance.toString();\r\n};\r\n","import {\r\n  bTokenFactory,\r\n  clpPoolFactory,\r\n  lTokenFactory,\r\n} from '../factory/contracts';\r\nimport { bg, getClpContractAddress } from '../utils';\r\n\r\n/**\r\n * Get liquidity Info of the CLP pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {Object} response\r\n * @returns {string} response.totalSupply\r\n * @returns {string} response.poolLiquidity\r\n * @returns {string} response.shares\r\n * @returns {string} response.shareValue\r\n * @returns {string} response.maxRemovableShares\r\n */\r\nexport const getClpLiquidityInfo = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress\r\n) => {\r\n  const { lTokenAddress } = getClpContractAddress(chainId, poolAddress);\r\n  const clpPool = clpPoolFactory(chainId, poolAddress);\r\n  //pPool.setAccount(accountAddress);\r\n  const lToken = lTokenFactory(chainId, lTokenAddress, poolAddress);\r\n  //lToken.setAccount(accountAddress);\r\n\r\n  const [lTokenBalance, lTokenTotalSupply] = await Promise.all([\r\n    lToken.balance(accountAddress),\r\n    lToken.totalSupply(),\r\n  ]);\r\n  const { liquidity } = await clpPool.getStateValues();\r\n  //console.log(liquidity);\r\n\r\n  return {\r\n    totalSupply: lTokenTotalSupply.toString(),\r\n    poolLiquidity: liquidity.toString(),\r\n    shares: lTokenBalance.toString(),\r\n    shareValue: (lTokenTotalSupply.eq(0)\r\n      ? bg(0)\r\n      : liquidity.div(lTokenTotalSupply)\r\n    ).toString(),\r\n    maxRemovableShares: lTokenBalance.toString(),\r\n  };\r\n};\r\n\r\n/**\r\n * Add liquidity to the CLP pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @param {number} amount\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {string} response.[error]\r\n * @returns {Object} response.transaction - eth transaction receipt object\r\n */\r\nexport const addClpLiquidity = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  amount\r\n) => {\r\n  let res;\r\n  const { bTokenAddress } = getClpContractAddress(chainId, poolAddress);\r\n  if (bTokenAddress) {\r\n    const clpPool = clpPoolFactory(chainId, poolAddress);\r\n    //const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\r\n    try {\r\n      const tx = await clpPool.addLiquidity(accountAddress, amount);\r\n      console.log(tx, typeof tx);\r\n      res = { success: true, transaction: tx };\r\n    } catch (err) {\r\n      res = { success: false, error: err };\r\n    }\r\n  } else {\r\n    res = { success: false, error: 'unable to get bToken address of clp pool' };\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Remove liquidity of the CLP pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @param {number} amount\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {string} response.[error]\r\n * @returns {Object} response.transaction - eth transaction receipt object\r\n */\r\nexport const removeClpLiquidity = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress,\r\n  amount\r\n) => {\r\n  let res;\r\n  const { bTokenAddress } = getClpContractAddress(chainId, poolAddress);\r\n  if (bTokenAddress) {\r\n    const clpPool = clpPoolFactory(chainId, poolAddress);\r\n    try {\r\n      const tx = await clpPool.removeLiquidity(accountAddress, amount);\r\n      res = { success: true, transaction: tx };\r\n    } catch (err) {\r\n      res = { success: false, error: err };\r\n    }\r\n  } else {\r\n    res = { success: false, error: 'unable to get bToken address of clp pool' };\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Check account is unlocked in the Clp pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {bool}\r\n */\r\nexport const isClpUnlocked = async (chainId, poolAddress, accountAddress) => {\r\n  const { bTokenAddress } = getClpContractAddress(chainId, poolAddress);\r\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\r\n  //bToken.setAccount(accountAddress);\r\n  return await bToken.isUnlocked(accountAddress);\r\n};\r\n\r\n/**\r\n * Unlock the account in the Clp pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} poolAddress\r\n * @param {string} accountAddress\r\n * @returns {Object} response\r\n * @returns {boolean} response.success\r\n * @returns {string} response.[error]\r\n * @returns {Object} response.transaction - eth transaction receipt object\r\n */\r\nexport const unlockClp = async (chainId, poolAddress, accountAddress) => {\r\n  const { bTokenAddress } = getClpContractAddress(chainId, poolAddress);\r\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\r\n  //bToken.setAccount(accountAddress);\r\n\r\n  let res;\r\n  try {\r\n    const tx = await bToken.unlock(accountAddress);\r\n    res = { success: true, transaction: tx };\r\n  } catch (err) {\r\n    res = { success: false, error: err };\r\n  }\r\n  return res;\r\n};\r\n\r\n/**\r\n * Get account balance in Clp pool\r\n * @async\r\n * @method\r\n * @param {string} chainId\r\n * @param {string} accountAddress\r\n * @returns {string} Account balance\r\n */\r\nexport const getClpWalletBalance = async (\r\n  chainId,\r\n  poolAddress,\r\n  accountAddress\r\n) => {\r\n  const { bTokenAddress } = getClpContractAddress(chainId, poolAddress);\r\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\r\n  //bToken.setAccount(accountAddress);\r\n  const balance = await bToken.balance(accountAddress);\r\n  return balance.toString();\r\n};\r\n","import Web3 from 'web3';\r\nimport { metaMaskWeb3, web3Factory } from '../factory/web3';\r\n\r\nconst MAX_GAS_AMOUNT = 532731;\r\n\r\nexport class Contract {\r\n  constructor(chainId, contractAddress, isProvider) {\r\n    this.chainId = chainId;\r\n    this.contractAddress = contractAddress;\r\n    if (isProvider) {\r\n      this.web3 = web3Factory(chainId);\r\n    } else {\r\n      this.web3 = metaMaskWeb3();\r\n    }\r\n  }\r\n  setAccount(accountAddress) {\r\n    this.accountAddress = accountAddress;\r\n    return this;\r\n  }\r\n  setPool(poolAddress) {\r\n    this.poolAddress = poolAddress;\r\n    return this;\r\n  }\r\n  async _call(method, args = []) {\r\n    return await this.contract.methods[method](...args).call();\r\n  }\r\n\r\n  async _estimatedGas(method, args = [], accountAddress) {\r\n    let gas = 0;\r\n    for (let i = 0; i < 2; i++) {\r\n      try {\r\n        gas = await this.contract.methods[method](...args).estimateGas({\r\n          from: accountAddress,\r\n        });\r\n        gas = parseInt(gas * 1.25);\r\n        break;\r\n      } catch (err) {\r\n        //console.log(\"err\", err);\r\n      }\r\n    }\r\n    if (gas == 0) gas = MAX_GAS_AMOUNT;\r\n    if (gas > MAX_GAS_AMOUNT) gas = MAX_GAS_AMOUNT;\r\n    return gas;\r\n  }\r\n\r\n  _getTransactionReceipt(tx) {\r\n    const self = this;\r\n    return function _transactionReceipt(resolve, reject) {\r\n      self.web3.eth.getTransactionReceipt(tx, (error, receipt) => {\r\n        if (error) {\r\n          reject(error);\r\n        } else if (receipt === null) {\r\n          setTimeout(() => _transactionReceipt(resolve, reject), 500);\r\n        } else if (receipt.status === false) {\r\n          receipt.errorMessage = 'Transaction failed';\r\n          reject(receipt);\r\n        } else {\r\n          resolve(receipt);\r\n        }\r\n      });\r\n    };\r\n  }\r\n  async _transact(method, args, accountAddress) {\r\n    const gas = await this._estimatedGas(method, args, accountAddress)\r\n      //this.web3.eth.getGasPrice(),\r\n    let txRaw = [\r\n      {\r\n        from: accountAddress,\r\n        to: this.contractAddress,\r\n        gas: Web3.utils.numberToHex(gas),\r\n        value: Web3.utils.numberToHex('0'),\r\n        data: this.contract.methods[method](...args).encodeABI(),\r\n      },\r\n    ];\r\n    let tx = await window.ethereum.request({\r\n      method: 'eth_sendTransaction',\r\n      params: txRaw,\r\n    });\r\n    return await new Promise(this._getTransactionReceipt(tx));\r\n  }\r\n}\r\n","import Web3 from 'web3';\r\nimport { Contract } from './contract';\r\nimport {\r\n  hasInvalidArgsValue,\r\n  getBTCUSDPrice,\r\n  getOracleInfo,\r\n  deriToNatural,\r\n  bg,\r\n} from '../utils';\r\nimport {\r\n  calculateFundingRate,\r\n  calculateLiquidityUsed,\r\n  processFundingRate,\r\n} from '../calculation';\r\n\r\n/* eslint-disable */\r\nconst POOL_ABI=[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"DepositMargin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"ExecuteMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"volume\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"cost\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"PrepareMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"tradeVolume\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrawMargin\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"depositMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"depositMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"name\":\"executeMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getParameters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPoolMarginRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minInitialMarginRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minMaintenanceMarginRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAddLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redemptionFeeRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundingRateCoefficient\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLiquidationReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLiquidationReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationCutRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceDelayAllowance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStateValues\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"cumuFundingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"cumuFundingRateBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"tradersNetVolume\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"tradersNetCost\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address[4]\",\"name\":\"addresses_\",\"type\":\"address[4]\"},{\"internalType\":\"uint256[12]\",\"name\":\"parameters_\",\"type\":\"uint256[12]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"graceDays\",\"type\":\"uint256\"}],\"name\":\"prepareMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lShares\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"tradeVolume\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"trade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"tradeVolume\",\"type\":\"int256\"}],\"name\":\"trade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"tradeVolume\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"tradeWithMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"tradeVolume\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"tradeWithMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"withdrawMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\r\n/* eslint-enable */\r\n\r\nexport class PerpetualPool extends Contract {\r\n  constructor(chainId, contractAddress, isProvider) {\r\n    super(chainId, contractAddress, isProvider);\r\n    this.contract = new this.web3.eth.Contract(POOL_ABI, this.contractAddress);\r\n  }\r\n\r\n  async symbol() {\r\n    return await this._call('symbol');\r\n  }\r\n\r\n  async getStateValues() {\r\n    let result;\r\n    const defaultValue = bg(0);\r\n    try {\r\n      const res = await this._call('getStateValues');\r\n      //console.log(\"getStateValues() raw:\", res)\r\n      result = {\r\n        cumuFundingRate: deriToNatural(res.cumuFundingRate),\r\n        cumuFundingRateBlock: bg(res.cumuFundingRateBlock),\r\n        liquidity: deriToNatural(res.liquidity),\r\n        tradersNetVolume: deriToNatural(res.tradersNetVolume),\r\n        tradersNetCost: deriToNatural(res.tradersNetCost),\r\n      };\r\n    } catch (err) {\r\n      result = {\r\n        cumuFundingRate: defaultValue,\r\n        cumuFundingRateBlock: defaultValue,\r\n        liquidity: defaultValue,\r\n        tradersNetCost: defaultValue,\r\n        tradersNetVolume: defaultValue,\r\n      };\r\n      console.log(`getStateValues: ${err}`);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  async getParameters() {\r\n    let result;\r\n    const defaultValue = bg(0);\r\n    try {\r\n      const res = await this._call('getParameters');\r\n      // console.log(\"getParameters() raw: \", res)\r\n      result = {\r\n        multiplier: deriToNatural(res.multiplier),\r\n        feeRatio: deriToNatural(res.feeRatio),\r\n        minPoolMarginRatio: deriToNatural(res.minPoolMarginRatio),\r\n        minInitialMarginRatio: deriToNatural(res.minInitialMarginRatio),\r\n        minMaintenanceMarginRatio: deriToNatural(res.minMaintenanceMarginRatio),\r\n        minAddLiquidity: deriToNatural(res.minAddLiquidity),\r\n        redemptionFeeRatio: deriToNatural(res.redemptionFeeRatio),\r\n        fundingRateCoefficient: deriToNatural(res.fundingRateCoefficient),\r\n        minLiquidationReward: deriToNatural(res.minLiquidationReward),\r\n        maxLiquidationReward: deriToNatural(res.maxLiquidationReward),\r\n        liquidationCutRatio: deriToNatural(res.liquidationCutRatio),\r\n        priceDelayAllowance: bg(res.priceDelayAllowance),\r\n      };\r\n    } catch (err) {\r\n      result = {\r\n        multiplier: defaultValue,\r\n        feeRatio: defaultValue,\r\n        minPoolMarginRatio: defaultValue,\r\n        minInitialMarginRatio: defaultValue,\r\n        minMaintenanceMarginRatio: defaultValue,\r\n        minAddLiquidity: defaultValue,\r\n        redemptionFeeRatio: defaultValue,\r\n        fundingRateCoefficient: defaultValue,\r\n        minLiquidationReward: defaultValue,\r\n        maxLiquidationReward: defaultValue,\r\n        liquidationCutRatio: defaultValue,\r\n        priceDelayAllowance: defaultValue,\r\n      };\r\n      console.log(`getParameters: ${err}`);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  _getTransactionReceipt(tx) {\r\n    const self = this;\r\n    return function _transactionReceipt(resolve, reject) {\r\n      self.web3.eth.getTransactionReceipt(tx, (error, receipt) => {\r\n        if (error) {\r\n          reject(error);\r\n        } else if (receipt == null) {\r\n          setTimeout(() => _transactionReceipt(resolve, reject), 500);\r\n        } else if (receipt.status === false) {\r\n          receipt.errorMessage = 'Transaction failed';\r\n          reject(receipt);\r\n        } else {\r\n          resolve(receipt);\r\n        }\r\n      });\r\n    };\r\n  }\r\n  async _estimatedGas(method, args, accountAddress) {\r\n    // !this.accountAddress &&\r\n    //   console.log('please do setAccount(accountAddress) first');\r\n    let gas = 0;\r\n    for (let i = 0; i < 20; i++) {\r\n      try {\r\n        gas = await this.contract.methods[method](...args).estimateGas({\r\n          from: accountAddress,\r\n        });\r\n        gas = parseInt(gas * 1.25);\r\n        break;\r\n      } catch (err) {\r\n        //console.log(\"err\", err);\r\n      }\r\n    }\r\n    if (gas == 0) gas = 532731;\r\n    if (gas > 532731) gas = 532731;\r\n    return gas;\r\n  }\r\n\r\n  async _transactPool(method, args = [], accountAddress) {\r\n    // !this.accountAddress &&\r\n    //   console.log('please do setAccount(accountAddress) first');\r\n    const oracle = await getOracleInfo(this.chainId, this.contractAddress);\r\n    let signed = [oracle.timestamp, oracle.price, oracle.v, oracle.r, oracle.s];\r\n\r\n    // const [gas, gasPrice] = await Promise.all([\r\n    //   this._estimatedGas(method, [...args, ...signed], accountAddress),\r\n    //   this.web3.eth.getGasPrice(),\r\n    // ]);\r\n    //console.log(`gasPrice ${gasPrice / 1000000000} GW`);\r\n    const gas = await this._estimatedGas(method, [...args, ...signed], accountAddress)\r\n\r\n    //gasPrice: Web3.utils.numberToHex(gasPrice),\r\n    let txRaw = [\r\n      {\r\n        from: accountAddress,\r\n        to: this.contractAddress,\r\n        gas: Web3.utils.numberToHex(gas),\r\n        value: Web3.utils.numberToHex('0'),\r\n        data: this.contract.methods[method](...args, ...signed).encodeABI(),\r\n      },\r\n    ];\r\n    let tx = await window.ethereum.request({\r\n      method: 'eth_sendTransaction',\r\n      params: txRaw,\r\n    });\r\n    return await new Promise(this._getTransactionReceipt(tx));\r\n  }\r\n\r\n  async getFundingRate() {\r\n    let price, fundingRate, fundingRatePerBlock, liquidityUsed;\r\n    price = await getBTCUSDPrice(this.chainId, this.contractAddress);\r\n    try {\r\n      const { tradersNetVolume, liquidity } = await this.getStateValues();\r\n      const {\r\n        multiplier,\r\n        fundingRateCoefficient,\r\n        minPoolMarginRatio,\r\n      } = await this.getParameters();\r\n      //console.log(\"minPoolMarginRatio\", minPoolMarginRatio.toString())\r\n      const args1 = [\r\n        tradersNetVolume,\r\n        price,\r\n        multiplier,\r\n        liquidity,\r\n        fundingRateCoefficient,\r\n      ];\r\n      if (hasInvalidArgsValue(...args1)) {\r\n        fundingRate = '0';\r\n        fundingRatePerBlock = '0';\r\n      } else {\r\n        fundingRatePerBlock = calculateFundingRate(...args1);\r\n        fundingRate = processFundingRate(this.chainId, fundingRatePerBlock);\r\n      }\r\n      const args2 = [\r\n        tradersNetVolume,\r\n        price,\r\n        multiplier,\r\n        liquidity,\r\n        minPoolMarginRatio,\r\n      ];\r\n      if (hasInvalidArgsValue(...args2)) {\r\n        liquidityUsed = '0';\r\n      } else {\r\n        liquidityUsed = calculateLiquidityUsed(...args2);\r\n      }\r\n      return {\r\n        price,\r\n        multiplier: multiplier.toString(),\r\n        fundingRate: fundingRate,\r\n        fundingRatePerBlock: fundingRatePerBlock,\r\n        tradersNetVolume: tradersNetVolume.toString(),\r\n        liquidity: liquidity.toString(),\r\n        fundingRateCoefficient: fundingRateCoefficient.toString(),\r\n        liquidityUsed: liquidityUsed,\r\n        poolMarginRatio: minPoolMarginRatio.toString(),\r\n      };\r\n    } catch (err) {\r\n      console.log('PerpetualPool#gerFundingRate():', err);\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  async depositMargin(accountAddress, amount) {\r\n    //await this.web3.eth.getAccounts(console.log)\r\n    console.log('depositMargin');\r\n    let res;\r\n    try {\r\n      let tx = await this._transactPool(\r\n        'depositMargin(uint256,uint256,uint256,uint8,bytes32,bytes32)',\r\n        [amount],\r\n        accountAddress\r\n      );\r\n      res = { success: true, transaction: tx };\r\n    } catch (err) {\r\n      console.log('here');\r\n      res = { success: false, error: err };\r\n    }\r\n    return res;\r\n  }\r\n  async _getBlockInfo(blockNumber) {\r\n    return await this.web3.eth.getBlock(blockNumber);\r\n  }\r\n  async _getPastEvents(eventName, filter = {}, fromBlock = 0, to = 0) {\r\n    let events = [];\r\n    //let toBlock = await this._getBlockInfo(\"latest\");\r\n    //toBlock = toBlock.number;\r\n    let amount;\r\n    if (this.chainId === '56') {\r\n      amount = 1999;\r\n    } else {\r\n      amount = 4999;\r\n    }\r\n    if (fromBlock + amount > to) {\r\n      amount = to - fromBlock;\r\n    }\r\n    while (fromBlock <= to) {\r\n      //console.log('tick')\r\n      let es = await this.contract.getPastEvents(eventName, {\r\n        filter: filter,\r\n        fromBlock,\r\n        toBlock: fromBlock + amount,\r\n      });\r\n      for (let e of es) {\r\n        events.push(e);\r\n      }\r\n      fromBlock += amount + 1;\r\n      if (fromBlock + amount > to) {\r\n        amount = to - fromBlock;\r\n      }\r\n    }\r\n    return events;\r\n  }\r\n  async _getTimeStamp(blockNumber) {\r\n    return await this.web3.eth.getBlock(blockNumber);\r\n  }\r\n  _calculateFee(volume, price, multiplier, feeRatio) {\r\n    return bg(volume)\r\n      .abs()\r\n      .times(price)\r\n      .times(multiplier)\r\n      .times(feeRatio)\r\n      .toString();\r\n  }\r\n}\r\n","import { Contract } from './contract';\r\nimport { bg, deriToNatural, MAX_VALUE } from '../utils';\r\n\r\n/* eslint-disable */\r\nconst CONTRACT_ABI=[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_upgradedAddress\",\"type\":\"address\"}],\"name\":\"deprecate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deprecated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_evilUser\",\"type\":\"address\"}],\"name\":\"addBlackList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradedAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maximumFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_maker\",\"type\":\"address\"}],\"name\":\"getBlackListStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBasisPoints\",\"type\":\"uint256\"},{\"name\":\"newMaxFee\",\"type\":\"uint256\"}],\"name\":\"setParams\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"issue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"basisPointsRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlackListed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_clearedUser\",\"type\":\"address\"}],\"name\":\"removeBlackList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_UINT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_blackListedUser\",\"type\":\"address\"}],\"name\":\"destroyBlackFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Issue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"Deprecate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"feeBasisPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"maxFee\",\"type\":\"uint256\"}],\"name\":\"Params\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_blackListedUser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"DestroyedBlackFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"AddedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"RemovedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"}]\r\n/* eslint-enable */\r\n\r\nexport class BTokenContract extends Contract {\r\n  constructor(chainId, contractAddress, poolAddress, isProvider) {\r\n    super(chainId, contractAddress, isProvider);\r\n    this.poolAddress = poolAddress;\r\n    this.contract = new this.web3.eth.Contract(\r\n      CONTRACT_ABI,\r\n      this.contractAddress\r\n    );\r\n  }\r\n\r\n  async isUnlocked(accountAddress) {\r\n    let allowance = await this._call('allowance', [\r\n      accountAddress,\r\n      this.poolAddress,\r\n    ]);\r\n    allowance = deriToNatural(allowance);\r\n    return allowance.gt(0);\r\n  }\r\n\r\n  async unlock(accountAddress) {\r\n    return await this._transact(\r\n      'approve',\r\n      [this.poolAddress, MAX_VALUE],\r\n      accountAddress\r\n    );\r\n  }\r\n\r\n  async symbol() {\r\n    return await this._call('symbol');\r\n  }\r\n\r\n  async decimals() {\r\n    return await this._call('decimals');\r\n  }\r\n  async _balance(address) {\r\n    return await this._call('balanceOf', [address]);\r\n  }\r\n\r\n  async balance(address) {\r\n    const [res, decimals] = await Promise.all([\r\n      this._balance(address),\r\n      this.decimals(),\r\n    ]);\r\n    return bg(res, -decimals);\r\n  }\r\n\r\n  // for slp pool use\r\n  // async balanceOf(poolAddress) {\r\n  //   //const res = await this._call('balanceOf', [poolAddress])\r\n  //   let result\r\n  //   const [res, decimals] = await Promise.all([\r\n  //     this._balance(this.poolAddress),\r\n  //     this.decimals(),\r\n  //   ])\r\n  //   result = bg(res, -decimals)\r\n  //   return result\r\n  // }\r\n}\r\n","import { deriToNatural, bg } from '../utils';\r\nimport { Contract } from './contract';\r\n\r\n/* eslint-disable */\r\nconst CONTRACT_ABI=[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"volume\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"cost\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"lastCumuFundingRate\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"}],\"name\":\"Update\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getPosition\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"volume\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"cost\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lastCumuFundingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getPosition\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"volume\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"cost\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lastCumuFundingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"volume\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"cost\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lastCumuFundingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\r\n/* eslint-enable */\r\n\r\nexport class PTokenContract extends Contract {\r\n  constructor(chainId, contractAddress, poolAddress, isProvider) {\r\n    super(chainId, contractAddress, isProvider);\r\n    this.poolAddress = poolAddress;\r\n    this.contract = new this.web3.eth.Contract(\r\n      CONTRACT_ABI,\r\n      this.contractAddress\r\n    );\r\n  }\r\n\r\n  async getPositionInfo(accountAddress) {\r\n    let result = {};\r\n    try {\r\n      const res = await this._call('getPosition(address)', [accountAddress]);\r\n      //console.log(\"getPositionInfo() raw:\", res)\r\n      result = {\r\n        volume: deriToNatural(res[0]),\r\n        cost: deriToNatural(res[1]),\r\n        lastCumuFundingRate: deriToNatural(res[2]),\r\n        margin: deriToNatural(res[3]),\r\n        lastUpdateTimestamp: bg(res[4]),\r\n      };\r\n    } catch (err) {\r\n      result = {\r\n        volume: bg(0),\r\n        cost: bg(0),\r\n        lastCumuFundingRate: bg(0),\r\n        margin: bg(0),\r\n        lastUpdateTimestamp: bg(0),\r\n      };\r\n      //console.log(`getPositionInfo: ${err}`);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  async exists(accountAddress) {\r\n    return await this._call('exists', [accountAddress]);\r\n  }\r\n}\r\n","import { deriToNatural } from '../utils';\r\nimport { Contract } from './contract';\r\n\r\n/* eslint-disable */\r\nconst CONTRACT_ABI=[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\r\n/* eslint-enable */\r\n\r\nexport class LTokenContract extends Contract {\r\n  constructor(chainId, contractAddress, poolAddress, isProvider) {\r\n    super(chainId, contractAddress, isProvider);\r\n    this.poolAddress = poolAddress;\r\n    this.contract = new this.web3.eth.Contract(\r\n      CONTRACT_ABI,\r\n      this.contractAddress\r\n    );\r\n  }\r\n\r\n  async balance(accountAddress) {\r\n    const res = deriToNatural(await this._call('balanceOf', [accountAddress]));\r\n    //console.log(\"> lToken balance\", res.toString())\r\n    return res;\r\n  }\r\n\r\n  async totalSupply() {\r\n    const res = deriToNatural(await this._call('totalSupply'));\r\n    //console.log(\"> lToken totalSupply\", res.toString())\r\n    return res;\r\n  }\r\n}\r\n","import Web3 from 'web3';\r\nimport { getDBProviderUrlsConfig } from '../config/database';\r\nimport { getAliveHttpServer, checkHttpServerIsAlive } from '../utils';\r\n\r\n/* eslint-disable */\r\nconst DB_CONTRACT_ABI = [{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"controllers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"data\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldController\",\"type\":\"address\"}],\"name\":\"delController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"keys\",\"type\":\"string[]\"}],\"name\":\"getValues\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"internalType\":\"structDatabase.Params1[]\",\"name\":\"pairs\",\"type\":\"tuple[]\"}],\"name\":\"setValues\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\r\n/* eslint-enable */\r\n\r\nexport class DatabaseContract {\r\n  constructor(contractAddress, providerUrl) {\r\n    this.providerUrl = providerUrl;\r\n    this.contractAddress = contractAddress;\r\n    if (this.providerUrl) {\r\n      this._init();\r\n    }\r\n  }\r\n  _init() {\r\n    // only use 'bsc testnet' with chainId 97\r\n    this.web3 = new Web3(new Web3.providers.HttpProvider(this.providerUrl));\r\n    this.contract = new this.web3.eth.Contract(\r\n      DB_CONTRACT_ABI,\r\n      this.contractAddress\r\n    );\r\n  }\r\n\r\n  async updateProviderUrl() {\r\n    if (!this.providerUrl) {\r\n      this.providerUrl = await getAliveHttpServer(getDBProviderUrlsConfig());\r\n      this._init();\r\n    } else if (\r\n      this.providerUrl &&\r\n      !(await checkHttpServerIsAlive(this.providerUrl))\r\n    ) {\r\n      this.providerUrl = await getAliveHttpServer(getDBProviderUrlsConfig());\r\n      this._init();\r\n    }\r\n  }\r\n\r\n  async getValues(keyArray) {\r\n    let res\r\n    let retry = 3\r\n    while(retry > 0) {\r\n      try {\r\n        await this.updateProviderUrl();\r\n        res = await this.contract.methods.getValues(keyArray).call();\r\n      } catch (err) {\r\n        this.providerUrl = null\r\n      }\r\n      if (res) {\r\n        break\r\n      }\r\n      retry -= 1\r\n    }\r\n    if (retry === 0 && !res) {\r\n      throw new Error(`database getValues(): exceed max retry 3.`)\r\n    }\r\n    return res\r\n  }\r\n}\r\n","import { getDBProviderUrlsConfig } from '../config/database';\r\nimport Web3 from 'web3';\r\nimport { getAliveHttpServer, checkHttpServerIsAlive } from '../utils';\r\n\r\n/* eslint-disable */\r\nconst CONTRACT_ABI = [{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"controllers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldController\",\"type\":\"address\"}],\"name\":\"delController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"fromWormhole\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toWormhole\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"structDatabase.Params1[]\",\"name\":\"values\",\"type\":\"tuple[]\"}],\"name\":\"setSignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"signature\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"fromWormhole\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toWormhole\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"values\",\"type\":\"address[]\"}],\"name\":\"unsetSignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\r\n/* eslint-enable */\r\n\r\nexport class DatabaseWormholeContract {\r\n  constructor(contractAddress, providerUrl) {\r\n    this.providerUrl = providerUrl;\r\n    this.contractAddress = contractAddress;\r\n    if (this.providerUrl) {\r\n      this._init();\r\n    }\r\n  }\r\n\r\n  async updateProviderUrl() {\r\n    if (!this.providerUrl) {\r\n      this.providerUrl = await getAliveHttpServer(getDBProviderUrlsConfig());\r\n      this._init();\r\n    } else if (\r\n      this.providerUrl &&\r\n      !(await checkHttpServerIsAlive(this.providerUrl))\r\n    ) {\r\n      this.providerUrl = await getAliveHttpServer(getDBProviderUrlsConfig());\r\n      this._init();\r\n    }\r\n  }\r\n\r\n  _init() {\r\n    // only use 'bsc testnet' with chainId 97\r\n    this.web3 = new Web3(new Web3.providers.HttpProvider(this.providerUrl));\r\n    this.contract = new this.web3.eth.Contract(\r\n      CONTRACT_ABI,\r\n      this.contractAddress\r\n    );\r\n  }\r\n\r\n  async signature(accountAddress) {\r\n    let res\r\n    let retry = 3\r\n    while(retry > 0) {\r\n      try {\r\n        await this.updateProviderUrl();\r\n        res = await this.contract.methods['signature'](accountAddress).call();\r\n      } catch (err) {\r\n        this.providerUrl = null\r\n      }\r\n      if (res) {\r\n        break\r\n      }\r\n      retry -= 1\r\n    }\r\n    if (retry === 0 && !res) {\r\n      throw new Error(`database getValues(): exceed max retry 3.`)\r\n    }\r\n    return res\r\n  }\r\n}\r\n","import { getDBProviderUrlsConfig } from '../config/database';\r\nimport Web3 from 'web3';\r\nimport { getAliveHttpServer, checkHttpServerIsAlive } from '../utils';\r\n\r\n/* eslint-disable */\r\nconst CONTRACT_ABI = [{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"controllers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"data\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldController\",\"type\":\"address\"}],\"name\":\"delController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"keys\",\"type\":\"string[]\"}],\"name\":\"getValues\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"internalType\":\"structDatabase.Params1[]\",\"name\":\"pairs\",\"type\":\"tuple[]\"}],\"name\":\"setValues\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\r\n/* eslint-enable */\r\n\r\nexport class DatabaseAirdropContract {\r\n  constructor(contractAddress, providerUrl) {\r\n    this.providerUrl = providerUrl;\r\n    this.contractAddress = contractAddress;\r\n    if (this.providerUrl) {\r\n      this._init();\r\n    }\r\n  }\r\n\r\n  _init() {\r\n    // only use 'bsc testnet' with chainId 97\r\n    this.web3 = new Web3(new Web3.providers.HttpProvider(this.providerUrl));\r\n    this.contract = new this.web3.eth.Contract(\r\n      CONTRACT_ABI,\r\n      this.contractAddress\r\n    );\r\n  }\r\n\r\n  async updateProviderUrl() {\r\n    if (!this.providerUrl) {\r\n      this.providerUrl = await getAliveHttpServer(getDBProviderUrlsConfig());\r\n      this._init();\r\n    } else if (\r\n      this.providerUrl &&\r\n      !(await checkHttpServerIsAlive(this.providerUrl))\r\n    ) {\r\n      this.providerUrl = await getAliveHttpServer(getDBProviderUrlsConfig());\r\n      this._init();\r\n    }\r\n  }\r\n\r\n  async getValues(keyArray) {\r\n    let res\r\n    let retry = 3\r\n    while(retry > 0) {\r\n      try {\r\n        await this.updateProviderUrl();\r\n        res = await this.contract.methods.getValues(keyArray).call();\r\n      } catch (err) {\r\n        this.providerUrl = null\r\n      }\r\n      if (res) {\r\n        break\r\n      }\r\n      retry -= 1\r\n    }\r\n    if (retry === 0 && !res) {\r\n      throw new Error(`database getValues(): exceed max retry 3.`)\r\n    }\r\n    return res\r\n  }\r\n}\r\n","import Web3 from 'web3';\r\nimport { Contract } from './contract';\r\n\r\n/* eslint-disable */\r\nconst CONTRACT_ABI={\"_format\":\"hh-sol-artifact-1\",\"contractName\":\"Vault\",\"sourceName\":\"contracts/Vault.sol\",\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"ApproveMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"ExecuteMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"PrepareMigration\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLAIM_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"name\":\"executeMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMigrated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"graceDays\",\"type\":\"uint256\"}],\"name\":\"prepareMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"usedHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"bytecode\":\"\",\"deployedBytecode\":\"\",\"linkReferences\":{},\"deployedLinkReferences\":{}}\r\n/* eslint-enable */\r\n\r\nexport class MiningVaultPool extends Contract {\r\n  constructor(chainId, contractAddress, isProvider) {\r\n    super(chainId, contractAddress, isProvider);\r\n    this.contract = new this.web3.eth.Contract(\r\n      CONTRACT_ABI['abi'],\r\n      this.contractAddress\r\n    );\r\n  }\r\n  async mintDToken(accountAddress, ...args) {\r\n    //return this._transact('claim', args)\r\n    // !this.accountAddress &&\r\n    //   console.log('please do setAccount(accountAddress) first');\r\n    const gas = await this._estimatedGas(\r\n      'claim',\r\n      [accountAddress, ...args],\r\n      accountAddress\r\n    );\r\n    console.log(gas);\r\n    let txRaw = [\r\n      {\r\n        from: accountAddress,\r\n        to: this.contractAddress,\r\n        gas: Web3.utils.numberToHex(gas),\r\n        value: Web3.utils.numberToHex('0'),\r\n        data: this.contract.methods['claim'](\r\n          accountAddress,\r\n          ...args\r\n        ).encodeABI(),\r\n      },\r\n    ];\r\n    let tx = await window.ethereum.request({\r\n      method: 'eth_sendTransaction',\r\n      params: txRaw,\r\n    });\r\n    return await new Promise(this._getTransactionReceipt(tx));\r\n  }\r\n}\r\n","import Web3 from 'web3';\r\nimport { Contract } from './contract';\r\n\r\n/* eslint-disable */\r\nconst CONTRACT_ABI=[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"miningVault_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLAIM_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v1\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r1\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s1\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v2\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r2\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s2\",\"type\":\"bytes32\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimNewController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"miningVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setNewController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"usedHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]\r\n/* eslint-enable */\r\n\r\nexport class MiningVaultRouter extends Contract {\r\n  constructor(chainId, contractAddress, isProvider) {\r\n    super(chainId, contractAddress, isProvider);\r\n    this.contract = new this.web3.eth.Contract(\r\n      CONTRACT_ABI,\r\n      this.contractAddress\r\n    );\r\n  }\r\n  async mint(accountAddress, ...args) {\r\n    //console.log(accountAddress, args)\r\n    const gas = await this._estimatedGas(\r\n      'claim',\r\n      [accountAddress, ...args],\r\n      accountAddress\r\n    );\r\n    //console.log(gas);\r\n    let txRaw = [\r\n      {\r\n        from: accountAddress,\r\n        to: this.contractAddress,\r\n        gas: Web3.utils.numberToHex(gas),\r\n        value: Web3.utils.numberToHex('0'),\r\n        data: this.contract.methods['claim'](\r\n          accountAddress,\r\n          ...args\r\n        ).encodeABI(),\r\n      },\r\n    ];\r\n    //console.log('txRaw', txRaw)\r\n    let tx = await window.ethereum.request({\r\n      method: 'eth_sendTransaction',\r\n      params: txRaw,\r\n    });\r\n    return await new Promise(this._getTransactionReceipt(tx));\r\n  }\r\n}\r\n","import { deriToNatural, naturalToDeri } from '../utils';\r\nimport { Contract } from './contract';\r\n\r\n/* eslint-disable */\r\nconst CONTRACT_ABI = [{\"inputs\":[{\"internalType\":\"contractSushiToken\",\"name\":\"_sushi\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sushiPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonusEndBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BONUS_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contractIERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusEndBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"}],\"name\":\"dev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devaddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrator\",\"outputs\":[{\"internalType\":\"contractIMigratorChef\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingSushi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accSushiPerShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIMigratorChef\",\"name\":\"_migrator\",\"type\":\"address\"}],\"name\":\"setMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushi\",\"outputs\":[{\"internalType\":\"contractSushiToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\r\n/* eslint-enable */\r\n\r\nexport class SlpPool extends Contract {\r\n  constructor(chainId, contractAddress, isProvider) {\r\n    super(chainId, contractAddress, isProvider);\r\n    this.contract = new this.web3.eth.Contract(\r\n      CONTRACT_ABI,\r\n      this.contractAddress\r\n    );\r\n  }\r\n  async addLiquidity(accountAddress, amount) {\r\n    const args = [152, naturalToDeri(amount)];\r\n    return await this._transact('deposit', args, accountAddress);\r\n  }\r\n  async removeLiquidity(accountAddress, amount) {\r\n    const args = [152, naturalToDeri(amount)];\r\n    return await this._transact('withdraw', args, accountAddress);\r\n  }\r\n  async getLiquidity(accountAddress) {\r\n    const res = await this._call('userInfo', [152, accountAddress]);\r\n    if (res && res.amount) {\r\n      return deriToNatural(res.amount);\r\n    } else {\r\n      console.log('the amount is not exist ');\r\n      return '0';\r\n    }\r\n  }\r\n}\r\n","import { deriToNatural, naturalToDeri } from '../utils';\r\nimport { Contract } from './contract';\r\n\r\n/* eslint-disable */\r\nconst CONTRACT_ABI = [{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"ExecuteMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"PrepareMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"removeAmount\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"name\":\"executeMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getParameters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minAddLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redemptionFeeRatio\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStateValues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address[2]\",\"name\":\"addresses_\",\"type\":\"address[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"parameters_\",\"type\":\"uint256[2]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"graceDays\",\"type\":\"uint256\"}],\"name\":\"prepareMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lAmount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]\r\n/* eslint-enable */\r\n\r\nexport class ClpPool extends Contract {\r\n  constructor(chainId, contractAddress, isProvider) {\r\n    super(chainId, contractAddress, isProvider);\r\n    this.contract = new this.web3.eth.Contract(\r\n      CONTRACT_ABI,\r\n      this.contractAddress\r\n    );\r\n  }\r\n  async addLiquidity(accountAddress, amount) {\r\n    const args = [naturalToDeri(amount)];\r\n    return await this._transact('addLiquidity', args, accountAddress);\r\n  }\r\n\r\n  async removeLiquidity(accountAddress, amount) {\r\n    const args = [naturalToDeri(amount)];\r\n    return await this._transact('removeLiquidity', args, accountAddress);\r\n  }\r\n\r\n  async getParameters() {\r\n    const res = await this._call('getParameters');\r\n    return {\r\n      minAddLiquidity: deriToNatural(res.minAddLiquidity),\r\n      redemptionFeeRatio: deriToNatural(res.redemptionFeeRatio),\r\n    };\r\n  }\r\n\r\n  async getStateValues() {\r\n    const res = await this._call('getStateValues');\r\n    return {\r\n      liquidity: deriToNatural(res),\r\n    };\r\n  }\r\n\r\n  async getLiquidity() {\r\n    const res = await this._call('getStateValues');\r\n    if (res && res.liquidity) {\r\n      return deriToNatural(res.liquidity);\r\n    }\r\n    throw new Error(\r\n      `unable to get liquidity of this clp pool ${this.poolAddress}`\r\n    );\r\n  }\r\n}\r\n","import { deriToNatural, naturalToDeri } from '../utils';\r\nimport { Contract } from './contract';\r\n\r\n/* eslint-disable */\r\nconst CONTRACT_ABI = [{\"inputs\":[{\"internalType\":\"contract CakeToken\",\"name\":\"_cake\",\"type\":\"address\"},{\"internalType\":\"contract SyrupBar\",\"name\":\"_syrup\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cakePerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BONUS_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IBEP20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cake\",\"outputs\":[{\"internalType\":\"contract CakeToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cakePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"}],\"name\":\"dev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devaddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"enterStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"leaveStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrator\",\"outputs\":[{\"internalType\":\"contract IMigratorChef\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingCake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accCakePerShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMigratorChef\",\"name\":\"_migrator\",\"type\":\"address\"}],\"name\":\"setMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"syrup\",\"outputs\":[{\"internalType\":\"contract SyrupBar\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"multiplierNumber\",\"type\":\"uint256\"}],\"name\":\"updateMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\r\n/* eslint-enable */\r\n\r\nexport class Clp2Pool extends Contract {\r\n  constructor(chainId, contractAddress, isProvider) {\r\n    super(chainId, contractAddress, isProvider);\r\n    this.contract = new this.web3.eth.Contract(\r\n      CONTRACT_ABI,\r\n      this.contractAddress\r\n    );\r\n  }\r\n  async addLiquidity(accountAddress, amount) {\r\n    const args = [391, naturalToDeri(amount)];\r\n    return await this._transact('deposit', args, accountAddress);\r\n  }\r\n  async removeLiquidity(accountAddress, amount) {\r\n    const args = [391, naturalToDeri(amount)];\r\n    return await this._transact('withdraw', args, accountAddress);\r\n  }\r\n  async getLiquidity(accountAddress) {\r\n    //console.log('hit clp2')\r\n    const res = await this._call('userInfo', [391, accountAddress]);\r\n    if (res && res.amount) {\r\n      return deriToNatural(res.amount);\r\n    } else {\r\n      console.log('the amount is not exist ');\r\n      return '0';\r\n    }\r\n  }\r\n}","import { deriToNatural, MAX_VALUE, bg } from '../utils';\r\nimport { Contract } from './contract';\r\n\r\n/* eslint-disable */\r\nconst CONTRACT_ABI=[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldController\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"ChangeController\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\r\n/* eslint-enable */\r\n\r\nexport class DeriContract extends Contract {\r\n  constructor(chainId, contractAddress, poolAddress, useProvider) {\r\n    super(chainId, contractAddress, useProvider);\r\n    this.poolAddress = poolAddress;\r\n    this.contract = new this.web3.eth.Contract(\r\n      CONTRACT_ABI,\r\n      this.contractAddress\r\n    );\r\n  }\r\n\r\n  async isUnlocked(accountAddress) {\r\n    let allowance = await this._call('allowance', [\r\n      accountAddress,\r\n      this.poolAddress,\r\n    ]);\r\n    return deriToNatural(allowance).gt(0);\r\n  }\r\n  async unlock(accountAddress) {\r\n    //!this.poolAddress && console.log('please do setAccount(poolAddress) first');\r\n    return await this._transact(\r\n      'approve',\r\n      [this.poolAddress, MAX_VALUE],\r\n      accountAddress\r\n    );\r\n  }\r\n\r\n  async decimals() {\r\n    return await this._call('decimals');\r\n  }\r\n\r\n  async _balance(address) {\r\n    return await this._call('balanceOf', [address]);\r\n  }\r\n\r\n  async balance(address) {\r\n    const [res, decimals] = await Promise.all([\r\n      this._balance(address),\r\n      this.decimals(),\r\n    ]);\r\n    return bg(res, -decimals);\r\n  }\r\n}\r\n","import { getDeriContractAddress, naturalToDeri } from '../utils';\r\nimport { Contract } from './contract';\r\n\r\n/* eslint-disable */\r\nconst CONTRACT_ABI=[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowMintBurn_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"ApproveMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromWormhole\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toWormhole\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"ExecuteMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromWormhole\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toWormhole\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"PrepareMigration\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLAIM_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowMintBurn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"fromWormhole\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"name\":\"executeMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toWormhole\",\"type\":\"address\"}],\"name\":\"freeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMigrated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"graceDays\",\"type\":\"uint256\"}],\"name\":\"prepareMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"usedHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]\r\n/* eslint-enable */\r\n\r\nexport class WormholeContract extends Contract {\r\n  constructor(chainId, contractAddress, useProvider) {\r\n    super(chainId, contractAddress, useProvider);\r\n    this.contract = new this.web3.eth.Contract(\r\n      CONTRACT_ABI,\r\n      this.contractAddress\r\n    );\r\n  }\r\n  async freeze(accountAddress, amount, toChainId) {\r\n    const { wormholeAddress: toWormholeAddress } = getDeriContractAddress(\r\n      toChainId\r\n    );\r\n    return this._transact(\r\n      'freeze',\r\n      [naturalToDeri(amount), toChainId, toWormholeAddress],\r\n      accountAddress\r\n    );\r\n  }\r\n\r\n  async mintDeri(\r\n    accountAddress,\r\n    amount,\r\n    fromChainId,\r\n    fromWormhole,\r\n    fromNonce,\r\n    v,\r\n    r,\r\n    s\r\n  ) {\r\n    return this._transact(\r\n      'claim',\r\n      [amount, fromChainId, fromWormhole, fromNonce, v, r, s],\r\n      accountAddress\r\n    );\r\n  }\r\n}\r\n","import { PerpetualPool } from '../contract/perpetual_pool';\r\nimport { BTokenContract } from '../contract/bToken';\r\nimport { PTokenContract } from '../contract/pToken';\r\nimport { LTokenContract } from '../contract/lToken';\r\nimport { DatabaseContract } from '../contract/database';\r\nimport { DatabaseWormholeContract } from '../contract/database_wormhole';\r\nimport { DatabaseAirdropContract } from '../contract/database_airdrop';\r\nimport { MiningVaultPool } from '../contract/mining_vault_pool';\r\nimport { MiningVaultRouter } from '../contract/mining_vault_router';\r\n\r\nimport { DeriEnv } from '../config/env';\r\nimport { getDBAddressConfig, getDBWormholeAddressConfig, getDBAirdropAddressConfig } from '../config';\r\nimport { SlpPool } from '../contract/slp_pool';\r\nimport { ClpPool } from '../contract/clp_pool';\r\nimport { Clp2Pool } from '../contract/clp2_pool';\r\nimport { DeriContract } from '../contract/deri';\r\nimport { WormholeContract } from '../contract/wormhole';\r\n//import { getLpContractAddress } from '../utils';\r\n// import { getPoolBaseSymbolList } from '../utils'\r\n\r\nexport const databaseFactory = (() => {\r\n  const databaseInstanceMap = {};\r\n  return (useProductionDB = false) => {\r\n    const address = getDBAddressConfig(DeriEnv.get(), useProductionDB);\r\n    const key = address;\r\n    if (Object.keys(databaseInstanceMap).includes(key)) {\r\n      return databaseInstanceMap[key];\r\n    }\r\n    const database = new DatabaseContract(address);\r\n    databaseInstanceMap[key] = database;\r\n    return database;\r\n  };\r\n})();\r\n\r\nexport const databaseWormholeFactory = (() => {\r\n  const databaseInstanceMap = {};\r\n  return (useProductionDB = false) => {\r\n    const address = getDBWormholeAddressConfig(DeriEnv.get(), useProductionDB);\r\n    const key = address;\r\n    if (Object.keys(databaseInstanceMap).includes(key)) {\r\n      return databaseInstanceMap[key];\r\n    }\r\n    const database = new DatabaseWormholeContract(address);\r\n    databaseInstanceMap[key] = database;\r\n    return database;\r\n  };\r\n})();\r\n\r\nexport const databaseAirdropFactory = (() => {\r\n  const databaseInstanceMap = {};\r\n  return (useProductionDB = false) => {\r\n    const address = getDBAirdropAddressConfig(DeriEnv.get(), useProductionDB);\r\n    const key = address;\r\n    //console.log('---airdrop key', key)\r\n    if (Object.keys(databaseInstanceMap).includes(key)) {\r\n      return databaseInstanceMap[key];\r\n    }\r\n    const database = new DatabaseAirdropContract(address);\r\n    databaseInstanceMap[key] = database;\r\n    return database;\r\n  };\r\n})();\r\n\r\nexport const perpetualPoolFactory = (() => {\r\n  const perpetualPoolInstanceMap = {};\r\n  return (chainId, contractAddress, isProvider = false) => {\r\n    let key;\r\n    if (isProvider) {\r\n      key = `${chainId}.${contractAddress}.isProvider`;\r\n    } else {\r\n      key = `${chainId}.${contractAddress}`;\r\n    }\r\n    if (Object.keys(perpetualPoolInstanceMap).includes(key)) {\r\n      return perpetualPoolInstanceMap[key];\r\n    }\r\n    const perpetualPool = new PerpetualPool(\r\n      chainId,\r\n      contractAddress,\r\n      isProvider\r\n    );\r\n    // console.log(\"new PerpetualPoolContract\");\r\n    perpetualPoolInstanceMap[key] = perpetualPool;\r\n    return perpetualPool;\r\n  };\r\n})();\r\n\r\nexport const bTokenFactory = (function () {\r\n  const bTokenInstanceMap = {};\r\n  return (chainId, contractAddress, poolAddress, isProvider = false) => {\r\n    let key;\r\n    if (isProvider) {\r\n      key = `${chainId}.${contractAddress}.${poolAddress}.isProvider`;\r\n    } else {\r\n      key = `${chainId}.${contractAddress}.${poolAddress}`;\r\n    }\r\n    if (Object.keys(bTokenInstanceMap).includes(key)) {\r\n      return bTokenInstanceMap[key];\r\n    }\r\n    const bToken = new BTokenContract(\r\n      chainId,\r\n      contractAddress,\r\n      poolAddress,\r\n      isProvider\r\n    );\r\n    // console.log(\"new BTokenContract\")\r\n    bTokenInstanceMap[key] = bToken;\r\n    return bToken;\r\n  };\r\n})();\r\n\r\nexport const pTokenFactory = (function () {\r\n  const pTokenInstanceMap = {};\r\n  return (chainId, contractAddress, poolAddress, isProvider = false) => {\r\n    let key;\r\n    if (isProvider) {\r\n      key = `${chainId}.${contractAddress}.${poolAddress}.isProvider`;\r\n    } else {\r\n      key = `${chainId}.${contractAddress}.${poolAddress}`;\r\n    }\r\n    if (Object.keys(pTokenInstanceMap).includes(key)) {\r\n      return pTokenInstanceMap[key];\r\n    }\r\n    const pToken = new PTokenContract(\r\n      chainId,\r\n      contractAddress,\r\n      poolAddress,\r\n      isProvider\r\n    );\r\n    // console.log(\"new PTokenContract\")\r\n    pTokenInstanceMap[key] = pToken;\r\n    return pToken;\r\n  };\r\n})();\r\n\r\nexport const lTokenFactory = (function () {\r\n  const lTokenInstanceMap = {};\r\n  return (chainId, contractAddress, poolAddress, isProvider = false) => {\r\n    let key;\r\n    if (isProvider) {\r\n      key = `${chainId}.${contractAddress}.${poolAddress}.isProvider`;\r\n    } else {\r\n      key = `${chainId}.${contractAddress}.${poolAddress}`;\r\n    }\r\n    if (Object.keys(lTokenInstanceMap).includes(key)) {\r\n      return lTokenInstanceMap[key];\r\n    }\r\n    const lToken = new LTokenContract(\r\n      chainId,\r\n      contractAddress,\r\n      poolAddress,\r\n      isProvider\r\n    );\r\n    // console.log(\"new LTokenContract\")\r\n    lTokenInstanceMap[key] = lToken;\r\n    return lToken;\r\n  };\r\n})();\r\n\r\nexport const miningVaultPoolFactory = (function () {\r\n  const mVaultInstanceMap = {};\r\n  return (chainId, contractAddress, isProvider = false) => {\r\n    let key;\r\n    if (isProvider) {\r\n      key = `${chainId}.${contractAddress}.isProvider`;\r\n    } else {\r\n      key = `${chainId}.${contractAddress}`;\r\n    }\r\n    if (Object.keys(mVaultInstanceMap).includes(key)) {\r\n      return mVaultInstanceMap[key];\r\n    }\r\n    const mVault = new MiningVaultPool(chainId, contractAddress, isProvider);\r\n    // console.log(\"new MiningValutPool\")\r\n    mVaultInstanceMap[key] = mVault;\r\n    return mVault;\r\n  };\r\n})();\r\n\r\nexport const slpPoolFactory = (function () {\r\n  const slpPoolInstanceMap = {};\r\n  return (chainId, contractAddress, isProvider = false) => {\r\n    let key;\r\n    if (isProvider) {\r\n      key = `${chainId}.${contractAddress}.isProvider`;\r\n    } else {\r\n      key = `${chainId}.${contractAddress}`;\r\n    }\r\n    if (Object.keys(slpPoolInstanceMap).includes(key)) {\r\n      return slpPoolInstanceMap[key];\r\n    }\r\n    const slpPool = new SlpPool(chainId, contractAddress, isProvider);\r\n    slpPoolInstanceMap[key] = slpPool;\r\n    return slpPool;\r\n  };\r\n})();\r\n\r\nexport const clpPoolFactory = (function () {\r\n  const clpPoolInstanceMap = {};\r\n  return (chainId, contractAddress, isProvider = false) => {\r\n    let key;\r\n    if (isProvider) {\r\n      key = `${chainId}.${contractAddress}.isProvider`;\r\n    } else {\r\n      key = `${chainId}.${contractAddress}`;\r\n    }\r\n    if (Object.keys(clpPoolInstanceMap).includes(key)) {\r\n      return clpPoolInstanceMap[key];\r\n    }\r\n    const clpPool = new ClpPool(chainId, contractAddress, isProvider);\r\n    clpPoolInstanceMap[key] = clpPool;\r\n    return clpPool;\r\n  };\r\n})();\r\n\r\nexport const clp2PoolFactory = (function () {\r\n  const clp2PoolInstanceMap = {};\r\n  return (chainId, contractAddress, isProvider = false) => {\r\n    let key;\r\n    if (isProvider) {\r\n      key = `${chainId}.${contractAddress}.isProvider`;\r\n    } else {\r\n      key = `${chainId}.${contractAddress}`;\r\n    }\r\n    if (Object.keys(clp2PoolInstanceMap).includes(key)) {\r\n      return clp2PoolInstanceMap[key];\r\n    }\r\n    const clp2Pool = new Clp2Pool(chainId, contractAddress, isProvider);\r\n    clp2PoolInstanceMap[key] = clp2Pool;\r\n    return clp2Pool;\r\n  };\r\n})();\r\n\r\n// export const lpPoolFactory = (function () {\r\n//   const lpPoolInstanceMap = {};\r\n//   return (chainId, contractAddress, isProvider = false) => {\r\n//     let key;\r\n//     if (isProvider) {\r\n//       key = `${chainId}.${contractAddress}.isProvider`;\r\n//     } else {\r\n//       key = `${chainId}.${contractAddress}`;\r\n//     }\r\n//     if (Object.keys(lpPoolInstanceMap).includes(key)) {\r\n//       return lpPoolInstanceMap[key];\r\n//     } else {\r\n//       let lpPool;\r\n//       const { type } = getLpContractAddress(chainId, contractAddress);\r\n//       console.log(`lp type: ${type}`);\r\n//       if (type === 'slp') {\r\n//         lpPool = new SlpPool(chainId, contractAddress, isProvider);\r\n//       } else if (type === 'clp') {\r\n//         lpPool = new ClpPool(chainId, contractAddress, isProvider);\r\n//       }\r\n//       lpPoolInstanceMap[key] = lpPool;\r\n//       return lpPool;\r\n//     }\r\n//   };\r\n// })();\r\n\r\nexport const deriFactory = (function () {\r\n  const deriInstanceMap = {};\r\n  return (chainId, contractAddress, poolAddress, isProvider = false) => {\r\n    let key;\r\n    if (isProvider) {\r\n      key = `${chainId}.${contractAddress}.isProvider`;\r\n    } else {\r\n      key = `${chainId}.${contractAddress}`;\r\n    }\r\n    if (Object.keys(deriInstanceMap).includes(key)) {\r\n      return deriInstanceMap[key];\r\n    }\r\n    const deri = new DeriContract(\r\n      chainId,\r\n      contractAddress,\r\n      poolAddress,\r\n      isProvider\r\n    );\r\n    deriInstanceMap[key] = deri;\r\n    return deri;\r\n  };\r\n})();\r\n\r\nexport const wormholeFactory = (function () {\r\n  const wormholeInstanceMap = {};\r\n  return (chainId, contractAddress, isProvider = false) => {\r\n    let key;\r\n    if (isProvider) {\r\n      key = `${chainId}.${contractAddress}.isProvider`;\r\n    } else {\r\n      key = `${chainId}.${contractAddress}`;\r\n    }\r\n    if (Object.keys(wormholeInstanceMap).includes(key)) {\r\n      return wormholeInstanceMap[key];\r\n    }\r\n    const wormhole = new WormholeContract(chainId, contractAddress, isProvider);\r\n    wormholeInstanceMap[key] = wormhole;\r\n    return wormhole;\r\n  };\r\n})();\r\n\r\nexport const miningVaultRouterFactory = (function () {\r\n  const mVaultInstanceMap = {};\r\n  return (chainId, contractAddress, isProvider = false) => {\r\n    let key;\r\n    if (isProvider) {\r\n      key = `${chainId}.${contractAddress}.isProvider`;\r\n    } else {\r\n      key = `${chainId}.${contractAddress}`;\r\n    }\r\n    if (Object.keys(mVaultInstanceMap).includes(key)) {\r\n      return mVaultInstanceMap[key];\r\n    }\r\n    const mVault = new MiningVaultRouter(chainId, contractAddress, isProvider);\r\n    mVaultInstanceMap[key] = mVault;\r\n    return mVault;\r\n  };\r\n})();\r\n","// export const DERI_ENV=\"dev\"\r\nexport const DeriEnv = (() => {\r\n  let _deriEnv = 'dev';\r\n  return {\r\n    get: () => _deriEnv,\r\n    set: (value) => {\r\n      if (value === 'dev' || value === 'prod' || value === 'production') {\r\n        _deriEnv = value;\r\n      } else {\r\n        throw new Error(\"please use 'dev' or 'prod' for DeriEnv\");\r\n      }\r\n    },\r\n  };\r\n})();\r\n","export const getChainProviderUrls = (chainId) => {\r\n  const chainProviderUrls = [\r\n    {\r\n      provider_urls: [\r\n        \"https://mainnet.infura.io/v3/d0e6582644a845ee8d7c3c18683fec06\",\r\n      ],\r\n      chainId: '1',\r\n    },\r\n    {\r\n      provider_urls: [\r\n        'https://bsc-dataseed.binance.org',\r\n        'https://bsc-dataseed1.defibit.io/',\r\n        'https://bsc-dataseed1.ninicoin.io/',\r\n      ],\r\n      chainId: '56',\r\n    },\r\n    {\r\n      provider_urls: ['https://http-mainnet.hecochain.com'],\r\n      chainId: '128',\r\n    },\r\n    {\r\n      provider_urls: [\r\n        'https://ropsten.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\r\n      ],\r\n      chainId: '3',\r\n    },\r\n    {\r\n      provider_urls: [\r\n        'https://kovan.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\r\n      ],\r\n      chainId: '42',\r\n    },\r\n    {\r\n      provider_urls: [\r\n        'https://data-seed-prebsc-2-s1.binance.org:8545/',\r\n        'https://data-seed-prebsc-1-s2.binance.org:8545/',\r\n        'https://data-seed-prebsc-2-s2.binance.org:8545/',\r\n        'https://data-seed-prebsc-1-s3.binance.org:8545/',\r\n        'https://data-seed-prebsc-1-s1.binance.org:8545/',\r\n        'https://data-seed-prebsc-2-s3.binance.org:8545/',\r\n      ],\r\n      chainId: '97',\r\n    },\r\n    {\r\n      provider_urls: ['https://http-testnet.hecochain.com'],\r\n      chainId: '256',\r\n    },\r\n  ];\r\n\r\n  const res = chainProviderUrls.filter((i) => i.chainId  === chainId)\r\n  //console.log('res',res)\r\n  if (res.length > 0) {\r\n    return res[0].provider_urls\r\n  } else {\r\n    throw new Error(`getChainProviderUrls: no urls for chainId ${chainId}`)\r\n  }\r\n}\r\n\r\nexport const getAnnualBlockNumberConfig = () => {\r\n  return {\r\n    1: '2367422',\r\n    56: '10497304',\r\n    128: '10511369',\r\n    3: '2367422',\r\n    97: '10497304',\r\n    256: '10511369',\r\n  };\r\n};\r\n\r\nexport const MAX_UINT256 =\r\n  '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff';\r\nexport const MAX_INT256 =\r\n  '0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff';\r\n\r\n","import { DeriEnv } from \"../../config\";\r\n\r\nexport const getPoolConfigList = (env = 'dev') => {\r\n  if (env === 'prod') {\r\n    return [\r\n      {\r\n        pool: '0x19c2655A0e1639B189FB0CF06e02DC0254419D92',\r\n        pToken: '0x2AA5865BF556ab3f6Cd9405e565099f70234dF05',\r\n        lToken: '0x6f8F1C2781b555B63F1A1BE85BF99aEe27d87cB2',\r\n        router: '0xC9C234243f48Fa05A993c29B4F5f93048f5b07E4',\r\n        bToken: '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56',\r\n        bTokenId: '0',\r\n        initialBlock: '7884650',\r\n        bTokenSymbol: 'BUSD',\r\n        symbol: 'BTCUSD',\r\n        symbolId: '0',\r\n        unit: 'BTC',\r\n        chainId: '56',\r\n        version: 'v2',\r\n      },\r\n      {\r\n        pool: '0x19c2655A0e1639B189FB0CF06e02DC0254419D92',\r\n        pToken: '0x2AA5865BF556ab3f6Cd9405e565099f70234dF05',\r\n        lToken: '0x6f8F1C2781b555B63F1A1BE85BF99aEe27d87cB2',\r\n        router: '0xC9C234243f48Fa05A993c29B4F5f93048f5b07E4',\r\n        bToken: '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56',\r\n        bTokenId: '0',\r\n        initialBlock: '7884650',\r\n        bTokenSymbol: 'BUSD',\r\n        symbol: 'ETHUSD',\r\n        symbolId: '1',\r\n        unit: 'ETH',\r\n        chainId: '56',\r\n        version: 'v2',\r\n      }\r\n    ];\r\n  } else {\r\n    return [\r\n      {\r\n        pool:   '0x54a71Cad29C314eA081b2B0b1Ac25a7cE3b7f7A5',\r\n        pToken: '0x270128C2d7E8713c8c25F7800738C29214eAFeBA',\r\n        lToken: '0x904262d92B21e5214278632d01405738d841d82a',\r\n        router: '0x07fb21FE50A31dFaf312dFa9f5BA5CF14DC7E1e6',\r\n        bToken: '0x4038191eFb39Fe1d21a48E061F8F14cF4981A0aF',\r\n        bTokenId: '0',\r\n        initialBlock: '9516935',\r\n        bTokenSymbol: 'BUSD',\r\n        symbol: 'BTCUSD',\r\n        symbolId: '0',\r\n        unit: 'BTC',\r\n        chainId: '97',\r\n        version: 'v2',\r\n      },\r\n      {\r\n        pool:   '0x54a71Cad29C314eA081b2B0b1Ac25a7cE3b7f7A5',\r\n        pToken: '0x270128C2d7E8713c8c25F7800738C29214eAFeBA',\r\n        lToken: '0x904262d92B21e5214278632d01405738d841d82a',\r\n        router: '0x07fb21FE50A31dFaf312dFa9f5BA5CF14DC7E1e6',\r\n        bToken: '0x4038191eFb39Fe1d21a48E061F8F14cF4981A0aF',\r\n        bTokenId: '0',\r\n        initialBlock: '9516935',\r\n        bTokenSymbol: 'BUSD',\r\n        symbol: 'ETHUSD',\r\n        symbolId: '1',\r\n        unit: 'ETH',\r\n        chainId: '97',\r\n        version: 'v2',\r\n      },\r\n      {\r\n        pool:   '0x54a71Cad29C314eA081b2B0b1Ac25a7cE3b7f7A5',\r\n        pToken: '0x270128C2d7E8713c8c25F7800738C29214eAFeBA',\r\n        lToken: '0x904262d92B21e5214278632d01405738d841d82a',\r\n        router: '0x07fb21FE50A31dFaf312dFa9f5BA5CF14DC7E1e6',\r\n        bToken: '0xd2F37BADdB702FF778aA038C63b7068054d93508',\r\n        bTokenId: '1',\r\n        initialBlock: '9516935',\r\n        bTokenSymbol: 'AUTO',\r\n        symbol: 'BTCUSD',\r\n        symbolId: '0',\r\n        unit: 'BTC',\r\n        chainId: '97',\r\n        version: 'v2',\r\n      },\r\n      {\r\n        pool:   '0x54a71Cad29C314eA081b2B0b1Ac25a7cE3b7f7A5',\r\n        pToken: '0x270128C2d7E8713c8c25F7800738C29214eAFeBA',\r\n        lToken: '0x904262d92B21e5214278632d01405738d841d82a',\r\n        router: '0x07fb21FE50A31dFaf312dFa9f5BA5CF14DC7E1e6',\r\n        bToken: '0xd2F37BADdB702FF778aA038C63b7068054d93508',\r\n        bTokenId: '1',\r\n        initialBlock: '9516935',\r\n        bTokenSymbol: 'AUTO',\r\n        symbol: 'ETHUSD',\r\n        symbolId: '1',\r\n        unit: 'ETH',\r\n        chainId: '97',\r\n        version: 'v2',\r\n      },\r\n    ];\r\n  }\r\n};\r\n\r\nexport const getFilteredPoolConfigList = (poolAddress, bTokenId, symbolId) => {\r\n  bTokenId = typeof bTokenId === 'number' ? bTokenId.toString() : bTokenId\r\n  symbolId = typeof symbolId === 'number' ? symbolId.toString() : symbolId\r\n  const poolConfigList = getPoolConfigList(DeriEnv.get())\r\n  const check = bTokenId != null\r\n    ? symbolId != null\r\n      ? (i) =>\r\n          i.pool === poolAddress &&\r\n          i.bTokenId === bTokenId &&\r\n          i.symbolId === symbolId\r\n      : (i) => i.pool === poolAddress && i.bTokenId === bTokenId\r\n    : (symbolId != null ? (i) => i.pool === poolAddress && i.symbolId === symbolId : (i) => i.pool === poolAddress);\r\n  if (poolConfigList.length > 0) {\r\n    const res = poolConfigList.filter(check)\r\n    if (res && res.length > 0) {\r\n      return res\r\n    }\r\n  }\r\n  throw new Error(`Cannot find the pool config by poolAddress(${poolAddress}) bTokenId(${bTokenId}) and symbolId(${symbolId})`)\r\n}\r\n\r\nexport const getPoolConfig = (poolAddress, bTokenId, symbolId) => {\r\n  const res =  getFilteredPoolConfigList(poolAddress, bTokenId, symbolId)\r\n  return res[0]\r\n}","import { DeriEnv } from \"../../config\"\r\n\r\nexport const getOracleConfigList = () => {\r\n  if (DeriEnv.get() === 'prod') {\r\n    return [\r\n      {\r\n        chainId: '56',\r\n        symbol: 'BTCUSD',\r\n        address: '0xe3C58d202D4047Ba227e437b79871d51982deEb7',\r\n      },\r\n      {\r\n        chainId: '56',\r\n        symbol: 'ETHUSD',\r\n        address: '0x9BA8966B706c905E594AcbB946Ad5e29509f45EB',\r\n      },\r\n    ];\r\n  } else {\r\n    return [\r\n      {\r\n        chainId: '97',\r\n        symbol: 'BTCUSD',\r\n        address: '0x72Dba14f90bFF7D74B7556A37205c1291Db7f1E9',\r\n      },\r\n      {\r\n        chainId: '97',\r\n        symbol: 'ETHUSD',\r\n        address: '0x36aF683ba23ef721780FCc0e64F25EB72B294020',\r\n      },\r\n    ];\r\n  }\r\n};\r\n\r\nexport const getOracleConfig = (chainId, symbol) => {\r\n  const filteredByChainId = getOracleConfigList().filter((c) => symbol ? c.chainId === chainId && c.symbol === symbol : c.chainId === chainId)\r\n  if (filteredByChainId.length > 0) {\r\n    if (symbol) {\r\n      return filteredByChainId[0]\r\n    } else {\r\n      return filteredByChainId\r\n    }\r\n  }\r\n  throw new Error('getOracleConfig(): invalid chainId or symbol.', chainId, symbol)\r\n}"],"sourceRoot":""}