{"version":3,"sources":["desktop/pages/Broker/BrokerBind.js","components/Button/Button.js","components/Broker/BrokerBind.js"],"names":["Bind","lang","Button","btnText","className","disabled","click","afterClick","checkApprove","wallet","spec","status","setStatus","useState","isApproved","setIsApproved","pending","setPending","buttonText","setbuttonText","loadRef","useRef","beforeAction","current","style","display","afterAction","useEffect","async","detail","account","res","pool","bTokenId","loadApproveStatus","onClick","approve","success","alert","ref","marginRight","inject","observer","address","setAddress","isBind","setIsBind","path","fetchRestApi","data","length","broker_address","getBroker","type","placeholder","value","onChange","event","target","addressChange","undefined","bindAddress","toLocaleLowerCase","indexOf","setBroker","chainId","console","log"],"mappings":"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","file":"static/js/44.aab3bcf6.chunk.js","sourcesContent":["import BrokerBind from '../../../components/Broker/BrokerBind'\nimport \"./Bind.less\"\nexport default function Bind({lang}){\n  return (\n    <BrokerBind lang={lang}/>\n  )\n}","import {useState,useRef,useEffect} from 'react';\nexport default function Button({btnText,className,disabled,click,afterClick,checkApprove,wallet,spec,lang}){\n  const [status, setStatus] = useState(disabled ? 'disabled' : 'enabled');\n  const [isApproved, setIsApproved] = useState(true);\n  const [pending, setPending] = useState(false);\n  const [buttonText, setbuttonText] = useState(btnText)\n  const loadRef = useRef(null)\n\n  const onClick = async () => {\n    if(status !== 'enabled') {\n      return ;\n    }\n    beforeAction()\n    const result = await click();    \n    if(result){\n      afterClick && afterClick()\n    } \n    afterAction()\n  }\n\n  const beforeAction = ()  => {\n    setStatus('disabled')\n    setPending(true);\n    loadRef.current && (loadRef.current.style.display = 'inline-block')\n  }\n\n  const afterAction = () => {\n    loadRef.current && (loadRef.current.style.display = 'none')\n    setStatus('enabled')\n    setPending(false);\n  }\n\n  const loadApproveStatus = async () => {\n    if(checkApprove && wallet && wallet.detail.account){\n      const res = await wallet.isApproved(spec.pool,spec.bTokenId)\n      setIsApproved(res);\n    }\n  }\n  const approve = async () => {\n    beforeAction();\n    const res = await wallet.approve(spec.pool,spec.bTokenId);\n    if(res.success){\n      setIsApproved(true);\n    } else {\n      setIsApproved(false)\n      alert(lang['approve-failed'])\n    }\n    afterAction();\n  }\n\n  const action = () => {\n    if(isApproved){\n      onClick();\n    } else {\n      approve();\n    }\n  }\n\n  useEffect(() => {\n    loadApproveStatus();\n    return () => {};\n  }, [wallet,spec,checkApprove]);\n\n  useEffect(() => {\n    if(btnText){\n      setbuttonText(btnText)\n    }\n    return () => {\n    }\n  }, [btnText])\n\n  return(\n    <button className={className} onClick={action} >\n        <span className='btn-loading-wrap'>\n          <span ref={loadRef}\n            className='spinner spinner-border spinner-border-sm'\n            style={{display : 'none' ,marginRight : '2'}}>\n          </span>\n        </span>\n          {pending ? lang['pending'] : (isApproved ? buttonText : lang['approve'])  }\n        </button>\n  )\n}","import React,{useState,useEffect} from 'react'\nimport {inject,observer} from 'mobx-react'\nimport Button from '../Button/Button';\nimport {\n  fetchRestApi,\n  setBroker,\n} from \"../../lib/web3js/indexV2\";\nfunction BrokerBind({wallet={},lang}){\n  const [address,setAddress] = useState()\n  const [isBind,setIsBind] = useState(true)\n  \n  const hasConnectWallet = () => wallet && wallet.detail && wallet.detail.account\n\n  const BindBroker = async ()=>{\n    if( hasConnectWallet()){\n      if(address === undefined){\n        alert(lang['please-enter-address']) \n        return;\n      }\n      let bindAddress = address.toLocaleLowerCase();\n      if(bindAddress.length !== 42 || bindAddress.indexOf('0x') !== 0){\n        alert(lang['please-enter-a-correct-address']) \n        return;\n      }\n      if(bindAddress === wallet.detail.account){\n        alert(lang['brokder-addr-cannot-be-the-same-as-trader']) \n        return;\n      }\n      if(isBind){\n        alert(lang['cannot-bind-twice']) \n        return;\n      }\n      let res = await setBroker(wallet.detail.chainId,wallet.detail.account,address)\n      console.log(res)\n      if(!res.success){\n        alert(lang['bind-faild'])\n      }\n      if(res.success){\n        setIsBind(true)\n      }\n    }\n  }\n\n  const getBroker = async() =>{\n    let path = `/broker/${wallet.detail.account}/get_broker`\n    let res =  await fetchRestApi(path)\n    if(res.data){\n      if(res.data.length){\n        setIsBind(true)\n        setAddress(res.data[0].broker_address)\n      }else{\n        setIsBind(false)\n      }\n    }else{\n      setIsBind(false)\n    }\n  }\n\n  const addressChange = event =>{\n    let {value} = event.target\n    setAddress(value)\n  }\n  useEffect(()=>{\n    getBroker();\n  },[wallet.detail])\n  return(\n    <div className='broker-bind'>\n      <div className='header'>\n        {lang['brokers-address']}\n      </div>\n      <div className='bind-input'>\n        <div className='address'>\n          <input className='address-input' type='text'\n          placeholder={lang['address']}\n          value={address}   \n          onChange={event =>  addressChange(event) }\n          />\n        </div>\n        <div className='bind-button'>\n          <Button className='btn' btnText={lang['bind']} lang={lang} click={BindBroker} />\n        </div>\n      </div>\n    </div>\n  )\n}\nexport default inject('wallet')(observer(BrokerBind))"],"sourceRoot":""}